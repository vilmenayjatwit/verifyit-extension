/*! For license information please see background.js.LICENSE.txt */
(()=>{var e={31:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function i(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xorwow=i}(0,e=n.nmd(e),n.amdD)},67:function(e,t,n){var r;!function(e,s){function a(e){var t=this;t.next=function(){var e,n,r=t.x,s=t.i;return e=r[s],n=(e^=e>>>7)^e<<24,n^=(e=r[s+1&7])^e>>>10,n^=(e=r[s+3&7])^e>>>3,n^=(e=r[s+4&7])^e<<7,e=r[s+7&7],n^=(e^=e<<13)^e<<9,r[s]=n,t.i=s+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function i(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.x&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xorshift7=i}(0,e=n.nmd(e),n.amdD)},180:function(e,t,n){var r;!function(e,s){function a(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function i(e,t){var n=new a(e),r=t&&t.state,s=n.next;return s.int32=function(){return 4294967296*n.next()|0},s.double=function(){return s()+11102230246251565e-32*(2097152*s()|0)},s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.alea=i}(0,e=n.nmd(e),n.amdD)},181:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function i(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xor128=i}(0,e=n.nmd(e),n.amdD)},234:()=>{},391:(e,t,n)=>{var r=n(180),s=n(181),a=n(31),o=n(67),i=n(833),u=n(717),p=n(801);p.alea=r,p.xor128=s,p.xorwow=a,p.xorshift7=o,p.xor4096=i,p.tychei=u,e.exports=p},570:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var s={},a={};function o(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=a[e])?r:(n=u(e,(0|e)<0?-1:0,!0),o&&(a[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=s[e])?r:(n=u(e,e<0?-1:0,!1),o&&(s[e]=n),n)}function i(e,t){if(isNaN(e))return t?g:y;if(t){if(e<0)return g;if(e>=d)return v}else{if(e<=-m)return T;if(e+1>=m)return N}return e<0?i(-e,t).neg():u(e%h|0,e/h|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=o,n.fromNumber=i,n.fromBits=u;var p=Math.pow;function l(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return y;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return l(e.substring(1),t,n).neg();for(var s=i(p(n,8)),a=y,o=0;o<e.length;o+=8){var u=Math.min(8,e.length-o),c=parseInt(e.substring(o,o+u),n);if(u<8){var h=i(p(n,u));a=a.mul(h).add(i(c))}else a=(a=a.mul(s)).add(i(c))}return a.unsigned=t,a}function c(e,t){return"number"==typeof e?i(e,t):"string"==typeof e?l(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=l,n.fromValue=c;var h=4294967296,d=h*h,m=d/2,f=o(1<<24),y=o(0);n.ZERO=y;var g=o(0,!0);n.UZERO=g;var b=o(1);n.ONE=b;var w=o(1,!0);n.UONE=w;var x=o(-1);n.NEG_ONE=x;var N=u(-1,2147483647,!1);n.MAX_VALUE=N;var v=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=v;var T=u(0,-2147483648,!1);n.MIN_VALUE=T;var k=n.prototype;k.toInt=function(){return this.unsigned?this.low>>>0:this.low},k.toNumber=function(){return this.unsigned?(this.high>>>0)*h+(this.low>>>0):this.high*h+(this.low>>>0)},k.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(T)){var t=i(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var s=i(p(e,6),this.unsigned),a=this,o="";;){var u=a.div(s),l=(a.sub(u.mul(s)).toInt()>>>0).toString(e);if((a=u).isZero())return l+o;for(;l.length<6;)l="0"+l;o=""+l+o}},k.getHighBits=function(){return this.high},k.getHighBitsUnsigned=function(){return this.high>>>0},k.getLowBits=function(){return this.low},k.getLowBitsUnsigned=function(){return this.low>>>0},k.getNumBitsAbs=function(){if(this.isNegative())return this.eq(T)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},k.isZero=function(){return 0===this.high&&0===this.low},k.eqz=k.isZero,k.isNegative=function(){return!this.unsigned&&this.high<0},k.isPositive=function(){return this.unsigned||this.high>=0},k.isOdd=function(){return!(1&~this.low)},k.isEven=function(){return!(1&this.low)},k.equals=function(e){return r(e)||(e=c(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},k.eq=k.equals,k.notEquals=function(e){return!this.eq(e)},k.neq=k.notEquals,k.ne=k.notEquals,k.lessThan=function(e){return this.comp(e)<0},k.lt=k.lessThan,k.lessThanOrEqual=function(e){return this.comp(e)<=0},k.lte=k.lessThanOrEqual,k.le=k.lessThanOrEqual,k.greaterThan=function(e){return this.comp(e)>0},k.gt=k.greaterThan,k.greaterThanOrEqual=function(e){return this.comp(e)>=0},k.gte=k.greaterThanOrEqual,k.ge=k.greaterThanOrEqual,k.compare=function(e){if(r(e)||(e=c(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},k.comp=k.compare,k.negate=function(){return!this.unsigned&&this.eq(T)?T:this.not().add(b)},k.neg=k.negate,k.add=function(e){r(e)||(e=c(e));var t=this.high>>>16,n=65535&this.high,s=this.low>>>16,a=65535&this.low,o=e.high>>>16,i=65535&e.high,p=e.low>>>16,l=0,h=0,d=0,m=0;return d+=(m+=a+(65535&e.low))>>>16,h+=(d+=s+p)>>>16,l+=(h+=n+i)>>>16,l+=t+o,u((d&=65535)<<16|(m&=65535),(l&=65535)<<16|(h&=65535),this.unsigned)},k.subtract=function(e){return r(e)||(e=c(e)),this.add(e.neg())},k.sub=k.subtract,k.multiply=function(e){if(this.isZero())return y;if(r(e)||(e=c(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return y;if(this.eq(T))return e.isOdd()?T:y;if(e.eq(T))return this.isOdd()?T:y;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(f)&&e.lt(f))return i(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,s=65535&this.high,a=this.low>>>16,o=65535&this.low,p=e.high>>>16,l=65535&e.high,h=e.low>>>16,d=65535&e.low,m=0,g=0,b=0,w=0;return b+=(w+=o*d)>>>16,g+=(b+=a*d)>>>16,b&=65535,g+=(b+=o*h)>>>16,m+=(g+=s*d)>>>16,g&=65535,m+=(g+=a*h)>>>16,g&=65535,m+=(g+=o*l)>>>16,m+=n*d+s*h+a*l+o*p,u((b&=65535)<<16|(w&=65535),(m&=65535)<<16|(g&=65535),this.unsigned)},k.mul=k.multiply,k.divide=function(e){if(r(e)||(e=c(e)),e.isZero())throw Error("division by zero");var n,s,a;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?g:y;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return g;if(e.gt(this.shru(1)))return w;a=g}else{if(this.eq(T))return e.eq(b)||e.eq(x)?T:e.eq(T)?b:(n=this.shr(1).div(e).shl(1)).eq(y)?e.isNegative()?b:x:(s=this.sub(e.mul(n)),a=n.add(s.div(e)));if(e.eq(T))return this.unsigned?g:y;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();a=y}for(s=this;s.gte(e);){n=Math.max(1,Math.floor(s.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),l=o<=48?1:p(2,o-48),h=i(n),d=h.mul(e);d.isNegative()||d.gt(s);)d=(h=i(n-=l,this.unsigned)).mul(e);h.isZero()&&(h=b),a=a.add(h),s=s.sub(d)}return a},k.div=k.divide,k.modulo=function(e){return r(e)||(e=c(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},k.mod=k.modulo,k.rem=k.modulo,k.not=function(){return u(~this.low,~this.high,this.unsigned)},k.and=function(e){return r(e)||(e=c(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},k.or=function(e){return r(e)||(e=c(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},k.xor=function(e){return r(e)||(e=c(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},k.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},k.shl=k.shiftLeft,k.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},k.shr=k.shiftRight,k.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},k.shru=k.shiftRightUnsigned,k.shr_u=k.shiftRightUnsigned,k.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},k.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},k.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},k.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},k.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},590:()=>{},717:function(e,t,n){var r;!function(e,s){function a(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,s=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^s,s=s-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^s,t.a=s-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function i(e,t){var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&("object"==typeof r&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.tychei=i}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(s,a,o){var i,u=256,p=o.pow(u,6),l=o.pow(2,52),c=2*l,h=255;function d(e,t,n){var r=[],h=g(y((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(a)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(s.crypto||s.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=s.navigator,n=t&&t.plugins;return[+new Date,s,n,s.screen,b(a)]}}():e,3),r),d=new m(r),w=function(){for(var e=d.g(6),t=p,n=0;e<l;)e=(e+n)*u,t*=u,n=d.g(1);for(;e>=c;)e/=2,t/=2,n>>>=1;return(e+n)/t};return w.int32=function(){return 0|d.g(4)},w.quick=function(){return d.g(4)/4294967296},w.double=w,g(b(d.S),a),(t.pass||n||function(e,t,n,r){return r&&(r.S&&f(r,d),e.state=function(){return f(d,{})}),n?(o.random=e,t):e})(w,h,"global"in t?t.global:this==o,t.state)}function m(e){var t,n=e.length,r=this,s=0,a=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);s<u;)o[s]=s++;for(s=0;s<u;s++)o[s]=o[a=h&a+e[s%n]+(t=o[s])],o[a]=t;(r.g=function(e){for(var t,n=0,s=r.i,a=r.j,o=r.S;e--;)t=o[s=h&s+1],n=n*u+o[h&(o[s]=o[a=h&a+t])+(o[a]=t)];return r.i=s,r.j=a,n})(u)}function f(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function y(e,t){var n,r=[],s=typeof e;if(t&&"object"==s)for(n in e)try{r.push(y(e[n],t-1))}catch(e){}return r.length?r:"string"==s?e:e+"\0"}function g(e,t){for(var n,r=e+"",s=0;s<r.length;)t[h&s]=h&(n^=19*t[h&s])+r.charCodeAt(s++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(g(o.random(),a),e.exports){e.exports=d;try{i=n(234)}catch(e){}}else void 0===(r=function(){return d}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},817:()=>{},833:function(e,t,n){var r;!function(e,s){function a(e){var t=this;t.next=function(){var e,n,r=t.w,s=t.X,a=t.i;return t.w=r=r+1640531527|0,n=s[a+34&127],e=s[a=a+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=s[a]=n^e,t.i=a,n+(r^r>>>16)|0},function(e,t){var n,r,s,a,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),s=0,a=-32;a<u;++a)t&&(r^=t.charCodeAt((a+32)%t.length)),0===a&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(o=o+1640531527|0,s=0==(n=i[127&a]^=r+o)?s+1:0);for(s>=128&&(i[127&(t&&t.length||0)]=-1),s=127,a=512;a>0;--a)r=i[s+34&127],n=i[s=s+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[s]=r^n;e.w=o,e.X=i,e.i=s}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function i(e,t){null==e&&(e=+new Date);var n=new a(e),r=t&&t.state,s=function(){return(n.next()>>>0)/4294967296};return s.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},s.int32=n.next,s.quick=s,r&&(r.X&&o(r,n),s.state=function(){return o(n,{})}),s}s&&s.exports?s.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,s))||(s.exports=r):this.xor4096=i}(0,e=n.nmd(e),n.amdD)}},t={};function n(r){var s=t[r];if(void 0!==s)return s.exports;var a=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.loaded=!0,a.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};n.r(e),n.d(e,{browserFiles:()=>dn,browserHTTPRequest:()=>vn,concatenateArrayBuffers:()=>ft,copyModel:()=>tn,decodeWeights:()=>ct,encodeWeights:()=>lt,fromMemory:()=>En,fromMemorySync:()=>_n,getLoadHandlers:()=>_t,getModelArtifactsForJSON:()=>wt,getModelArtifactsForJSONSync:()=>bt,getModelArtifactsInfoForJSON:()=>xt,getSaveHandlers:()=>Et,getWeightSpecs:()=>Nt,http:()=>Nn,isHTTPScheme:()=>wn,listModels:()=>Xt,loadWeights:()=>yn,moveModel:()=>nn,registerLoadRouter:()=>St,registerSaveRouter:()=>kt,removeModel:()=>en,weightsLoaderFactory:()=>gn,withSaveHandler:()=>In,withSaveHandlerSync:()=>$n});var t={};n.r(t),n.d(t,{conv2d:()=>Lo,depthwiseConv2d:()=>Po,matMul:()=>Vo});var r={};n.r(r),n.d(r,{json:()=>Ji});var s={};n.r(s),n.d(s,{json:()=>Yi});var a={};n.r(a),n.d(a,{json:()=>Zi});var o={};n.r(o),n.d(o,{json:()=>Qi});var i={};n.r(i),n.d(i,{json:()=>Xi});var u={};n.r(u),n.d(u,{json:()=>eu});var p={};n.r(p),n.d(p,{json:()=>tu});var l={};n.r(l),n.d(l,{json:()=>nu});var c={};n.r(c),n.d(c,{json:()=>ru});var h={};n.r(h),n.d(h,{json:()=>su});var d={};n.r(d),n.d(d,{json:()=>au});var m={};n.r(m),n.d(m,{json:()=>ou});var f={};n.r(f),n.d(f,{json:()=>iu});var y={};n.r(y),n.d(y,{json:()=>uu});var g={};n.r(g),n.d(g,{json:()=>pu});var b={};n.r(b),n.d(b,{json:()=>lu});var w={};n.r(w),n.d(w,{json:()=>cu});var x={};n.r(x),n.d(x,{json:()=>hu});var N={};n.r(N),n.d(N,{json:()=>du});var v={};n.r(v),n.d(v,{OP_SCOPE_SUFFIX:()=>rt,abs:()=>An,acos:()=>Dn,acosh:()=>On,add:()=>Mn,addN:()=>Fn,all:()=>Cn,any:()=>Rn,argMax:()=>Ln,argMin:()=>Bn,asin:()=>zn,asinh:()=>Pn,atan:()=>Vn,atan2:()=>Un,atanh:()=>Kn,avgPool:()=>Qn,avgPool3d:()=>Xn,basicLSTMCell:()=>or,batchNorm:()=>ur,batchNorm2d:()=>pr,batchNorm3d:()=>lr,batchNorm4d:()=>cr,batchToSpaceND:()=>ir,bincount:()=>hr,booleanMaskAsync:()=>wo,broadcastArgs:()=>dr,broadcastTo:()=>mr,buffer:()=>an,cast:()=>on,ceil:()=>fr,clipByValue:()=>gr,clone:()=>un,complex:()=>at,concat:()=>er,concat1d:()=>br,concat2d:()=>wr,concat3d:()=>xr,concat4d:()=>Nr,conv1d:()=>Tr,conv2d:()=>vr,conv2dTranspose:()=>Sr,conv3d:()=>Er,conv3dTranspose:()=>Ir,cos:()=>$r,cosh:()=>Ar,cosineWindow:()=>Ao,cumprod:()=>Dr,cumsum:()=>Or,denseBincount:()=>Mr,depthToSpace:()=>Fr,depthwiseConv2d:()=>Cr,diag:()=>Rr,dilation2d:()=>Lr,div:()=>zr,divNoNan:()=>qr,dot:()=>Wr,dropout:()=>Io,einsum:()=>Hr,elu:()=>jr,enclosingPowerOfTwo:()=>$o,equal:()=>Vr,erf:()=>Gr,euclideanNorm:()=>as,exp:()=>os,expandDims:()=>is,expm1:()=>us,eye:()=>ls,fft:()=>ja,fill:()=>yr,floor:()=>cs,floorDiv:()=>Br,fused:()=>t,gather:()=>hs,gatherND:()=>_o,greater:()=>ds,greaterEqual:()=>ms,ifft:()=>Ga,imag:()=>fs,image:()=>Mi,inTopKAsync:()=>Do,irfft:()=>Ja,isFinite:()=>ys,isInf:()=>gs,isNaN:()=>bs,leakyRelu:()=>ws,less:()=>xs,lessEqual:()=>Ns,linalg:()=>Fi,linspace:()=>vs,localResponseNormalization:()=>Ts,log:()=>ks,log1p:()=>Ss,logSigmoid:()=>$s,logSoftmax:()=>Ds,logSumExp:()=>Os,logicalAnd:()=>Ms,logicalNot:()=>Fs,logicalOr:()=>Cs,logicalXor:()=>Rs,losses:()=>Ci,lowerBound:()=>zs,matMul:()=>tr,max:()=>Yr,maxPool:()=>Ps,maxPool3d:()=>Vs,maxPoolWithArgmax:()=>Us,maximum:()=>Ks,mean:()=>qs,meshgrid:()=>js,min:()=>Zr,minimum:()=>Gs,mirrorPad:()=>Js,mod:()=>Ys,moments:()=>Zs,movingAverage:()=>ko,mul:()=>nr,multiRNNCell:()=>Qs,multinomial:()=>Xs,neg:()=>_s,norm:()=>ss,notEqual:()=>ea,oneHot:()=>ta,ones:()=>Hs,onesLike:()=>na,op:()=>st,outerProduct:()=>ra,pad:()=>sa,pad1d:()=>aa,pad2d:()=>oa,pad3d:()=>ia,pad4d:()=>ua,pool:()=>la,pow:()=>Qr,prelu:()=>ca,print:()=>pn,prod:()=>ha,raggedGather:()=>da,raggedTensorToTensor:()=>ma,rand:()=>fa,randomGamma:()=>xa,randomNormal:()=>Na,randomStandardNormal:()=>va,randomUniform:()=>Ta,range:()=>ka,real:()=>Sa,reciprocal:()=>Ea,relu:()=>_a,relu6:()=>Ia,reshape:()=>Zn,reverse:()=>$a,reverse1d:()=>Aa,reverse2d:()=>Da,reverse3d:()=>Oa,reverse4d:()=>Ma,rfft:()=>Za,round:()=>Fa,rsqrt:()=>Ca,scalar:()=>Xr,scatterND:()=>So,searchSorted:()=>Bs,selu:()=>Ra,separableConv2d:()=>La,setdiff1dAsync:()=>Ba,sigmoid:()=>rr,sign:()=>za,signal:()=>Oi,sin:()=>Pa,sinh:()=>Va,slice:()=>sr,slice1d:()=>Ua,slice2d:()=>Ka,slice3d:()=>qa,slice4d:()=>Wa,softmax:()=>Ha,softplus:()=>Is,spaceToBatchND:()=>pa,sparse:()=>Ri,sparseToDense:()=>Eo,spectral:()=>Di,split:()=>Ya,sqrt:()=>es,square:()=>ts,squaredDifference:()=>Qa,squeeze:()=>Xa,stack:()=>eo,step:()=>to,stridedSlice:()=>no,string:()=>Li,sub:()=>As,sum:()=>ns,tan:()=>ro,tanh:()=>ar,tensor:()=>it,tensor1d:()=>so,tensor2d:()=>ao,tensor3d:()=>oo,tensor4d:()=>io,tensor5d:()=>uo,tensor6d:()=>po,tile:()=>ps,topk:()=>lo,transpose:()=>To,truncatedNormal:()=>co,unique:()=>ho,unsortedSegmentSum:()=>mo,unstack:()=>fo,upperBound:()=>yo,variable:()=>go,where:()=>Ur,whereAsync:()=>bo,zeros:()=>Ws,zerosLike:()=>Kr});class T{refCount(e){return k("refCount")}incRef(e){return k("incRef")}timerAvailable(){return!0}time(e){return k("time")}read(e){return k("read")}readSync(e){return k("readSync")}readToGPU(e,t){return k("readToGPU")}numDataIds(){return k("numDataIds")}disposeData(e,t){return k("disposeData")}write(e,t,n){return k("write")}move(e,t,n,r,s){return k("move")}memory(){return k("memory")}floatPrecision(){return k("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return k("dispose")}}function k(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function S(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function E(e,t,n=""){S(A(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function _(e){S(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function I(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||F(e)&&!n)for(let r=0;r<e.length;++r)I(e[r],t,n);else t.push(e);return t}function $(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function A(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function D(e){return e%1==0}function O(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function M(e,t){const n=t.length;return S((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`),S(e.every(e=>D(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?n+e:e)}function F(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function C(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function R(e){return"string"==typeof e||e instanceof String}function L(e){return Array.isArray(e)?L(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":"number"==typeof e?"float32":R(e)?"string":"boolean"==typeof e?"bool":"float32"}function B(e){return!!(e&&e.constructor&&e.call&&e.apply)}function z(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function P(e,t,n,r=!1){const s=new Array;if(1===t.length){const a=t[0]*(r?2:1);for(let t=0;t<a;t++)s[t]=n[e+t]}else{const a=t[0],o=t.slice(1),i=o.reduce((e,t)=>e*t)*(r?2:1);for(let t=0;t<a;t++)s[t]=P(e+t*i,o,n,r)}return s}function V(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return P(0,e,t,n)}function U(e,t){const n=K(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function K(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function q(e){e.forEach(t=>{S(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function W(e){return e&&e.then&&"function"==typeof e.then}const H="tfjsflags";class j{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=G,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(J().getBool("IS_TEST")||J().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];J().getBool("IS_TEST")||J().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(W(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);H in e&&e[H].split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function G(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function J(){return Z}let Y,Z=null;function Q(){if(null==Y){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Y=e}return Y}function X(e,t){const n=function(){const e=Q();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const ee="Cast",te="Fill",ne="Identity",re="LinSpace",se="Range",ae="Tile",oe="Transpose",ie="_FusedMatMul",ue="FusedConv2D",pe="FusedDepthwiseConv2D",le=X("kernelRegistry",()=>new Map),ce=X("gradRegistry",()=>new Map);function he(e,t){const n=function(e,t){return`${t}_${e}`}(e,t);return le.get(n)}function de(e){return ce.get(e)}function me(e){const t=le.entries(),n=[];for(;;){const{done:r,value:s}=t.next();if(r)break;const[a,o]=s,[i]=a.split("_");i===e&&n.push(o)}return n}function fe(...e){J().getBool("IS_TEST")||J().getBool("PROD")||console.warn(...e)}var ye=n(570);const ge=n.n(ye)()||ye;function be(e){return ge.fromString(e,!0,16)}function we(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=I(e)),J().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function xe(){return J().platform.now()}function Ne(e,t="utf-8"){return t=t||"utf-8",J().platform.decode(e,t)}be("c3a5c85c97cb3127"),be("b492b66fbe98f273"),be("9ae16a3b2f90404f");class ve{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new ke)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let a;const o=xe();if(this.backendTimer.timerAvailable())a=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();a=Promise.resolve({kernelMs:xe()-o})}if(J().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then(t=>{Te(t,n.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:a.then(e=>e.kernelMs),extraInfo:a.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:s,extraInfo:a}=e;n.forEach(e=>{Promise.all([e.data(),r,a]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],s,n[2])})})}}function Te(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class ke{logKernelProfile(e,t,n,r,s,a){const o="number"==typeof r?O(`${r}ms`,9):r.error,i=O(e,25),u=t.rank,p=t.size,l=O(t.shape.toString(),14);let c="";for(const e in s){const n=s[e];if(null!=n){const r=n.shape||t.shape,s=r.length;c+=`${e}: ${s}D ${s>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${l}\t%c${p}\t%c${c}\t%c${a}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Se(e,t,n,r){const s=z(t),a=function(e,t,n,r){const s=$(t),a=r[r.length-1],o=new Array(a).fill(0),i=t.length,u="complex64"===n?$e(e):e;if(i>1)for(let e=0;e<s/a;e++){const t=e*a;for(let e=0;e<a;e++)o[e]=Math.max(o[e],Ee(u[t+e],0,n).length)}return o}(e,t,n,s),o=t.length,i=Ie(e,t,n,s,a),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map(e=>"    "+e).join("\n")),u.join("\n")}function Ee(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:R(e)?`'${e}'`:"bool"===n?_e(e):parseFloat(e.toFixed(7)).toString(),O(r,t)}function _e(e){return 0===e?"false":"true"}function Ie(e,t,n,r,s,a=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u)return"complex64"===n?[Ee($e(e)[0],0,n)]:"bool"===n?[_e(e[0])]:[e[0].toString()];if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),a=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=$e(r),a=$e(a)),["["+r.map((e,t)=>Ee(e,s[t],n)).join(", ")+", ..., "+a.map((e,t)=>Ee(e,s[i-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?$e(e):Array.from(e)).map((e,t)=>Ee(e,s[t],n)).join(", ")+"]"]}const p=t.slice(1),l=r.slice(1),c=r[0]*o,h=[];if(i>20){for(let t=0;t<3;t++){const r=t*c,a=r+c;h.push(...Ie(e.slice(r,a),p,n,l,s,!1))}h.push("...");for(let t=i-3;t<i;t++){const r=t*c,a=r+c;h.push(...Ie(e.slice(r,a),p,n,l,s,t===i-1))}}else for(let t=0;t<i;t++){const r=t*c,a=r+c;h.push(...Ie(e.slice(r,a),p,n,l,s,t===i-1))}const d=2===u?",":"";h[0]="["+h[0]+d;for(let e=1;e<h.length-1;e++)h[e]=" "+h[e]+d;let m=",\n";for(let e=2;e<u;e++)m+="\n";return h[h.length-1]=" "+h[h.length-1]+"]"+(a?"":m),h}function $e(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class Ae{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=$(e),null!=n){const e=n.length;S(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||function(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}(t,this.size),this.strides=z(e)}set(e,...t){0===t.length&&(t=[0]),S(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return De().makeTensor(this.values,this.shape,this.dtype)}}let De=null,Oe=null,Me=null;class Fe{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=$(e),this.strides=z(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Oe.buffer(this.shape,this.dtype,e)}bufferSync(){return Oe.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return V(this.shape,e,"complex64"===this.dtype)}arraySync(){return V(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=De().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>Ne(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),De().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=De().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>Ne(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await De().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(De().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Oe.print(this,e)}clone(){return this.throwIfDisposed(),Oe.clone(this)}toString(e=!1){return Se(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Oe.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),De().makeVariable(this,e,t,n)}}Object.defineProperty(Fe,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),X("Tensor",()=>Fe);class Ce extends Fe{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!A(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);De().disposeTensor(this),this.dataId=e.dataId,De().incRef(this,null)}dispose(){De().disposeVariable(this),this.isDisposedInternal=!0}}var Re,Le,Be,ze,Pe;Object.defineProperty(Ce,Symbol.hasInstance,{value:e=>e instanceof Fe&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Re||(Re={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(Le||(Le={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Be||(Be={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(ze||(ze={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Pe||(Pe={}));const Ve={float32:ze,int32:Le,bool:Be,complex64:Pe};function Ue(e,t){if(e.dtype===t.dtype)return[e,t];const n=function(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Ve[e][t]}(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Ke(e){const t=[];return qe(e,t,new Set),t}function qe(e,t,n){if(null==e)return;if(e instanceof Fe)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const s=e;for(const e in s){const r=s[e];n.has(r)||(n.add(r),qe(r,t,n))}}function We(e){return null!=e.kernelName}class He{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class je{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new He}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(fe(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new ve(this.backendInstance),!0}setupRegisteredKernels(){me(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){me(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof T||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,fe(`Initialization of backend ${e} failed`),fe(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return fe(`Initialization of backend ${e} failed`),fe(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:s}=this.initializeBackend(n);if(s||r)return{name:n,asyncInit:s}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,s=this.readSync(t),a=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,s,n.shape,n.dtype,a),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return je.nextTensorId++}nextVariableId(){return je.nextVariableId++}clone(e){const t=Je.runKernel(ne,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>{const t={x:e};return Je.runKernel(ee,t,{dtype:"float32"})}}),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==he(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let s=0;n.forEach(e=>{s+="complex64"===e.dtype?3:1});const a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-s-a;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),s=this.state.numBytes,a=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=We(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(We(e)){const{kernelName:t,inputs:s,attrs:a}=e;null==this.backendName&&this.backend;const u=he(t,this.backendName);S(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:s,attrs:a,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const p=o.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(r){const e=this.getTensorsForGradient(t,s,p);n=this.saveTensorsForBackwardMode(e)}return p}}else{const{forwardFunc:t}=e,s=e=>{r&&(n=e.map(e=>this.keep(this.clone(e))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy(()=>t(this.backend,s));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:p,attrs:l}=e,c=We(e)?null:e.backwardsFunc;let h;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(h=this.profiler.profileKernel(u,p,()=>o()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(h),t=h.outputs):t=o()}),r&&this.addTapeNode(u,p,t,c,n,l),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-s,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-a,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(p).map(e=>null!=p[e]?p[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:h.timeMs,extraInfo:h.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map(e=>this.keep(this.clone(e)));return t}getTensorsForGradient(e,t,n){const r=de(e);if(null!=r){const e=r.inputsToSave||[],s=r.outputsToSave||[];let a;r.saveAllInputs?(S(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),a=Object.keys(t).map(e=>t[e])):a=e.map(e=>t[e]);const o=n.filter((e,t)=>s[t]);return a.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let s=e;"string"===n&&R(e[0])&&(s=e.map(e=>function(e,t="utf-8"){return t=t||"utf-8",J().platform.encode(e,t)}(e)));const a=r.write(s,t,n),o=new Fe(t,n,a,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(a),t=function(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}(s);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const s={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(s,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:s}=e,a=new Fe(r,s,n,this.nextTensorId());return this.trackTensor(a,t),a}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const s=new Ce(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[s.name])throw new Error(`Variable with name ${s.name} was already registered`);return this.state.registeredVariables[s.name]=s,this.incRef(s,this.backend),s}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*C(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Ce||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*C(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,s,a){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:s},i=de(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=K(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],s,a))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ke(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(S(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const s=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));S(s instanceof Fe,()=>"The result y returned by f() must be a tensor.");const a=function(e,t,n){const r={},s={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const a=e[n],o=a.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){a.outputs.forEach(e=>r[e.id]=!0),i=!0,s[a.id]=!0;break}if(i)break}}const a={};a[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(a[n.outputs[e].id]){for(const e in r)a[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(s[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const s=n.inputs[t];r[s.id]&&(e[t]=s)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,s);if(!r&&0===a.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[s.id]=null==n?function(e){const t=U($(e),"float32");return Je.makeTensor(t,e,"float32")}(s.shape):n,function(e,t,n,r){for(let s=t.length-1;s>=0;s--){const a=t[s],o=[];if(a.outputs.forEach(t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)}),null==a.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${a.kernelName}.`);const i=a.gradient(o);for(const t in a.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const s=n(()=>i[t]());if("float32"!==s.dtype)throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${s.dtype}'`);const o=a.inputs[t];if(!A(s.shape,o.shape))throw new Error(`Error in gradient for op ${a.kernelName}. The gradient of input '${t}' has shape '${s.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=s;else{const t=e[o.id];e[o.id]=r(t,s),t.dispose()}}}}(e,a,e=>this.tidy(e),Ye);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:s,grads:r}})}customGrad(e){return S(B(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;S(t.every(e=>e instanceof Fe),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc({forwardFunc:(r,s)=>(n=e(...t,s),S(n.value instanceof Fe,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),S(B(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{const s=n.gradFunc(e,r),a=Array.isArray(s)?s:[s];S(a.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),S(a.every(e=>e instanceof Fe),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const o={};return a.forEach((e,t)=>{o[t]=()=>e}),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=xe(),n=await this.backend.time(e);return n.wallMs=xe()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new He;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Ge(){const e=Q();if(null==e._tfengine){const t=new j(e);e._tfengine=new je(t)}var t;return t=e._tfengine.ENV,Z=t,De=()=>e._tfengine,e._tfengine}je.nextTensorId=0,je.nextVariableId=0;const Je=Ge();function Ye(e,t){const n={a:e,b:t};return Je.runKernel("Add",n)}const Ze=J();function Qe(e,t){let n=e;if(F(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||F(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&J().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&Xe(e,r,[]),r}function Xe(e,t,n){if(n=n||[],!Array.isArray(e)&&!F(e))return void S(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);S(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),S(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const r=t.slice(1);for(let t=0;t<e.length;++t)Xe(e[t],r,n.concat(t))}function et(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function tt(e,t,n,r="numeric"){if(e instanceof Fe)return et(r,e.dtype,t,n),e;let s=L(e);if("string"!==s&&["bool","int32","float32"].indexOf(r)>=0&&(s=r),et(r,s,t,n),null==e||!F(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const a=Qe(e,s);F(e)||Array.isArray(e)||(e=[e]);const o="string"!==s?we(e,s):I(e,[],!0);return Je.makeTensor(o,a,s)}function nt(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,s)=>tt(e,`${t}[${s}]`,n,r))}Ze.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Ze.registerFlag("IS_BROWSER",()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope),Ze.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Ze.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Ze.registerFlag("PROD",()=>!1),Ze.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Ze.getBool("DEBUG")),Ze.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Ze.registerFlag("IS_TEST",()=>!1),Ze.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),Ze.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),Ze.registerFlag("ENGINE_COMPILE_ONLY",()=>!1),Ze.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),Ze.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const rt="__op";function st(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=rt;const s=(...e)=>{Je.startScope(n);try{const t=r(...e);return W(t)&&console.error("Cannot return a Promise inside of tidy."),Je.endScope(t),t}catch(e){throw Je.endScope(null),e}};return Object.defineProperty(s,"name",{value:n,configurable:!0}),s}const at=st({complex_:function(e,t){const n=tt(e,"real","complex"),r=tt(t,"imag","complex");E(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const s={real:n,imag:r};return Je.runKernel("Complex",s)}});function ot(e,t,n,r){if(null==r&&(r=L(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!F(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){q(t);const e=$(t),r=$(n);S(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){const r=n[e],s=e!==n.length-1||r!==$(t.slice(e));S(n[e]===t[e]||!s,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return F(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?we(e,r):I(e,[],!0),Je.makeTensor(e,t,r)}function it(e,t,n){return ot(e,t,Qe(e,n),n)}const ut={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},pt=4;async function lt(e,t){const n=[],r=[],s=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let a=0;a<s.length;++a){const o=s[a],i=Array.isArray(e)?e[a].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise(async e=>{const t=await i.bytes(),n=t.reduce((e,t)=>e+t.length,0)+pt*t.length,r=new Uint8Array(n);let s=0;for(let e=0;e<t.length;e++){const n=t[e],a=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(a,s),s+=pt,r.set(n,s),s+=n.length}e(r)});r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:ht(await Promise.all(r)),specs:n}}function ct(e,t){const n={};let r,s=0;for(const a of t){const t=a.name,o=a.dtype,i=a.shape,u=$(i);let p;if("quantization"in a){const n=a.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${a.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${a.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${a.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=ut[n.dtype],l=e.slice(s,s+u*i),c="uint8"===n.dtype?new Uint8Array(l):new Uint16Array(l);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){p=new Float32Array(c.length);for(let e=0;e<c.length;e++){const t=c[e];p[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=vt()),p=r(c)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);p=new Int32Array(c.length);for(let e=0;e<c.length;e++){const t=c[e];p[e]=Math.round(t*n.scale+n.min)}}s+=u*i}else if("string"===o){const t=$(a.shape);p=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(s,s+pt))[0];s+=pt;const n=new Uint8Array(e.slice(s,s+t));p.push(n),s+=t}}else{const r=ut[o],a=e.slice(s,s+u*r);if("float32"===o)p=new Float32Array(a);else if("int32"===o)p=new Int32Array(a);else if("bool"===o)p=new Uint8Array(a);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{p=new Float32Array(a);const e=new Float32Array(p.length/2),r=new Float32Array(p.length/2);for(let t=0;t<e.length;t++)e[t]=p[2*t],r[t]=p[2*t+1];const s=it(e,i,"float32"),o=it(r,i,"float32");n[t]=at(s,o),s.dispose(),o.dispose()}}s+=u*r}"complex64"!==o&&(n[t]=it(p,i,o))}return n}function ht(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});const r=new Uint8Array(t);let s=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),s),s+=e.byteLength}),r.buffer}const dt="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function mt(e){return dt?Buffer.byteLength(e):new Blob([e]).size}function ft(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function yt(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function gt(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function bt(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function wt(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),bt(e,n,r)}function xt(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:mt(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:mt(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function Nt(e){const t=[];for(const n of e)t.push(...n.weights);return t}function vt(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const s=new ArrayBuffer(4*r.length),a=new Uint32Array(s);for(let s=0;s<r.length;s++){const o=r[s],i=e[n[o>>10]+(1023&o)]+t[o>>10];a[s]=i}return new Float32Array(s)}}class Tt{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Tt.instance&&(Tt.instance=new Tt),Tt.instance}static registerSaveRouter(e){Tt.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Tt.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Tt.getHandlers(e,"save")}static getLoadHandlers(e,t){return Tt.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Tt.getInstance().loadRouters:Tt.getInstance().saveRouters).forEach(t=>{const s=t(e,n);null!==s&&r.push(s)}),r}}const kt=e=>Tt.registerSaveRouter(e),St=e=>Tt.registerLoadRouter(e),Et=e=>Tt.getSaveHandlers(e),_t=(e,t)=>Tt.getLoadHandlers(e,t),It="tensorflowjs",$t="models_store",At="model_info_store";function Dt(){if(!J().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Ot(e){const t=e.result;t.createObjectStore($t,{keyPath:"modelPath"}),t.createObjectStore(At,{keyPath:"modelPath"})}class Mt{constructor(e){if(this.indexedDB=Dt(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open(It,1);r.onupgradeneeded=()=>Ot(r),r.onsuccess=()=>{const s=r.result;if(null==t){const t=s.transaction($t,"readonly"),r=t.objectStore($t).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return s.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(s.close(),n(r.error)),t.oncomplete=()=>s.close()}else{const r=xt(t),a=s.transaction(At,"readwrite");let o=a.objectStore(At);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=s.transaction($t,"readwrite");const i=u.objectStore($t).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=a.objectStore(At);const t=o.delete(this.modelPath);t.onsuccess=()=>(s.close(),n(i.error)),t.onerror=e=>(s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}}},r.onerror=e=>n(r.error)})}}Mt.URL_SCHEME="indexeddb://";const Ft=e=>{return J().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Mt.URL_SCHEME)?(t=e.slice(Mt.URL_SCHEME.length),new Mt(t)):null;var t};Tt.registerSaveRouter(Ft),Tt.registerLoadRouter(Ft);class Ct{constructor(){this.indexedDB=Dt()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(It,1);n.onupgradeneeded=()=>Ot(n),n.onsuccess=()=>{const r=n.result,s=r.transaction(At,"readonly"),a=s.objectStore(At).getAll();a.onsuccess=()=>{const t={};for(const e of a.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},a.onerror=e=>(r.close(),t(a.error)),s.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(Mt.URL_SCHEME)?t.slice(Mt.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open(It,1);r.onupgradeneeded=()=>Ot(r),r.onsuccess=()=>{const s=r.result,a=s.transaction(At,"readwrite"),o=a.objectStore(At),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return s.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),a=()=>{u=s.transaction($t,"readwrite");const r=u.objectStore($t).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=a,r.onerror=e=>(a(),s.close(),n(i.error))}},i.onerror=e=>(s.close(),n(i.error)),a.oncomplete=()=>{null==u?s.close():u.oncomplete=()=>s.close()}},r.onerror=e=>n(r.error)})}}const Rt="/",Lt="tensorflowjs_models",Bt="info",zt="model_topology",Pt="weight_specs",Vt="weight_data",Ut="model_metadata";function Kt(e){return{info:[Lt,e,Bt].join(Rt),topology:[Lt,e,zt].join(Rt),weightSpecs:[Lt,e,Pt].join(Rt),weightData:[Lt,e,Vt].join(Rt),modelMetadata:[Lt,e,Ut].join(Rt)}}function qt(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Wt(e){const t=e.split(Rt);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(Rt)}class Ht{constructor(e){if(!J().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Kt(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=xt(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(dt)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const s={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(s)),{modelArtifactsInfo:r}}catch(e){throw qt(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const s=this.LS.getItem(this.keys.modelMetadata);if(null!=s){const e=JSON.parse(s);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const a=this.LS.getItem(this.keys.weightData);if(null==a)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(dt){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(a),t}}Ht.URL_SCHEME="localstorage://";const jt=e=>{return J().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Ht.URL_SCHEME)?(t=e.slice(Ht.URL_SCHEME.length),new Ht(t)):null;var t};Tt.registerSaveRouter(jt),Tt.registerLoadRouter(jt);class Gt{constructor(){S(J().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),S("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=Lt+Rt,n=Rt+Bt;for(let r=0;r<this.LS.length;++r){const s=this.LS.key(r);s.startsWith(t)&&s.endsWith(n)&&(e[Wt(s)]=JSON.parse(this.LS.getItem(s)))}return e}async removeModel(e){var t;const n=Kt(e=(t=e).startsWith(Ht.URL_SCHEME)?t.slice(Ht.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return qt(n),r}}const Jt="://";class Yt{constructor(){this.managers={}}static getInstance(){return null==Yt.instance&&(Yt.instance=new Yt),Yt.instance}static registerManager(e,t){S(null!=e,()=>"scheme must not be undefined or null."),e.endsWith(Jt)&&(e=e.slice(0,e.indexOf(Jt))),S(e.length>0,()=>"scheme must not be an empty string.");const n=Yt.getInstance();S(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=Yt.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Yt.getInstance().managers)}}function Zt(e){if(-1===e.indexOf(Jt))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Yt.getSchemes().join(",")}`);return{scheme:e.split(Jt)[0],path:e.split(Jt)[1]}}async function Qt(e,t,n=!1){S(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=Tt.getLoadHandlers(e);S(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),S(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);const s=r[0],a=Tt.getSaveHandlers(t);S(a.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),S(a.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const o=a[0],i=Zt(e).scheme,u=Zt(e).path,p=i===Zt(e).scheme,l=await s.load();n&&p&&await Yt.getManager(i).removeModel(u);const c=await o.save(l);return n&&!p&&await Yt.getManager(i).removeModel(u),c.modelArtifactsInfo}async function Xt(){const e=Yt.getSchemes(),t={};for(const n of e){const e=await Yt.getManager(n).listModels();for(const r in e)t[n+Jt+r]=e[r]}return t}async function en(e){const t=Zt(e);return Yt.getManager(t.scheme).removeModel(t.path)}async function tn(e,t){return Qt(e,t,!1)}async function nn(e,t){return Qt(e,t,!0)}class rn{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&J().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))):setTimeout(e,t)}}if(J().get("IS_BROWSER")){J().setPlatform("browser",new rn);try{Yt.registerManager(Ht.URL_SCHEME,new Gt)}catch(e){}try{Yt.registerManager(Mt.URL_SCHEME,new Ct)}catch(e){}}let sn;function an(e,t="float32",n){return t=t||"float32",q(e),new Ae(e,t,n)}J().get("IS_NODE")&&!J().get("IS_BROWSER")&&J().setPlatform("node",new class{constructor(){this.util=n(590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=J().global.fetch?J().global.fetch(e,t):(null==sn&&(sn=n(817)),sn(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const on=st({cast_:function(e,t){const n=tt(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},s={dtype:t};return Je.runKernel(ee,r,s)}}),un=st({clone_:function(e){const t={x:tt(e,"x","clone","string_or_numeric")};return Je.runKernel(ne,t)}});function pn(e,t=!1){console.log(e.toString(t))}function ln(e){return new Promise(e=>setTimeout(e)).then(e)}Ge(),Oe={buffer:an,cast:on,clone:un,print:pn};class cn{constructor(e){if(!J().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(cn.URL_SCHEME)&&(e=e.slice(cn.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=gt(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),s=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(s.download=this.modelJsonFileName,s.href=r,await ln(()=>s.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await ln(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:xt(e)}}}}cn.URL_SCHEME="downloads://";class hn{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),s=r.modelTopology;if(null==s)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:s});const a=wt(r,e=>this.loadWeights(e));e(a)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),s=n.map(e=>this.loadWeightsFile(e,r[e]));return Promise.all(s).then(e=>[t,ft(e)])}loadWeightsFile(e,t){return new Promise((n,r)=>{const s=new FileReader;s.onload=e=>{const t=e.target.result;n(t)},s.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),s.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map(e=>yt(e.name)),r={};for(const s of e)s.paths.forEach(e=>{const s=yt(e);if(-1!==t.indexOf(s))throw new Error(`Duplicate file basename found in weights manifest: '${s}'`);if(t.push(s),-1===n.indexOf(s))throw new Error(`Weight file with basename '${s}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(s)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function dn(e){return new hn(e)}function mn(e,t,n,r){!function(e){S(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){S(e>=0&&e<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`),S(t>=0&&t<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`),S(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`)}(n=null==n?0:n,r=null==r?1:r);let s=0;return Promise.all(e.map(a=>(a.then(a=>{const o=n+ ++s/e.length*(r-n);return t(o),a}),a)))}async function fn(e,t){null==t&&(t={});const n=null==t.fetchFunc?J().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),s=(null==t.onProgress?await Promise.all(r):await mn(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(s):await mn(s,t.onProgress,.5,1)}async function yn(e,t="",n,r){return gn(e=>fn(e,{requestInit:r}))(e,t,n)}function gn(e){return async(t,n="",r)=>{const s=t.map(()=>!1),a={},o=null!=r?r.map(()=>!1):[],i=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,p=ut[u]*$(e.shape),l=()=>{s[t]=!0,null==a[t]&&(a[t]=[]),a[t].push({manifestEntry:e,groupOffset:n,sizeBytes:p})};null!=r?r.forEach((t,n)=>{t===e.name&&(l(),o[n]=!0)}):l(),i.push(e.name),n+=p})}),!o.every(e=>e)){const e=r.filter((e,t)=>!o[t]);throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=s.reduce((e,t,n)=>(t&&e.push(n),e),[]),p=[];u.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;p.push(t)})});const l=await e(p),c={};let h=0;return u.forEach(e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=l[h+e].byteLength;const s=new ArrayBuffer(r),o=new Uint8Array(s);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(l[h+e]);o.set(t,i),i+=t.byteLength}a[e].forEach(e=>{const t=ct(s.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)c[e]=t[e]}),h+=n}),c}}Tt.registerSaveRouter(e=>J().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(cn.URL_SCHEME)?function(e="model"){return new cn(e)}(e.slice(cn.URL_SCHEME.length)):null);class bn{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(S("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=J().platform.fetch,S(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&S(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=gt(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:xt(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return wt(t,e=>this.loadWeights(e))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),s=this.weightPathPrefix||n,a=Nt(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(s+e+r);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[a,ft(await fn(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function wn(e){return null!=e.match(bn.URL_SCHEME_REGEX)}bn.URL_SCHEME_REGEX=/^https?:\/\//;const xn=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>wn(e)):wn(e),n)return Nn(e,t)}return null};function Nn(e,t){return new bn(e,t)}function vn(e,t){return Nn(e,t)}Tt.registerSaveRouter(xn),Tt.registerLoadRouter(xn);class Tn{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class kn{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Sn{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function En(e,t,n,r){return new Sn(_n(...arguments))}function _n(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new Tn(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Tn({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Tn({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function In(e){return new kn(e)}function $n(e){return new kn(e)}const An=st({abs_:function(e){const t=tt(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Je.runKernel("ComplexAbs",e)}{const e={x:t};return Je.runKernel("Abs",e)}}}),Dn=st({acos_:function(e){const t={x:tt(e,"x","acos")};return Je.runKernel("Acos",t)}}),On=st({acosh_:function(e){const t={x:tt(e,"x","acosh")};return Je.runKernel("Acosh",t)}}),Mn=st({add_:function(e,t){let n=tt(e,"a","add"),r=tt(t,"b","add");[n,r]=Ue(n,r);const s={a:n,b:r};return Je.runKernel("Add",s)}}),Fn=st({addN_:function(e){S(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),S(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);const t=e.map((e,t)=>tt(e,`tensors${t}`,"addN")),n=t[0];t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!A(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=t;return Je.runKernel("AddN",r)}}),Cn=st({all_:function(e,t=null,n=!1){const r={x:tt(e,"x","all","bool")},s={axis:t,keepDims:n};return Je.runKernel("All",r,s)}}),Rn=st({any_:function(e,t=null,n=!1){const r={x:tt(e,"x","any","bool")},s={axis:t,keepDims:n};return Je.runKernel("Any",r,s)}}),Ln=st({argMax_:function(e,t=0){const n={x:tt(e,"x","argMax")},r={axis:t};return Je.runKernel("ArgMax",n,r)}}),Bn=st({argMin_:function(e,t=0){const n={x:tt(e,"x","argMin")},r={axis:t};return Je.runKernel("ArgMin",n,r)}}),zn=st({asin_:function(e){const t={x:tt(e,"x","asin")};return Je.runKernel("Asin",t)}}),Pn=st({asinh_:function(e){const t={x:tt(e,"x","asinh")};return Je.runKernel("Asinh",t)}}),Vn=st({atan_:function(e){const t={x:tt(e,"x","atan")};return Je.runKernel("Atan",t)}}),Un=st({atan2_:function(e,t){let n=tt(e,"a","atan2"),r=tt(t,"b","atan2");[n,r]=Ue(n,r);const s={a:n,b:r};return Je.runKernel("Atan2",s)}}),Kn=st({atanh_:function(e){const t={x:tt(e,"x","atanh")};return Je.runKernel("Atanh",t)}});function qn(e,t,n,r,s,a,o=!1,i="channelsLast"){let[u,p,l,c]=[-1,-1,-1,-1];if("channelsLast"===i)[u,p,l,c]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,c,p,l]=e}const[h,d,,m]=t,[f,y]=Wn(n),[g,b]=Wn(r),w=Hn(h,g),x=Hn(d,b),{padInfo:N,outHeight:v,outWidth:T}=function(e,t,n,r,s,a,o,i,u){let p,l,c;if("number"==typeof e){p={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,s){null==r&&(r=function(e,t,n,r=1){const s=Hn(t,r);return Math.floor((e[0]*(n-1)-n+s)/2)}(e,t,n));const a=e[1];return[jn((e[0]-t+2*r)/n+1,s),jn((a-t+2*r)/n+1,s)]}([t,n],a,r,e,i);l=s[0],c=s[1]}else if("same"===e){l=Math.ceil(t/r),c=Math.ceil(n/s);const e=Math.max(0,(l-1)*r+a-t),i=Math.max(0,(c-1)*s+o-n),u=Math.floor(e/2),h=e-u,d=Math.floor(i/2);p={top:u,bottom:h,left:d,right:i-d,type:"SAME"}}else if("valid"===e)p={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((t-a+1)/r),c=Math.ceil((n-o+1)/s);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const h="channelsLast"===u?e[1][0]:e[2][0],d="channelsLast"===u?e[1][1]:e[2][1],m="channelsLast"===u?e[2][0]:e[3][0],f="channelsLast"===u?e[2][1]:e[3][1];p={top:h,bottom:d,left:m,right:f,type:0===h&&0===d&&0===m&&0===f?"VALID":"EXPLICIT"},l=jn((t-a+h+d)/r+1,i),c=jn((n-o+m+f)/s+1,i)}}return{padInfo:p,outHeight:l,outWidth:c}}(s,p,l,f,y,w,x,a,i),k=o?m*c:m;let S;return"channelsFirst"===i?S=[u,k,v,T]:"channelsLast"===i&&(S=[u,v,T,k]),{batchSize:u,dataFormat:i,inHeight:p,inWidth:l,inChannels:c,outHeight:v,outWidth:T,outChannels:k,padInfo:N,strideHeight:f,strideWidth:y,filterHeight:h,filterWidth:d,effectiveFilterHeight:w,effectiveFilterWidth:x,dilationHeight:g,dilationWidth:b,inShape:e,outShape:S,filterShape:t}}function Wn(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function Hn(e,t){return t<=1?e:e+(e-1)*(t-1)}function jn(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function Gn(e){const[t,n,r]=Wn(e);return 1===t&&1===n&&1===r}function Jn(e,t){return Gn(e)||Gn(t)}function Yn(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)S(D(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach(t=>{t.forEach(t=>{S(D(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})})}}}const Zn=st({reshape_:function(e,t){const n={x:tt(e,"x","reshape","string_or_numeric")},r={shape:t};return Je.runKernel("Reshape",n,r)}}),Qn=st({avgPool_:function(e,t,n,r,s){const a=tt(e,"x","avgPool","float32");S(Jn(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let o=a,i=!1;3===a.rank&&(i=!0,o=Zn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===o.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`),Yn("avgPool",r,s);const u={x:o},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s};let l=Je.runKernel("AvgPool",u,p);return l=on(l,a.dtype),i?Zn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Xn=st({avgPool3d_:function(e,t,n,r,s,a="NDHWC"){const o=tt(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=Zn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),S(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),S("NDHWC"===a,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),Yn("avgPool3d",r,s);const p={x:i},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a};let c=Je.runKernel("AvgPool3D",p,l);return c=on(c,i.dtype),u?Zn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),er=st({concat_:function(e,t=0){S(e.length>=1,()=>"Pass at least one tensor to concat");const n=nt(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length)return un(n[0]);const r=n,s={axis:t};return Je.runKernel("Concat",r,s)}}),tr=st({matMul_:function(e,t,n=!1,r=!1){let s=tt(e,"a","matMul"),a=tt(t,"b","matMul");[s,a]=Ue(s,a);const o={a:s,b:a},i={transposeA:n,transposeB:r};return Je.runKernel("BatchMatMul",o,i)}}),nr=st({mul_:function(e,t){let n=tt(e,"a","mul"),r=tt(t,"b","mul");[n,r]=Ue(n,r);const s={a:n,b:r};return Je.runKernel("Multiply",s)}}),rr=st({sigmoid_:function(e){const t={x:tt(e,"x","sigmoid","float32")};return Je.runKernel("Sigmoid",t)}}),sr=st({slice_:function(e,t,n){const r=tt(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const s={x:r},a={begin:t,size:n};return Je.runKernel("Slice",s,a)}}),ar=st({tanh_:function(e){const t={x:tt(e,"x","tanh","float32")};return Je.runKernel("Tanh",t)}}),or=st({basicLSTMCell_:function(e,t,n,r,s,a){const o=tt(e,"forgetBias","basicLSTMCell"),i=tt(t,"lstmKernel","basicLSTMCell"),u=tt(n,"lstmBias","basicLSTMCell"),p=tt(r,"data","basicLSTMCell"),l=tt(s,"c","basicLSTMCell"),c=tt(a,"h","basicLSTMCell"),h=er([p,c],1),d=tr(h,i),m=Mn(d,u),f=m.shape[0],y=m.shape[1]/4,g=[f,y],b=sr(m,[0,0],g),w=sr(m,[0,y],g),x=sr(m,[0,2*y],g),N=sr(m,[0,3*y],g),v=Mn(nr(rr(b),ar(w)),nr(l,rr(Mn(o,x))));return[v,nr(ar(v),rr(N))]}}),ir=st({batchToSpaceND_:function(e,t,n){const r=tt(e,"x","batchToSpaceND"),s=t.reduce((e,t)=>e*t);S(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),S(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),S(r.shape[0]%s===0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${s}`);const a={x:r},o={blockShape:t,crops:n};return Je.runKernel("BatchToSpaceND",a,o)}}),ur=st({batchNorm_:function(e,t,n,r,s,a){null==a&&(a=.001);const o=tt(e,"x","batchNorm"),i=tt(t,"mean","batchNorm"),u=tt(n,"variance","batchNorm");let p,l;null!=s&&(p=tt(s,"scale","batchNorm")),null!=r&&(l=tt(r,"offset","batchNorm")),S(i.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),S(null==l||i.rank===l.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),S(null==p||i.rank===p.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const c={x:function(e){let t;return t=0===e.rank||1===e.rank?Zn(e,[1,1,1,e.size]):2===e.rank?Zn(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?Zn(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:p,offset:l,mean:i,variance:u},h={varianceEpsilon:a},d=Je.runKernel("FusedBatchNorm",c,h);return Zn(d,o.shape)}}),pr=st({batchNorm2d_:function(e,t,n,r,s,a){const o=tt(e,"x","batchNorm"),i=tt(t,"mean","batchNorm"),u=tt(n,"variance","batchNorm");let p,l;return null!=s&&(p=tt(s,"scale","batchNorm")),null!=r&&(l=tt(r,"offset","batchNorm")),S(2===o.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`),S(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),S(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=p&&S(2===p.rank||1===p.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${p.rank}.`),null!=l&&S(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${l.rank}.`),ur(o,i,u,l,p,a)}}),lr=st({batchNorm3d_:function(e,t,n,r,s,a){const o=tt(e,"x","batchNorm"),i=tt(t,"mean","batchNorm"),u=tt(n,"variance","batchNorm");let p,l;return null!=s&&(p=tt(s,"scale","batchNorm")),null!=r&&(l=tt(r,"offset","batchNorm")),S(3===o.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`),S(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),S(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=p&&S(3===p.rank||1===p.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${p.rank}.`),null!=l&&S(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${l.rank}.`),ur(o,i,u,l,p,a)}}),cr=st({batchNorm4d_:function(e,t,n,r,s,a){const o=tt(e,"x","batchNorm"),i=tt(t,"mean","batchNorm"),u=tt(n,"variance","batchNorm");let p,l;return null!=s&&(p=tt(s,"scale","batchNorm")),null!=r&&(l=tt(r,"offset","batchNorm")),S(4===o.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`),S(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),S(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=p&&S(4===p.rank||1===p.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${p.rank}.`),null!=l&&S(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${l.rank}.`),ur(o,i,u,l,p,a)}}),hr=st({bincount_:function(e,t,n){const r=tt(e,"x","bincount"),s=tt(t,"weights","bincount");S("int32"===r.dtype,()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`),S(n>=0,()=>`size must be non-negative, but got ${n}.`),S(s.size===r.size||0===s.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${s.shape}.`);const a={x:r,weights:s},o={size:n};return Je.runKernel("Bincount",a,o)}}),dr=st({broadcastArgs_:function(e,t){const n=tt(e,"s0","broadcastArgs","int32"),r=tt(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const s={s0:n,s1:r};return Je.runKernel("BroadcastArgs",s)}}),mr=st({broadcastTo_:function(e,t){let n=tt(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=Zn(n,e)}const s=n.shape,a=Array.from(t);for(let e=t.length-1;e>=0;e--)if(s[e]===t[e])a[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===a.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return un(n);const o={x:n},i={reps:a};return Je.runKernel(ae,o,i)}}),fr=st({ceil_:function(e){const t={x:tt(e,"x","ceil","float32")};return Je.runKernel("Ceil",t)}});function yr(e,t,n){const r={shape:e,value:t,dtype:n};return Je.runKernel(te,{},r)}const gr=st({clipByValue_:function(e,t,n){const r=tt(e,"x","clipByValue");if(S(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n)return yr(r.shape,t,r.dtype);const s={x:r},a={clipValueMin:t,clipValueMax:n};return Je.runKernel("ClipByValue",s,a)}}),br=st({concat1d_:function(e){return er(e,0)}}),wr=st({concat2d_:function(e,t){return er(e,t)}}),xr=st({concat3d_:function(e,t){return er(e,t)}}),Nr=st({concat4d_:function(e,t){return er(e,t)}}),vr=st({conv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=tt(e,"x","conv2d","float32"),u=tt(t,"filter","conv2d","float32");let p=i,l=!1;3===i.rank&&(l=!0,p=Zn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(4===p.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${p.rank}.`),S(4===u.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`),Yn("conv2d",r,o);const c="NHWC"===s?p.shape[3]:p.shape[1];S(c===u.shape[2],()=>`Error in conv2d: depth of input (${c}) must match input depth for filter ${u.shape[2]}.`),S(Jn(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const h={x:p,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},m=Je.runKernel("Conv2D",h,d);return l?Zn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Tr=st({conv1d_:function(e,t,n,r,s="NWC",a=1,o){const i=tt(e,"x","conv1d"),u=tt(t,"filter","conv1d");let p=i,l=!1;2===i.rank&&(l=!0,p=Zn(i,[1,i.shape[0],i.shape[1]])),S(3===p.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${p.rank}.`),S(3===u.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`),Yn("conv1d",r,o),S(p.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${p.shape[2]}) must match input depth for filter ${u.shape[1]}.`),S(Jn(n,a),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${a}'`),S("NWC"===s,()=>`Error in conv1d: got dataFormat of ${s} but only NWC is currently supported.`);const c=Zn(u,[1,u.shape[0],u.shape[1],u.shape[2]]),h=Zn(p,[p.shape[0],1,p.shape[1],p.shape[2]]),d=vr(h,c,[1,n],r,"NHWC",[1,a],o);return Zn(d,l?[d.shape[2],d.shape[3]]:[d.shape[0],d.shape[2],d.shape[3]])}}),kr=st({conv2DBackpropInput_:function(e,t,n,r,s,a="NHWC",o){S(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let i=e,u=t,p=!1;3===t.rank&&(p=!0,u=Zn(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),S(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),S(4===u.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`),S(4===n.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);const l="NHWC"===a?i[3]:i[1],c="NHWC"===a?u.shape[3]:u.shape[1];S(l===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${l}) must match input depth for filter ${n.shape[2]}.`),S(c===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[3]}.`),Yn("conv2dDerInput",s,o);const h={dy:u,filter:n},d={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,inputShape:i},m=Je.runKernel("Conv2DBackpropInput",h,d);return p?Zn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Sr=st({conv2dTranspose_:function(e,t,n,r,s,a){const o=tt(e,"x","conv2dTranspose"),i=tt(t,"filter","conv2dTranspose");return kr(n,o,i,r,s,"NHWC",a)}}),Er=st({conv3d_:function(e,t,n,r,s="NDHWC",a=[1,1,1]){const o=tt(e,"x","conv3d"),i=tt(t,"filter","conv3d");let u=o,p=!1;4===o.rank&&(p=!0,u=Zn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),S(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),S(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),S(u.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`),S(Jn(n,a),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),S("NDHWC"===s,()=>`Error in conv3d: got dataFormat of ${s} but only NDHWC is currently supported.`);const l={x:u,filter:i},c={strides:n,pad:r,dataFormat:s,dilations:a},h=Je.runKernel("Conv3D",l,c);return p?Zn(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),_r=st({conv3DBackpropInput_:function(e,t,n,r,s){S(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let a=e,o=t,i=!1;4===t.rank&&(i=!0,o=Zn(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),a=[1,e[0],e[1],e[2],e[3]]);const u=a[4],p=o.shape[4];S(5===a.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${a.length}.`),S(5===o.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`),S(5===n.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`),S(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),S(p===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${p}) must match output depth for filter ${n.shape[4]}.`);const l={dy:o,filter:n},c={pad:s,strides:r,inputShape:a},h=Je.runKernel("Conv3DBackpropInputV2",l,c);return i?Zn(h,[h.shape[1],h.shape[2],h.shape[3],h.shape[4]]):h}}),Ir=st({conv3dTranspose_:function(e,t,n,r,s){const a=tt(e,"x","conv3dTranspose"),o=tt(t,"filter","conv3dTranspose");return _r(n,a,o,r,s)}}),$r=st({cos_:function(e){const t={x:tt(e,"x","cos","float32")};return Je.runKernel("Cos",t)}}),Ar=st({cosh_:function(e){const t={x:tt(e,"x","cosh","float32")};return Je.runKernel("Cosh",t)}}),Dr=st({cumprod_:function(e,t=0,n=!1,r=!1){const s={x:tt(e,"x","cumprod")},a={axis:t,exclusive:n,reverse:r};return Je.runKernel("Cumprod",s,a)}}),Or=st({cumsum_:function(e,t=0,n=!1,r=!1){const s={x:tt(e,"x","cumsum")},a={axis:t,exclusive:n,reverse:r};return Je.runKernel("Cumsum",s,a)}}),Mr=st({denseBincount_:function(e,t,n,r=!1){const s=tt(e,"x","denseBincount"),a=tt(t,"weights","denseBincount");S("int32"===s.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${s.dtype}`),S(s.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${s.rank}.`),S(n>=0,()=>`size must be non-negative, but got ${n}.`),S(a.size===s.size||0===a.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${s.shape}, weights shape: ${a.shape}.`);const o={x:s,weights:a},i={size:n,binaryOutput:r};return Je.runKernel("DenseBincount",o,i)}}),Fr=st({depthToSpace_:function(e,t,n="NHWC"){const r=tt(e,"x","depthToSpace","float32"),s="NHWC"===n?r.shape[1]:r.shape[2],a="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];S(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),S(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),S(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t} for depthToSpace with input shape\n        ${r.shape}`),S(o%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`);const i={x:r},u={blockSize:t,dataFormat:n};return Je.runKernel("DepthToSpace",i,u)}}),Cr=st({depthwiseConv2d_:function(e,t,n,r,s="NHWC",a=[1,1],o){const i=tt(e,"x","depthwiseConv2d","float32"),u=tt(t,"filter","depthwiseConv2d","float32");let p=i,l=!1;3===i.rank&&(l=!0,p=Zn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(4===p.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${p.rank}.`),S(4===u.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`);const c="NHWC"===s?p.shape[3]:p.shape[1];S(c===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${c}) must match the inChannels dimension in filter ${u.shape[2]}.`),Yn("depthwiseConv2d",r,o);const h={x:p,filter:u},d={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o},m=Je.runKernel("DepthwiseConv2dNative",h,d);return l?Zn(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),Rr=st({diag_:function(e){const t={x:tt(e,"x","diag")};return Je.runKernel("Diag",t)}}),Lr=st({dilation2d_:function(e,t,n,r,s=[1,1],a="NHWC"){const o=tt(e,"x","dilation2d"),i=tt(t,"filter","dilation2d");S(3===o.rank||4===o.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`),S(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),S("NHWC"===a,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${a}`);let u=o,p=!1;3===o.rank&&(u=Zn(o,[1,o.shape[0],o.shape[1],o.shape[2]]),p=!0);const l={x:u,filter:i},c={strides:n,pad:r,dilations:s},h=Je.runKernel("Dilation2D",l,c);return p?Zn(h,[h.shape[1],h.shape[2],h.shape[3]]):h}}),Br=st({floorDiv_:function(e,t){let n=tt(e,"a","floorDiv"),r=tt(t,"b","floorDiv");[n,r]=Ue(n,r);const s={a:n,b:r};return Je.runKernel("FloorDiv",s)}}),zr=st({div_:function(e,t){let n=tt(e,"a","div"),r=tt(t,"b","div");if([n,r]=Ue(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Br(n,r);const s={a:n,b:r};return Je.runKernel("RealDiv",s,{})}});function Pr(e,t){const n=[],r=Math.max(e.length,t.length);for(let s=0;s<r;s++){let r=e[e.length-s-1];null==r&&(r=1);let a=t[t.length-s-1];if(null==a&&(a=1),1===r)n.unshift(a);else if(1===a)n.unshift(r);else{if(r!==a)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}const Vr=st({equal_:function(e,t){let n=tt(e,"a","equal","string_or_numeric"),r=tt(t,"b","equal","string_or_numeric");[n,r]=Ue(n,r),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("Equal",s)}}),Ur=st({where_:function(e,t,n){const r=tt(t,"a","where"),s=tt(n,"b","where"),a=tt(e,"condition","where","bool"),o=Pr(Pr(a.shape,r.shape),s.shape),i={condition:mr(a,o),t:mr(r,o),e:mr(s,o)};return Je.runKernel("Select",i)}}),Kr=st({zerosLike_:function(e){const t={x:tt(e,"x","zerosLike")};return Je.runKernel("ZerosLike",t)}}),qr=st({divNoNan_:function(e,t){let n=tt(e,"a","div"),r=tt(t,"b","div");[n,r]=Ue(n,r);const s=zr(n,r),a=Kr(s),o=Vr(r,a);return Ur(o,a,s)}}),Wr=st({dot_:function(e,t){const n=tt(e,"t1","dot"),r=tt(t,"t2","dot");S(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const s=1===n.rank?n.size:n.shape[1],a=1===r.rank?r.size:r.shape[0];if(S(s===a,()=>`Error in dot: inner dimensions of inputs must match, but got ${s} and ${a}.`),1===n.rank&&1===r.rank){const e=Zn(n,[1,-1]),t=Zn(r,[-1,1]),s=tr(e,t);return Zn(s,[])}if(1===n.rank&&2===r.rank){const e=Zn(n,[1,-1]),t=Zn(r,[r.shape[0],r.shape[1]]),s=tr(e,t);return Zn(s,[s.size])}if(2===n.rank&&1===r.rank){const e=Zn(r,[-1,1]),t=tr(n,e);return Zn(t,[t.size])}{const e=Zn(r,[r.shape[0],r.shape[1]]);return tr(n,e)}}}),Hr=st({einsum_:function(e,...t){const n=t.map((e,t)=>tt(e,`tensors${t}`,"einsum")),r={equation:e};return Je.runKernel("Einsum",n,r)}}),jr=st({elu_:function(e){const t={x:tt(e,"x","elu","float32")};return Je.runKernel("Elu",t)}}),Gr=st({erf_:function(e){let t=tt(e,"x","erf");S("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=on(t,"float32"));const n={x:t};return Je.runKernel("Erf",n)}});function Jr(e,t){return function(e,t,n){const r=e.length+t.length,s=[];let a=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?s.push(e[a++]):s.push(t[o++]);return s}(e,t.map(e=>1),t)}const Yr=st({max_:function(e,t=null,n=!1){const r={x:tt(e,"x","max")},s={reductionIndices:t,keepDims:n};return Je.runKernel("Max",r,s)}}),Zr=st({min_:function(e,t=null,n=!1){const r={x:tt(e,"x","min")},s={axis:t,keepDims:n};return Je.runKernel("Min",r,s)}}),Qr=st({pow_:function(e,t){let n=tt(e,"base","pow"),r=tt(t,"exp","pow");[n,r]=Ue(n,r);const s={a:n,b:r};return Je.runKernel("Pow",s)}});function Xr(e,t){if((F(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&F(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ot(e,[],[],t)}const es=st({sqrt_:function(e){const t={x:tt(e,"x","sqrt","float32")};return Je.runKernel("Sqrt",t)}}),ts=st({square_:function(e){const t=tt(e,"x","square");return Je.runKernel("Square",{x:t},{})}}),ns=st({sum_:function(e,t=null,n=!1){let r=tt(e,"x","sum");"bool"===r.dtype&&(r=on(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Je.runKernel("Sum",s,a)}});function rs(e,t,n=null){if(0===e.rank)return An(e);if(1!==e.rank&&null===n)return rs(Zn(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return ns(An(e),n);if(t===1/0)return Yr(An(e),n);if(t===-1/0)return Zr(An(e),n);if("euclidean"===t||2===t)return es(ns(Qr(An(e),Xr(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Yr(ns(An(e),n[0]),n[1]-1);if(t===1/0)return Yr(ns(An(e),n[1]),n[0]);if(t===-1/0)return Zr(ns(An(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return es(ns(ts(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const ss=st({norm_:function(e,t="euclidean",n=null,r=!1){const s=rs(e=tt(e,"x","norm"),t,n);let a=s.shape;if(r){const t=M(n,e.shape);a=Jr(s.shape,t)}return Zn(s,a)}}),as=st({euclideanNorm_:function(e,t=null,n=!1){return ss(e,"euclidean",t,n)}}),os=st({exp_:function(e){const t={x:tt(e,"x","exp")};return Je.runKernel("Exp",t)}}),is=st({expandDims_:function(e,t=0){const n=tt(e,"x","expandDims","string_or_numeric");S(t<=n.rank,()=>"Axis must be <= rank of the tensor");const r={input:n},s={dim:t};return Je.runKernel("ExpandDims",r,s)}}),us=st({expm1_:function(e){const t={x:tt(e,"x","expm1")};return Je.runKernel("Expm1",t)}}),ps=st({tile_:function(e,t){const n=tt(e,"x","tile","string_or_numeric");S(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);const r={x:n},s={reps:t};return Je.runKernel(ae,r,s)}}),ls=st({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const s=an([e,t],r),a=e<=t?e:t;for(let e=0;e<a;++e)s.set(1,e,e);const o=Zn(s.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return ps(is(o,0),[n[0],1,1]);if(2===n.length)return ps(is(is(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return ps(is(is(is(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),cs=st({floor_:function(e){const t={x:tt(e,"x","floor","float32")};return Je.runKernel("Floor",t)}}),hs=st({gather_:function(e,t,n=0,r=0){const s={x:tt(e,"x","gather"),indices:tt(t,"indices","gather","int32")},a={axis:n,batchDims:r};return Je.runKernel("GatherV2",s,a)}}),ds=st({greater_:function(e,t){let n=tt(e,"a","greater","string_or_numeric"),r=tt(t,"b","greater","string_or_numeric");[n,r]=Ue(n,r),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("Greater",s)}}),ms=st({greaterEqual_:function(e,t){let n=tt(e,"a","greaterEqual","string_or_numeric"),r=tt(t,"b","greaterEqual","string_or_numeric");[n,r]=Ue(n,r),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("GreaterEqual",s)}}),fs=st({imag_:function(e){const t={input:tt(e,"input","imag")};return Je.runKernel("Imag",t)}}),ys=st({isFinite_:function(e){const t={x:tt(e,"x","isFinite")};return Je.runKernel("IsFinite",t)}}),gs=st({isInf_:function(e){const t={x:tt(e,"x","isInf")};return Je.runKernel("IsInf",t)}}),bs=st({isNaN_:function(e){const t={x:tt(e,"x","isNaN")};return Je.runKernel("IsNan",t)}}),ws=st({leakyRelu_:function(e,t=.2){const n={x:tt(e,"x","leakyRelu")},r={alpha:t};return Je.runKernel("LeakyRelu",n,r)}}),xs=st({less_:function(e,t){let n=tt(e,"a","less","string_or_numeric"),r=tt(t,"b","less","string_or_numeric");[n,r]=Ue(n,r),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("Less",s)}}),Ns=st({lessEqual_:function(e,t){let n=tt(e,"a","lessEqual","string_or_numeric"),r=tt(t,"b","lessEqual","string_or_numeric");[n,r]=Ue(n,r),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("LessEqual",s)}});function vs(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return Je.runKernel(re,{},r)}const Ts=st({localResponseNormalization_:function(e,t=5,n=1,r=1,s=.5){const a=tt(e,"x","localResponseNormalization");S(4===a.rank||3===a.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${a.rank}.`),S(D(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let o=a,i=!1;3===a.rank&&(i=!0,o=Zn(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const u={x:o},p={depthRadius:t,bias:n,alpha:r,beta:s},l=Je.runKernel("LRN",u,p);return i?Zn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),ks=st({log_:function(e){const t={x:tt(e,"x","log","float32")};return Je.runKernel("Log",t)}}),Ss=st({log1p_:function(e){const t={x:tt(e,"x","log1p")};return Je.runKernel("Log1p",t)}});function Es(e){return Je.customGrad(e)}const _s=st({neg_:function(e){const t={x:tt(e,"x","neg")};return Je.runKernel("Neg",t)}}),Is=st({softplus_:function(e){const t={x:tt(e,"x","softplus")};return Je.runKernel("Softplus",t)}}),$s=st({logSigmoid_:function(e){const t=tt(e,"x","logSigmoid");return Es(e=>({value:_s(Is(_s(e))),gradFunc:t=>nr(t,rr(_s(e)))}))(t)}}),As=st({sub_:function(e,t){let n=tt(e,"a","sub"),r=tt(t,"b","sub");[n,r]=Ue(n,r);const s={a:n,b:r};return Je.runKernel("Sub",s)}}),Ds=st({logSoftmax_:function(e,t=-1){const n=tt(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Es((e,n)=>{const r=Yr(e,t,!0),s=As(e,r),a=As(on(s,"float32"),ks(ns(os(s),t,!0)));return n([a]),{value:a,gradFunc:(e,n)=>{const[r]=n,s=os(r);return As(e,nr(ns(e,t,!0),s))}}});return r(n)}}),Os=st({logSumExp_:function(e,t=null,n=!1){const r=tt(e,"x","logSumExp"),s=M(t,r.shape),a=Yr(r,s,!0),o=As(r,a),i=os(o),u=ns(i,s),p=ks(u),l=Mn(Zn(a,p.shape),p);if(n){const e=Jr(l.shape,s);return Zn(l,e)}return l}}),Ms=st({logicalAnd_:function(e,t){const n=tt(e,"a","logicalAnd","bool"),r=tt(t,"b","logicalAnd","bool");Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("LogicalAnd",s)}}),Fs=st({logicalNot_:function(e){const t={x:tt(e,"x","logicalNot","bool")};return Je.runKernel("LogicalNot",t)}}),Cs=st({logicalOr_:function(e,t){const n=tt(e,"a","logicalOr","bool"),r=tt(t,"b","logicalOr","bool");Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("LogicalOr",s)}}),Rs=st({logicalXor_:function(e,t){const n=tt(e,"a","logicalXor","bool"),r=tt(t,"b","logicalXor","bool");return Pr(n.shape,r.shape),Ms(Cs(e,t),Fs(Ms(e,t)))}}),Ls=2147483648,Bs=st({searchSorted_:function(e,t,n="left"){const r=tt(e,"sortedSequence","searchSorted"),s=tt(t,"values","searchSorted"),a=r.shape[r.shape.length-1],o=s.shape[s.shape.length-1],i=Zn(r,[-1,a]),u=Zn(s,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if($(u.shape)>=Ls)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=Ls)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const p={sortedSequence:i,values:u},l={side:n};return Je.runKernel("SearchSorted",p,l)}});function zs(e,t){return Bs(e,t,"left")}const Ps=st({maxPool_:function(e,t,n,r,s){const a=tt(e,"x","maxPool");let o=a,i=!1;3===a.rank&&(i=!0,o=Zn(a,[1,a.shape[0],a.shape[1],a.shape[2]])),S(4===o.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`),S(Jn(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),Yn("maxPool",r,s);const u={x:o},p={filterSize:t,strides:n,pad:r,dimRoundingMode:s},l=Je.runKernel("MaxPool",u,p);return i?Zn(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Vs=st({maxPool3d_:function(e,t=[1,1,1],n,r,s,a="NDHWC"){const o=tt(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=Zn(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),S(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),S("NDHWC"===a,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${a}`),Yn("maxPool3d",r,s);const p={x:i},l={filterSize:t,strides:n,pad:r,dimRoundingMode:s,dataFormat:a},c=Je.runKernel("MaxPool3D",p,l);return u?Zn(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),Us=st({maxPoolWithArgmax_:function(e,t,n,r,s=!1){const a={x:tt(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:s},i=Je.runKernel("MaxPoolWithArgmax",a,o);return{result:i[0],indexes:i[1]}}}),Ks=st({maximum_:function(e,t){let n=tt(e,"a","maximum"),r=tt(t,"b","maximum");[n,r]=Ue(n,r),"bool"===n.dtype&&(n=on(n,"int32"),r=on(r,"int32")),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("Maximum",s)}}),qs=st({mean_:function(e,t=null,n=!1){const r={x:tt(e,"x","mean")},s={axis:t,keepDims:n};return Je.runKernel("Mean",r,s)}});function Ws(e,t="float32"){if("complex64"===t){const t=Ws(e,"float32"),n=Ws(e,"float32");return at(t,n)}const n=K($(e),t);return Je.makeTensor(n,e,t)}function Hs(e,t="float32"){if("complex64"===t){const t=Hs(e,"float32"),n=Ws(e,"float32");return at(t,n)}const n=U($(e),t);return Je.makeTensor(n,e,t)}function js(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=tt(e,"x","meshgrid",e instanceof Fe?e.dtype:"float32");if(void 0===t)return[r];let s=tt(t,"y","meshgrid",t instanceof Fe?t.dtype:"float32");const a=$(r.shape),o=$(s.shape);return"xy"===n?(r=Zn(r,[1,-1]),s=Zn(s,[-1,1]),[tr(Hs([o,1],r.dtype),r),tr(s,Hs([1,a],s.dtype))]):(r=Zn(r,[-1,1]),s=Zn(s,[1,-1]),[tr(r,Hs([1,o],r.dtype)),tr(Hs([a,1],s.dtype),s)])}const Gs=st({minimum_:function(e,t){let n=tt(e,"a","minimum"),r=tt(t,"b","minimum");[n,r]=Ue(n,r),"bool"===n.dtype&&(n=on(n,"int32"),r=on(r,"int32")),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("Minimum",s)}}),Js=st({mirrorPad_:function(e,t,n){S("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const r=tt(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");S(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);const s="reflect"===n?1:0;for(let e=0;e<r.rank;e++)S(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),S(t[e][0]>=0&&t[e][0]<=r.shape[e]-s&&t[e][1]>=0&&t[e][1]<=r.shape[e]-s,()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-s} or less than 0 for input of shape ${r.shape}`);const a={paddings:t,mode:n},o={x:r};return Je.runKernel("MirrorPad",o,a)}}),Ys=st({mod_:function(e,t){let n=tt(e,"a","mod"),r=tt(t,"b","mod");[n,r]=Ue(n,r);const s={a:n,b:r};return Je.runKernel("Mod",s)}}),Zs=st({moments_:function(e,t=null,n=!1){const r=M(t,(e=tt(e,"x","moments")).shape),s=qs(e,r,n);let a=s.shape;n||(a=Jr(s.shape,r));const o=ts(As(on(e,"float32"),Zn(s,a)));return{mean:s,variance:qs(o,r,n)}}}),Qs=st({multiRNNCell_:function(e,t,n,r){const s=tt(t,"data","multiRNNCell"),a=nt(n,"c","multiRNNCell"),o=nt(r,"h","multiRNNCell");let i=s;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,a[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const p=[],l=[];for(let e=0;e<u.length;e+=2)p.push(u[e]),l.push(u[e+1]);return[p,l]}}),Xs=st({multinomial_:function(e,t,n,r=!1){const s=tt(e,"logits","multinomial"),a=s.size,o=s.rank;if(a<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${a}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?Zn(s,[1,-1]):s},u={numSamples:t,seed:n,normalized:r},p=Je.runKernel("Multinomial",i,u);return 1===o?Zn(p,[p.size]):p}}),ea=st({notEqual_:function(e,t){let n=tt(e,"a","notEqual","string_or_numeric"),r=tt(t,"b","notEqual","string_or_numeric");[n,r]=Ue(n,r),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("NotEqual",s)}}),ta=st({oneHot_:function(e,t,n=1,r=0,s="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const a={indices:tt(e,"indices","oneHot","int32")},o={dtype:s,depth:t,onValue:n,offValue:r};return Je.runKernel("OneHot",a,o)}}),na=st({onesLike_:function(e){const t={x:tt(e,"x","onesLike")};return Je.runKernel("OnesLike",t)}}),ra=st({outerProduct_:function(e,t){const n=tt(e,"v1","outerProduct"),r=tt(t,"v2","outerProduct");S(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const s=Zn(n,[-1,1]),a=Zn(r,[1,-1]);return tr(s,a)}}),sa=st({pad_:function(e,t,n=0){const r=tt(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const s={paddings:t,constantValue:n},a={x:r};return Je.runKernel("PadV2",a,s)}}),aa=st({pad1d_:function(e,t,n=0){return S(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),sa(e,[t],n)}}),oa=st({pad2d_:function(e,t,n=0){return S(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),sa(e,t,n)}}),ia=st({pad3d_:function(e,t,n=0){return S(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),sa(e,t,n)}}),ua=st({pad4d_:function(e,t,n=0){return S(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),sa(e,t,n)}}),pa=st({spaceToBatchND_:function(e,t,n){const r=tt(e,"x","spaceToBatchND");S(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),S(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),S(r.shape.reduce((e,r,s)=>s>0&&s<=t.length?e&&(r+n[s-1][0]+n[s-1][1])%t[s-1]===0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);const s={x:r},a={blockShape:t,paddings:n};return Je.runKernel("SpaceToBatchND",s,a)}}),la=st({pool_:function(e,t,n,r,s,a,o){null==s&&(s=[1,1]),null==a&&(a=1),0===r&&(r="valid");const i=tt(e,"x","maxPool");let u=i,p=!1;3===i.rank&&(p=!0,u=Zn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),S(Jn(a,s),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${a} and dilations '${s}'`);const l=function(e,t,n,r,s,a,o="channelsLast"){const[i,u]=Wn(t);let p;if("channelsLast"===o)p=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);p=[i,u,e[1],e[1]]}return qn(e,p,n,r,s,a,!1,o)}(u.shape,t,a,s,r),c=[l.dilationHeight,l.dilationWidth];let h;h="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),s=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],s[t]])}([l.filterHeight,l.filterWidth],c):[[0,0],[0,0]];const d=1===c[0]&&1===c[1],[m,f]=function(e,t,n){const r=n.map(e=>e[0]),s=n.map(e=>e[1]),a=e.concat(r,s),o=t.map((e,t)=>(e-a[t]%e)%e),i=s.map((e,t)=>e+o[t]);return[t.map((e,t)=>[r[t],i[t]]),t.map((e,t)=>[0,o[t]])]}([l.inHeight,l.inWidth],c,h),y=d?r:"valid",g=d?u:pa(u,c,m),b=("avg"===n?()=>Qn(g,t,a,y,o):()=>Ps(g,t,a,y,o))(),w=d?b:ir(b,c,f);return p?Zn(w,[w.shape[1],w.shape[2],w.shape[3]]):w}}),ca=st({prelu_:function(e,t){const n={x:tt(e,"x","prelu"),alpha:tt(t,"alpha","prelu")};return Je.runKernel("Prelu",n)}}),ha=st({prod_:function(e,t=null,n=!1){let r=tt(e,"x","prod");"bool"===r.dtype&&(r=on(r,"int32"));const s={x:r},a={axis:t,keepDims:n};return Je.runKernel("Prod",s,a)}}),da=st({raggedGather_:function(e,t,n,r){const s={paramsNestedSplits:e.map((e,t)=>tt(e,`tensors${t}`,"raggedGather","int32")),paramsDenseValues:tt(t,"paramsDenseValues","raggedGather"),indices:tt(n,"indices","raggedGather","int32")},a={outputRaggedRank:r},o=Je.runKernel("RaggedGather",s,a);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),ma=st({raggedTensorToTensor_:function(e,t,n,r,s){const a=tt(e,"shape","raggedTensorToTensor","int32"),o=tt(t,"values","raggedTensorToTensor"),i={shape:a,values:o,defaultValue:tt(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map((e,t)=>tt(e,`tensors${t}`,"raggedTensorToTensor","int32"))},u={rowPartitionTypes:s};return Je.runKernel("RaggedTensorToTensor",i,u)}}),fa=st({rand_:function(e,t,n){const r=$(e);let s=null;if(null==n||"float32"===n)s=new Float32Array(r);else if("int32"===n)s=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);s=new Uint8Array(r)}for(let e=0;e<r;e++)s[e]=t();return Je.makeTensor(s,e,n)}});var ya=n(391);class ga{constructor(e,t,n,r,s){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const a=s||Math.random();this.random=ya.alea(a.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,s,a;do{r=2*this.random()-1,s=2*this.random()-1,a=r*r+s*s}while(a>=1||0===a);const o=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*s*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class ba{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const s=r||Math.random();this.randu=ya.alea(s.toString()),this.randn=new ga(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,s,a;for(;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-a+Math.log(a)),s=this.randu(),s<t||Math.log(s)<n)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class wa{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=ya.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const xa=st({randomGamma_:function(e,t,n=1,r="float32",s){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const a=new ba(t,n,r,s),o=an(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),Na=st({randomNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const a=new ga(t,n,r,!1,s),o=an(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),va=st({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Na(e,0,1,t,n)}}),Ta=st({randomUniform_:function(e,t=0,n=1,r="float32",s){const a=an(e,r),o=new wa(t,n,null,s);for(let e=0;e<a.values.length;e++)a.values[e]=o.nextValue();return a.toTensor()}});function ka(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const s={start:e,stop:t,step:n,dtype:r};return Je.runKernel(se,{},s)}const Sa=st({real_:function(e){const t={input:tt(e,"input","real")};return Je.runKernel("Real",t)}}),Ea=st({reciprocal_:function(e){const t={x:tt(e,"x","reciprocal")};return Je.runKernel("Reciprocal",t)}}),_a=st({relu_:function(e){const t={x:tt(e,"x","relu")};return Je.runKernel("Relu",t)}}),Ia=st({relu6_:function(e){const t={x:tt(e,"x","relu6")};return Je.runKernel("Relu6",t)}}),$a=st({reverse_:function(e,t){const n={x:tt(e,"x","reverse")},r={dims:t};return Je.runKernel("Reverse",n,r)}}),Aa=st({reverse1d_:function(e){const t=tt(e,"x","reverse");return S(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),$a(t,0)}}),Da=st({reverse2d_:function(e,t){const n=tt(e,"x","reverse");return S(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),$a(n,t)}}),Oa=st({reverse3d_:function(e,t){const n=tt(e,"x","reverse");return S(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),$a(n,t)}}),Ma=st({reverse4d_:function(e,t){const n=tt(e,"x","reverse");return S(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),$a(n,t)}}),Fa=st({round_:function(e){const t={x:tt(e,"x","round")};return Je.runKernel("Round",t)}}),Ca=st({rsqrt_:function(e){const t={x:tt(e,"x","rsqrt","float32")};return Je.runKernel("Rsqrt",t)}}),Ra=st({selu_:function(e){const t={x:tt(e,"x","selu")};return Je.runKernel("Selu",t)}}),La=st({separableConv2d_:function(e,t,n,r,s,a=[1,1],o="NHWC"){const i=tt(e,"x","separableConv2d"),u=tt(t,"depthwiseFilter","separableConv2d"),p=tt(n,"pointwiseFilter","separableConv2d");let l=i,c=!1;if(3===i.rank&&(c=!0,l=Zn(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");S(4===l.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${l.rank}.`),S(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),S(4===p.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),S(1===p.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${p.shape[0]}.`),S(1===p.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${p.shape[1]}.`);const h=u.shape[2],d=u.shape[3];S(p.shape[2]===h*d,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${h*d}, but got ${p.shape[2]}.`);const m=Cr(l,u,r,s,o,a),f=vr(m,p,1,"valid",o);return c?Zn(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Ba=async function(e,t){const n=tt(e,"x","setdiff1d"),r=tt(t,"y","setdiff1d");S(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),S(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),S(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const s=await n.data(),a=await r.data(),o=new Set(a);let i=0;for(let e=0;e<s.length;e++)o.has(s[e])||i++;const u=new Ae([i],n.dtype),p=new Ae([i],"int32");for(let e=0,t=0;e<s.length;e++)o.has(s[e])||(u.values[t]=s[e],p.values[t]=e,t++);return[u.toTensor(),p.toTensor()]},za=st({sign_:function(e){const t={x:tt(e,"x","sign")};return Je.runKernel("Sign",t)}}),Pa=st({sin_:function(e){const t={x:tt(e,"x","sin","float32")};return Je.runKernel("Sin",t)}}),Va=st({sinh_:function(e){const t={x:tt(e,"x","sinh")};return Je.runKernel("Sinh",t)}}),Ua=st({slice1d_:function(e,t,n){const r=tt(e,"x","slice1d");return S(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),sr(r,[t],[n])}}),Ka=st({slice2d_:function(e,t,n){const r=tt(e,"x","slice2d");return S(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),sr(r,t,n)}}),qa=st({slice3d_:function(e,t,n){const r=tt(e,"x","slice3d");return S(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),sr(r,t,n)}}),Wa=st({slice4d_:function(e,t,n){const r=tt(e,"x","slice4d");return S(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),sr(r,t,n)}}),Ha=st({softmax_:function(e,t=-1){const n=tt(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},s={dim:t};return Je.runKernel("Softmax",r,s)}}),ja=st({fft_:function(e){S("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Je.runKernel("FFT",t)}}),Ga=st({ifft_:function(e){S("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Je.runKernel("IFFT",t)}}),Ja=st({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const s=Zn(e,[n,t]);r=Ga(s)}else{const s=[n,2*(t-1)],a=Zn(Sa(e),[n,t]),o=Zn(fs(e),[n,t]),i=$a(sr(a,[0,1],[n,t-2]),1),u=nr($a(sr(o,[0,1],[n,t-2]),1),Xr(-1)),p=er([a,i],1),l=er([o,u],1),c=Zn(at(p,l),[s[0],s[1]]);r=Ga(c)}if(r=Sa(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=Zn(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),Ya=st({split_:function(e,t,n=0){const r={x:tt(e,"x","split")},s={numOrSizeSplits:t,axis:n};return Je.runKernel("SplitV",r,s)}}),Za=st({rfft_:function(e,t){S("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1];const r=e.size/n;let s;if(null!=t&&t<n){const r=e.shape.map(e=>0),a=e.shape.map(e=>e);a[e.shape.length-1]=t,s=sr(e,r,a),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,s=er([e,Ws(r)],e.shape.length-1),n=t}else s=e;const a=Kr(s),o=Zn(at(s,a),[r,n]),i=ja(o),u=Math.floor(n/2)+1,p=Sa(i),l=fs(i),c=Ya(p,[u,n-u],p.shape.length-1),h=Ya(l,[u,n-u],l.shape.length-1),d=s.shape.slice();return d[s.shape.length-1]=u,Zn(at(c[0],h[0]),d)}}),Qa=st({squaredDifference_:function(e,t){let n=tt(e,"a","squaredDifference"),r=tt(t,"b","squaredDifference");[n,r]=Ue(n,r),Pr(n.shape,r.shape);const s={a:n,b:r};return Je.runKernel("SquaredDifference",s,{})}}),Xa=st({squeeze_:function(e,t){const n=tt(e,"x","squeeze","string_or_numeric");return Zn(n,function(e,t){const n=[],r=[],s=null!=t&&Array.isArray(t)&&0===t.length,a=null==t||s?null:M(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=a){if(a[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==a[o]||a[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),a[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}(n.shape,t).newShape)}}),eo=st({stack_:function(e,t=0){const n=nt(e,"tensors","stack","string_or_numeric");S(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&S(t<=n[0].rank,()=>"Axis must be <= rank of the tensor");const r=n,s={axis:t};return Je.runKernel("Pack",r,s)}}),to=st({step_:function(e,t=0){const n={x:tt(e,"x","step")},r={alpha:t};return Je.runKernel("Step",n,r)}}),no=st({stridedSlice_:function(e,t,n,r,s=0,a=0,o=0,i=0,u=0){const p={x:tt(e,"x","stridedSlice","string_or_numeric")},l={begin:t,end:n,strides:r,beginMask:s,endMask:a,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return Je.runKernel("StridedSlice",p,l)}}),ro=st({tan_:function(e){const t={x:tt(e,"x","tan","float32")};return Je.runKernel("Tan",t)}});function so(e,t){_(e);const n=Qe(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ot(e,null,n,t)}function ao(e,t,n){if(_(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Qe(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ot(e,t,r,n)}function oo(e,t,n){if(_(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Qe(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ot(e,t,r,n)}function io(e,t,n){if(_(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Qe(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ot(e,t,r,n)}function uo(e,t,n){if(_(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Qe(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ot(e,t,r,n)}function po(e,t,n){if(_(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Qe(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ot(e,t=t||r,r,n)}const lo=st({topk_:function(e,t=1,n=!0){const r=tt(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const s=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>s)throw new Error(`'k' passed to topk() must be <= the last dimension (${s}) but got ${t}`);const a={x:r},o={k:t,sorted:n},[i,u]=Je.runKernel("TopK",a,o);return{values:i,indices:u}}}),co=st({truncatedNormal_:function(e,t=0,n=1,r,s){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const a=new ga(t,n,r,!0,s),o=an(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=a.nextValue();return o.toTensor()}}),ho=st({unique_:function(e,t=0){const n=tt(e,"x","unique","string_or_numeric");S(n.rank>0,()=>"The input tensor must be at least 1D");const r={x:n},s={axis:t},[a,o]=Je.runKernel("Unique",r,s);return{values:a,indices:o}}}),mo=st({unsortedSegmentSum_:function(e,t,n){const r=tt(e,"x","unsortedSegmentSum"),s=tt(t,"segmentIds","unsortedSegmentSum","int32");S(D(n),()=>"numSegments must be of dtype int");const a={x:r,segmentIds:s},o={numSegments:n};return Je.runKernel("UnsortedSegmentSum",a,o)}}),fo=st({unstack_:function(e,t=0){const n=tt(e,"x","unstack","string_or_numeric");S(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`);const r={value:n},s={axis:t};return Je.runKernel("Unpack",r,s)}});function yo(e,t){return Bs(e,t,"right")}function go(e,t=!0,n,r){return Je.makeVariable(e,t,n,r)}const bo=async function(e){const t=tt(e,"condition","whereAsync","bool"),n=await t.data(),r=function(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=an(e,"int32"),s=an([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const a=r.indexToLoc(n[t]),o=t*e.length;s.values.set(a,o)}return s.toTensor()}(t.shape,n);return e!==t&&t.dispose(),r},wo=async function(e,t,n){const r=tt(e,"tensor","boolMask"),s=tt(t,"mask","boolMask","bool"),a=null==n?0:n,o=s.rank,i=r.shape;S(o>0,()=>"mask cannot be scalar"),E(i.slice(a,a+o),s.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=a;e<a+o;e++)u*=i[e];const p=i.slice(0,a).concat([u],i.slice(a+o)),l=Zn(r,p),c=Zn(s,[-1]),h=await bo(c),d=Xa(h,[1]),m=hs(l,d,a);return e!==r&&r.dispose(),t!==s&&s.dispose(),d.dispose(),l.dispose(),c.dispose(),h.dispose(),m};function xo(e,t){return Je.tidy(e,t)}function No(e){Ke(e).forEach(e=>e.dispose())}function vo(e){return Je.keep(e)}Me=function(e){J().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const To=st({transpose_:function(e,t,n){const r=tt(e,"x","transpose");if(null==t&&(t=r.shape.map((e,t)=>t).reverse()),S(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`),t.forEach(e=>{S(e>=0&&e<r.rank,()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`)}),r.rank<=1)return r.clone();const s={x:r},a={perm:t};return"complex64"===r.dtype?xo(()=>{let e=Sa(r),t=fs(r);return e=Je.runKernel(oe,{x:e},a),t=Je.runKernel(oe,{x:t},a),n&&(t=_s(t)),at(e,t)}):Je.runKernel(oe,s,a)}}),ko=st({movingAverage_:function(e,t,n,r,s=!0){const a=tt(e,"v","movingAverage"),o=tt(t,"x","movingAverage"),i=tt(n,"decay","movingAverage");var u,p;p=o,S((u=a).dtype===p.dtype,()=>`The dtypes of the first(${u.dtype}) and second(${p.dtype}) input must match`),S(A(a.shape,o.shape),()=>"Shape mismatch in v and x");const l=Xr(1),c=As(l,i);let h=nr(As(o,a),c);if(s){S(null!=r,()=>"When using zeroDebias: true, step is required.");const e=tt(r,"step","movingAverage");h=zr(h,As(l,Qr(i,e)))}return Mn(a,h)}});const So=st({scatterND_:function(e,t,n){const r=tt(e,"indices","scatterND","int32"),s=tt(t,"updates","scatterND");!function(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,s=t.rank>1?t.rank-1:1,a=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${s}.`;if(n.rank<s)throw new Error(a+` update.rank < ${s}. `);if(e.length<r+(n.rank-s))throw new Error(a+` Output shape length < ${r+(n.rank-s)}`);if(n.rank!==s+e.length-r)throw new Error(a+" update.rank != "+(s+e.length-r));for(let e=0;e<s;++e)if(n.shape[e]!==t.shape[e])throw new Error(a+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-s;++t)if(n.shape[t+s]!==e[t+r])throw new Error(a+` updates.shape[${t+s}] (${n.shape[t+s]}) != shape[${t+s}] (${e[t+s]})`)}(n,t,e)}(s,r,n);const a={indices:r,updates:s},o={shape:n};return Je.runKernel("ScatterNd",a,o)}}),Eo=st({sparseToDense_:function(e,t,n,r=0){const s=tt(e,"sparseIndices","sparseToDense","int32"),a=tt(t,"sparseValues","sparseToDense","string_or_numeric"),o=tt(r,"defaultValue","sparseToDense",a.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const s=e.rank>0?e.shape[0]:1,a=e.rank>1?e.shape[1]:1;if(n.length!==a)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${a}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==s))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${s}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(s,a,n,o);const i={sparseIndices:s,sparseValues:a,defaultValue:o},u={outputShape:n};return Je.runKernel("SparseToDense",i,u)}}),_o=st({gatherND_:function(e,t){const n=tt(t,"indices","gatherND","int32"),r={params:tt(e,"x","gatherND","string_or_numeric"),indices:n};return Je.runKernel("GatherNd",r)}}),Io=st({dropout_:function(e,t,n,r){const s=tt(e,"x","dropout");if(S("float32"===s.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${s.dtype} tensor instead.`),S(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof Fe?s.clone():s;const a=function(e,t){if(null==t)return e.shape.slice();if(A(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(s,n),o=1-t,i=zr(cs(Mn(Ta(a,0,1,"float32",r),o)),o);return nr(s,i)}});function $o(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Ao(e,t,n){const r=1-e%2,s=new Float32Array(e);for(let a=0;a<e;++a){const o=2*Math.PI*a/(e+r-1);s[a]=t-n*Math.cos(o)}return so(s,"float32")}const Do=async function(e,t,n=1){const r=tt(e,"predictions","inTopK"),s=tt(t,"targets","inTopK");S(r.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`),S(r.rank-1===s.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${s.rank}`),E(r.shape.slice(0,r.shape.length-1),s.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const a=r.shape[r.shape.length-1];S(n>0&&n<=a,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${a}), but got ${n}`);const o=await r.data(),i=await s.data(),[u,p]=[o.length/a,a],l=function(e,t){let n=null;return n=new Uint8Array(t),n}(0,u);for(let e=0;e<u;e++){const t=e*p,r=o.subarray(t,t+p),s=[];for(let e=0;e<r.length;e++)s.push({value:r[e],index:e});s.sort((e,t)=>t.value-e.value),l[e]=0;for(let t=0;t<n;t++)if(s[t].index===i[e]){l[e]=1;break}}return e!==r&&r.dispose(),t!==s&&s.dispose(),it(l,s.shape,"bool")},Oo=st({conv2DBackpropFilter_:function(e,t,n,r,s,a="NHWC",o){let i=e;3===e.rank&&(i=Zn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Zn(t,[1,t.shape[0],t.shape[1],t.shape[2]])),S(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),S(4===u.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`),S(4===n.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);const p="NHWC"===a?i.shape[3]:i.shape[1],l="NHWC"===a?u.shape[3]:u.shape[1];S(p===n[2],()=>`Error in conv2dDerFilter: depth of input ${p}) must match input depth in filter (${n[2]}.`),S(l===n[3],()=>`Error in conv2dDerFilter: depth of dy (${l}) must match output depth for filter (${n[3]}).`),Yn("conv2dDerFilter",s,o);const c={x:i,dy:u},h={strides:r,pad:s,dataFormat:a,dimRoundingMode:o,filterShape:n};return Je.runKernel("Conv2DBackpropFilter",c,h)}});function Mo(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return nr(e,to(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Fo(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const s=e[e.length-r-1],a=t.length-r-1,o=t[a];(null==s||1===s&&o>1)&&n.unshift(a)}return n}(e.shape,t.shape);return r.length>0&&(n=ns(n,r)),Zn(n,e.shape)}function Co(e,t,n,r){if("linear"===t)return e;if("relu"===t)return _a(e);if("elu"===t)return jr(e);if("relu6"===t)return Ia(e);if("prelu"===t)return ca(e,n);if("leakyrelu"===t)return ws(e,r);if("sigmoid"===t)return rr(e);throw new Error(`Unknown fused activation ${t}.`)}const Ro=(e,t)=>!(e>0)||"linear"===t,Lo=st({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:p,leakyreluAlpha:l}){if(u=u||"linear",!1===Ro(Je.state.gradientDepth,u)){S("NHWC"===s,()=>`Error in fused conv2d: got dataFormat of ${s} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let c=vr(e,t,n,r,s,a,o);return null!=i&&(c=Mn(c,i)),Co(c,u,p,l)}const c=tt(e,"x","conv2d","float32"),h=tt(t,"filter","conv2d","float32");let d=c,m=!1;3===c.rank&&(m=!0,d=Zn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),S(4===d.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${d.rank}.`),S(4===h.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${h.rank}.`),Yn("fused conv2d",r,o);const f="NHWC"===s?d.shape[3]:d.shape[1];S(h.shape[2]===f,()=>`Error in conv2d: depth of input (${f}) must match input depth for filter ${h.shape[2]}.`),S(Jn(n,a),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`);const y=qn(d.shape,h.shape,n,a,r,o);let g,b;if(null!=i&&(g=tt(i,"bias","fused conv2d"),[g]=Ue(g,c),"NHWC"===s?Pr(y.outShape,g.shape):(S(g.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${g.shape.length}.`),S(0===g.shape.length||g.shape[0]===y.outChannels||1===g.shape[0],()=>`Error in fused conv2d: bias shape (${g.shape}) is not compatible with the number of output channels (${y.outChannels})`))),null!=p){const e=p.shape;if(S(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)S(1===e[0]||e[0]===y.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${y.outChannels}).`);else if(3===e.length)try{Pr(e,y.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${y.outShape}).`;throw Error(n)}b=tt(p,"prelu weights","fused conv2d")}const w=(e,t)=>{S("NHWC"===s,()=>`Error in gradient of fused conv2D: got dataFormat of ${s} but only NHWC is currently supported.`);const[o,i,p,l]=t,c=Mo(e,p,u);S(Gn(a),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${a}'`);const h=[kr(i.shape,c,o,n,r),Oo(i,c,o.shape,n,r)];if(null!=l){const e=Fo(l,c);h.push(e)}return h},x={x:d,filter:h,bias:g,preluActivationWeights:b},N={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==i){const e=Es((e,t,n)=>{let r=Je.runKernel(ue,x,N);return n([t,e,r]),m&&(r=Zn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:w}});return e(d,h)}{const e=Es((e,t,n,r)=>{let s=Je.runKernel(ue,x,N);return r([t,e,s,n]),m&&(s=Zn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:w}});return e(d,h,g)}}}),Bo=st({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,s,a=[1,1],o){let i=e;3===e.rank&&(i=Zn(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=Zn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={x:i,dy:u},l={strides:r,pad:s,dimRoundingMode:o,dilations:a,filterShape:n};return Je.runKernel("DepthwiseConv2dNativeBackpropFilter",p,l)}}),zo=st({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,s,a=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=Zn(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const p={dy:i,filter:n},l={strides:r,pad:s,dimRoundingMode:o,dilations:a,inputShape:e},c=Je.runKernel("DepthwiseConv2dNativeBackpropInput",p,l);return u?Zn(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),Po=st({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:s="NHWC",dilations:a=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:p,leakyreluAlpha:l}){if(!1===Ro(Je.state.gradientDepth,u)){let c=Cr(e,t,n,r,s,a,o);return null!=i&&(c=Mn(c,i)),Co(c,u,p,l)}const c=tt(e,"x","depthwiseConv2d","float32"),h=tt(t,"filter","depthwiseConv2d","float32");let d=c,m=!1;3===c.rank&&(m=!0,d=Zn(c,[1,c.shape[0],c.shape[1],c.shape[2]])),S(4===d.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${d.rank}.`),S(4===h.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${h.rank}.`),S(d.shape[3]===h.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${d.shape[3]}) must match the inChannels dimension in filter ${h.shape[2]}.`),null==a&&(a=[1,1]),S(Jn(n,a),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${a}'`),Yn("fused depthwiseConv2d",r,o);const f=qn(d.shape,h.shape,n,a,r,o,!0);let y,g;null!=i&&(y=tt(i,"bias","fused conv2d"),[y]=Ue(y,c),Pr(f.outShape,y.shape)),null!=p&&(g=tt(p,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{S(Gn(a),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${a}'`);const[s,i,p,l]=t,c=Mo(e,p,u),h=zo(i.shape,c,s,n,r,a,o),d=Bo(i,c,s.shape,n,r,a,o);return null!=l?[h,d,Fo(y,c)]:[h,d]},w={x:d,filter:h,bias:y,preluActivationWeights:g},x={strides:n,pad:r,dataFormat:s,dilations:a,dimRoundingMode:o,activation:u,leakyreluAlpha:l};if(null==i){const e=Es((e,t,n)=>{let r=Je.runKernel(pe,w,x);return n([t,e,r]),m&&(r=Zn(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}});return e(d,h)}{const e=Es((e,t,n,r)=>{let s=Je.runKernel(pe,w,x);return r([t,e,s,n]),m&&(s=Zn(s,[s.shape[1],s.shape[2],s.shape[3]])),{value:s,gradFunc:b}});return e(d,h,y)}}}),Vo=st({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:s,activation:a="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===Ro(Je.state.gradientDepth,a)){let u=tr(e,t,n,r);return null!=s&&(u=Mn(u,s)),Co(u,a,o,i)}let u=tt(e,"a","fused matMul"),p=tt(t,"b","fused matMul");[u,p]=Ue(u,p);const l=n?u.shape[u.rank-2]:u.shape[u.rank-1],c=r?p.shape[p.rank-1]:p.shape[p.rank-2],h=n?u.shape[u.rank-1]:u.shape[u.rank-2],d=r?p.shape[p.rank-2]:p.shape[p.rank-1],m=u.shape.slice(0,-2),f=p.shape.slice(0,-2),y=$(m),g=$(f);S(l===c,()=>`Error in fused matMul: inner shapes (${l}) and (${c}) of Tensors with shapes ${u.shape} and ${p.shape} and transposeA=${n} and transposeB=${r} must match.`);const b=Pr(u.shape.slice(0,-2),p.shape.slice(0,-2)).concat([h,d]),w=Zn(u,n?[y,l,h]:[y,h,l]),x=Zn(p,r?[g,d,c]:[g,c,d]);let N,v;null!=s&&(N=tt(s,"bias","fused matMul"),[N]=Ue(N,u),Pr(b,N.shape)),null!=o&&(v=tt(o,"prelu weights","fused matMul"));const T=(e,t)=>{const[o,i,u,p]=t,l=Mo(Zn(e,u.shape),u,a);let c,h;return n||r?!n&&r?(c=tr(l,i,!1,!1),h=tr(l,o,!0,!1)):n&&!r?(c=tr(i,l,!1,!0),h=tr(o,l,!1,!1)):(c=tr(i,l,!0,!0),h=tr(l,o,!0,!0)):(c=tr(l,i,!1,!0),h=tr(o,l,!0,!1)),null!=s?[c,h,Fo(p,l)]:[c,h]},k={a:w,b:x,bias:N,preluActivationWeights:v},E={transposeA:n,transposeB:r,activation:a,leakyreluAlpha:i};if(null==s){const e=Es((e,t,n)=>{const r=Je.runKernel(ie,k,E);return n([e,t,r]),{value:Zn(r,b),gradFunc:T}});return e(w,x)}{const e=Es((e,t,n,r)=>{const s=Je.runKernel(ie,k,E);return r([e,t,s,n]),{value:Zn(s,b),gradFunc:T}});return e(w,x,N)}}}),Uo=st({hammingWindow_:function(e){return Ao(e,.54,.46)}}),Ko=st({hannWindow_:function(e){return Ao(e,.5,.5)}}),qo=st({frame_:function(e,t,n,r=!1,s=0){let a=0;const o=[];for(;a+t<=e.size;)o.push(sr(e,a,t)),a+=n;if(r)for(;a<e.size;){const r=a+t-e.size,i=er([sr(e,a,t-r),yr([r],s)]);o.push(i),a+=n}return 0===o.length?ao([],[0,t]):Zn(er(o),[o.length,t])}}),Wo=st({stft_:function(e,t,n,r,s=Ko){null==r&&(r=$o(t));const a=qo(e,t,n),o=nr(a,s(t));return Za(o,r)}}),Ho=st({cropAndResize_:function(e,t,n,r,s="bilinear",a=0){const o=tt(e,"image","cropAndResize"),i=tt(t,"boxes","cropAndResize","float32"),u=tt(n,"boxInd","cropAndResize","int32"),p=i.shape[0];S(4===o.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`),S(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${p},4] but had shape ${i.shape}.`),S(1===u.rank&&u.shape[0]===p,()=>`Error in cropAndResize: boxInd must be have size [${p}] but had shape ${i.shape}.`),S(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),S(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),S("bilinear"===s||"nearest"===s,()=>`method must be bilinear or nearest, but was ${s}`);const l={image:o,boxes:i,boxInd:u},c={method:s,extrapolationValue:a,cropSize:r};return Je.runKernel("CropAndResize",l,c)}}),jo=st({flipLeftRight_:function(e){const t=tt(e,"image","flipLeftRight","float32");S(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);const n={image:t};return Je.runKernel("FlipLeftRight",n,{})}}),Go=st({grayscaleToRGB_:function(e){const t=tt(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];S(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),S(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const s=new Array(t.rank);return s.fill(1,0,n),s[n]=3,ps(t,s)}}),Jo=st({rotateWithOffset_:function(e,t,n=0,r=.5){const s=tt(e,"image","rotateWithOffset","float32");S(4===s.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${s.rank}.`);const a={image:s},o={radians:t,fillValue:n,center:r};return Je.runKernel("RotateWithOffset",a,o)}});function Yo(e,t,n,r,s,a){null==r&&(r=.5),null==s&&(s=Number.NEGATIVE_INFINITY),null==a&&(a=0);const o=e.shape[0];return n=Math.min(n,o),S(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),S(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),S(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),S(1===t.rank,()=>"scores must be a 1D tensor"),S(t.shape[0]===o,()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`),S(0<=a&&a<=1,()=>`softNmsSigma must be in [0, 1], but was '${a}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:s,softNmsSigma:a}}const Zo=st({nonMaxSuppression_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=tt(e,"boxes","nonMaxSuppression","float32"),o=tt(t,"scores","nonMaxSuppression","float32"),i=Yo(a,o,n,r,s),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:s=i.scoreThreshold};return Je.runKernel("NonMaxSuppressionV3",{boxes:a,scores:o},u)}});function Qo(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,s=e.length,a=0,o=!1;for(;r<s;){a=r+(s-r>>>1);const i=n(t,e[a]);i>0?r=a+1:(s=a,o=!i)}return o?r:-r-1}(e,t,n||Xo)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function Xo(e,t){return e>t?1:e<t?-1:0}function ei(e,t,n,r,s,a,o=!1,i=!1,u=!1){const p=[];for(let e=0;e<t.length;e++)t[e]>s&&p.push({score:t[e],boxIndex:e,suppressBeginIndex:0});p.sort(ri);const l=a>0?-.5/a:0,c=[],h=[];for(;c.length<n&&p.length>0;){const t=p.pop(),{score:n,boxIndex:a,suppressBeginIndex:o}=t;if(n<s)break;let i=!1;for(let n=c.length-1;n>=o;--n){const o=ti(e,a,c[n]);if(o>=r){i=!0;break}if(t.score=t.score*ni(r,l,o),t.score<=s)break}t.suppressBeginIndex=c.length,i||(t.score===n?(c.push(a),h.push(t.score)):t.score>s&&Qo(p,t,ri))}const d=c.length,m=n-d;i&&m>0&&(c.push(...new Array(m).fill(0)),h.push(...new Array(m).fill(0)));const f={selectedIndices:c};return o&&(f.selectedScores=h),u&&(f.validOutputs=d),f}function ti(e,t,n){const r=e.subarray(4*t,4*t+4),s=e.subarray(4*n,4*n+4),a=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),p=Math.min(s[0],s[2]),l=Math.min(s[1],s[3]),c=Math.max(s[0],s[2]),h=Math.max(s[1],s[3]),d=(i-a)*(u-o),m=(c-p)*(h-l);if(d<=0||m<=0)return 0;const f=Math.max(a,p),y=Math.max(o,l),g=Math.min(i,c),b=Math.min(u,h),w=Math.max(g-f,0)*Math.max(b-y,0);return w/(d+m-w)}function ni(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function ri(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const si=st({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=tt(e,"boxes","nonMaxSuppression"),i=tt(t,"scores","nonMaxSuppression"),u=Yo(o,i,n,r,s,a),p={boxes:o,scores:i},l={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:s=u.scoreThreshold,softNmsSigma:a=u.softNmsSigma},c=Je.runKernel("NonMaxSuppressionV5",p,l);return{selectedIndices:c[0],selectedScores:c[1]}}}),ai=st({nonMaxSuppressionPadded_:function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=tt(e,"boxes","nonMaxSuppression"),i=tt(t,"scores","nonMaxSuppression"),u=Yo(o,i,n,r,s,null),p={boxes:o,scores:i},l={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:a},c=Je.runKernel("NonMaxSuppressionV4",p,l);return{selectedIndices:c[0],validOutputs:c[1]}}}),oi=st({resizeBilinear_:function(e,t,n=!1,r=!1){const s=tt(e,"images","resizeBilinear");S(3===s.rank||4===s.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${s.rank}.`),S(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),S(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let a=s,o=!1;3===s.rank&&(o=!0,a=Zn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},p=Je.runKernel("ResizeBilinear",i,u);return o?Zn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ii=st({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const s=tt(e,"images","resizeNearestNeighbor");S(3===s.rank||4===s.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${s.rank}.`),S(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),S("float32"===s.dtype||"int32"===s.dtype,()=>"`images` must have `int32` or `float32` as dtype"),S(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let a=s,o=!1;3===s.rank&&(o=!0,a=Zn(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const[]=t,i={images:a},u={alignCorners:n,halfPixelCenters:r,size:t},p=Je.runKernel("ResizeNearestNeighbor",i,u);return o?Zn(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ui=st({threshold_:function(e,t="binary",n=!1,r=.5){const s=tt(e,"image","threshold"),a=s.shape[0]*s.shape[1];let o,i,u,p,l=nr(so([r]),255);if(S(3===s.rank,()=>`Error in threshold: image must be rank 3,but got rank ${s.rank}.`),S(3===s.shape[2]||1===s.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${s.shape[2]}.`),S("int32"===s.dtype||"float32"===s.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${s.dtype}.`),S("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===s.shape[2]){[o,i,u]=Ya(s,[1,1,1],-1);const e=nr(o,.2989),t=nr(i,.587),n=nr(u,.114);p=Mn(Mn(e,t),n)}else p=e;"otsu"===t&&(l=function(e,t){let n,r,s,a,o,i,u=so([-1]),p=so([0]),l=so([0]);for(let c=0;c<e.size-1;c++){n=sr(e,0,c+1),r=sr(e,c+1),o=zr(ns(n),t),i=zr(ns(r),t);const h=ns(nr(n,ka(0,n.size)));s=zr(h,ns(n));const d=yr(r.shape,n.size),m=Mn(ka(0,r.size),d),f=nr(r,m);a=zr(ns(f),ns(r));const y=As(s,a),g=As(s,a),b=nr(o,i);l=nr(nr(b,y),g);const w=ds(l,p);p=Ur(w,l,p),u=Ur(w,so([c]),u)}return u}(hr(on(Fa(p),"int32"),it([]),256),a));const c=n?Ns(p,l):ds(p,l);return on(nr(c,255),"int32")}}),pi=st({transform_:function(e,t,n="nearest",r="constant",s=0,a){const o=tt(e,"image","transform","float32"),i=tt(t,"transforms","transform","float32");S(4===o.rank,()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`),S(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),S(null==a||2===a.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${a}.`);const u={image:o,transforms:i},p={interpolation:n,fillMode:r,fillValue:s,outputShape:a};return Je.runKernel("Transform",u,p)}}),li=st({bandPart_:function(e,t,n){S(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),S(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=tt(e,"a","bandPart");S(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const s=r.shape,[a,o]=r.shape.slice(-2);if(!(t<=a))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${a}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=a),n<0&&(n=o);const i=Zn(ka(0,a,1,"int32"),[-1,1]),u=ka(0,o,1,"int32"),p=As(i,u),l=Ms(Ns(p,Xr(+t,"int32")),ms(p,Xr(-n,"int32"))),c=Ws([a,o],r.dtype);return Zn(eo(fo(Zn(r,[-1,a,o])).map(e=>Ur(l,e,c))),s)}}),ci=st({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,S(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)S(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=Ya(e,e.shape[0],0).map(e=>Xa(e,[0]));S(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let t=0;t<e.length;++t)n.push(Je.tidy(()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=nr(ns(nr(n[r],e)),n[r]);e=As(e,t)}return zr(e,ss(e,"euclidean"))}));return t?eo(n,0):n}});function hi(e,t=!1){return Je.tidy(()=>{S(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let s=ls(n),a=un(e);const o=ao([[1]],[1,1]);let i=un(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=a,u=i,p=s;[i,a,s]=Je.tidy(()=>{const t=sr(a,[e,e],[n-e,1]),u=ss(t),p=sr(a,[e,e],[1,1]),l=Ur(ds(p,0),ao([[-1]]),ao([[1]])),c=As(p,nr(l,u)),h=zr(t,c);i=1===h.shape[0]?un(o):er([o,sr(h,[1,0],[h.shape[0]-1,h.shape[1]])],0);const d=_s(zr(tr(l,c),u)),m=sr(a,[e,0],[n-e,r]),f=nr(d,i),y=To(i);if(0===e)a=As(m,tr(f,tr(y,m)));else{const t=As(m,tr(f,tr(y,m)));a=er([sr(a,[0,0],[e,r]),t],0)}const g=To(f),b=sr(s,[0,e],[n,s.shape[1]-e]);if(0===e)s=As(b,tr(tr(b,i),g));else{const t=As(b,tr(tr(b,i),g));s=er([sr(s,[0,0],[n,e]),t],1)}return[i,a,s]}),No([t,u,p])}return!t&&n>r&&(s=sr(s,[0,0],[n,r]),a=sr(a,[0,0],[r,r])),[s,a]})}const di=st({qr_:function(e,t=!1){if(S(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return hi(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=fo(Zn(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),s=[],a=[];return r.forEach(e=>{const[n,r]=hi(e,t);s.push(n),a.push(r)}),[Zn(eo(s,0),e.shape),Zn(eo(a,0),e.shape)]}}});var mi;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(mi||(mi={}));const fi=st({computeWeightedLoss_:function(e,t,n=mi.SUM_BY_NONZERO_WEIGHTS){const r=tt(e,"losses","computeWeightedLoss");let s=null;null!=t&&(s=tt(t,"weights","computeWeightedLoss"));const a=null==s?r:nr(r,s);if(n===mi.NONE)return a;if(n===mi.SUM)return ns(a);if(n===mi.MEAN){if(null==s)return qs(a);{const e=r.size/s.size,t=zr(ns(a),ns(s));return e>1?zr(t,Xr(e)):t}}if(n===mi.SUM_BY_NONZERO_WEIGHTS){if(null==s)return zr(ns(a),Xr(r.size));{const e=nr(s,Hs(r.shape)),t=on(ns(ea(e,Xr(0))),"float32");return zr(ns(a),t)}}throw Error(`Unknown reduction: ${n}`)}}),yi=st({absoluteDifference_:function(e,t,n,r=mi.SUM_BY_NONZERO_WEIGHTS){const s=tt(e,"labels","absoluteDifference"),a=tt(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=tt(n,"weights","absoluteDifference")),E(s.shape,a.shape,"Error in absoluteDifference: ");const i=An(As(s,a));return fi(i,o,r)}}),gi=st({cosineDistance_:function(e,t,n,r,s=mi.SUM_BY_NONZERO_WEIGHTS){const a=tt(e,"labels","cosineDistance"),o=tt(t,"predictions","cosineDistance");let i=null;null!=r&&(i=tt(r,"weights","cosineDistance")),E(a.shape,o.shape,"Error in cosineDistance: ");const u=Xr(1),p=As(u,ns(nr(a,o),n,!0));return fi(p,i,s)}}),bi=st({hingeLoss_:function(e,t,n,r=mi.SUM_BY_NONZERO_WEIGHTS){let s=tt(e,"labels","hingeLoss");const a=tt(t,"predictions","hingeLoss");let o=null;null!=n&&(o=tt(n,"weights","hingeLoss")),E(s.shape,a.shape,"Error in hingeLoss: ");const i=Xr(1);s=As(nr(Xr(2),s),i);const u=_a(As(i,nr(s,a)));return fi(u,o,r)}}),wi=st({huberLoss_:function(e,t,n,r=1,s=mi.SUM_BY_NONZERO_WEIGHTS){const a=tt(e,"labels","huberLoss"),o=tt(t,"predictions","huberLoss");let i=null;null!=n&&(i=tt(n,"weights","huberLoss")),E(a.shape,o.shape,"Error in huberLoss: ");const u=Xr(r),p=An(As(o,a)),l=Gs(p,u),c=As(p,l),h=Mn(nr(Xr(.5),ts(l)),nr(u,c));return fi(h,i,s)}}),xi=st({logLoss_:function(e,t,n,r=1e-7,s=mi.SUM_BY_NONZERO_WEIGHTS){const a=tt(e,"labels","logLoss"),o=tt(t,"predictions","logLoss");let i=null;null!=n&&(i=tt(n,"weights","logLoss")),E(a.shape,o.shape,"Error in logLoss: ");const u=Xr(1),p=Xr(r),l=_s(nr(a,ks(Mn(o,p)))),c=nr(As(u,a),ks(Mn(As(u,o),p))),h=As(l,c);return fi(h,i,s)}}),Ni=st({meanSquaredError_:function(e,t,n,r=mi.SUM_BY_NONZERO_WEIGHTS){const s=tt(e,"labels","meanSquaredError"),a=tt(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=tt(n,"weights","meanSquaredError")),E(s.shape,a.shape,"Error in meanSquaredError: ");const i=Qa(s,a);return fi(i,o,r)}}),vi=st({sigmoidCrossEntropy_:function(e,t,n,r=0,s=mi.SUM_BY_NONZERO_WEIGHTS){let a=tt(e,"multiClassLabels","sigmoidCrossEntropy");const o=tt(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=tt(n,"weights","sigmoidCrossEntropy")),E(a.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=Xr(r),t=Xr(1),n=Xr(.5);a=Mn(nr(a,As(t,e)),nr(n,e))}const u=function(e,t){const n=tt(e,"labels","sigmoidCrossEntropyWithLogits"),r=tt(t,"logits","sigmoidCrossEntropyWithLogits");E(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=_a(r),a=nr(r,n),o=Ss(os(_s(An(r))));return Mn(As(s,a),o)}(a,o);return fi(u,i,s)}}),Ti=st({softmaxCrossEntropy_:function(e,t,n,r=0,s=mi.SUM_BY_NONZERO_WEIGHTS){let a=tt(e,"onehotLabels","softmaxCrossEntropy");const o=tt(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=tt(n,"weights","softmaxCrossEntropy")),E(a.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=Xr(r),t=Xr(1),n=Xr(a.shape[1]);a=Mn(nr(a,As(t,e)),zr(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Es((e,t,r)=>{const s=Os(t,[n],!0),a=As(on(t,"float32"),s);r([e,a]);const o=_s(nr(a,e));return{value:ns(o,[n]),gradFunc:(e,t)=>{const[r,s]=t,a=Jr(e.shape,[n]);return[nr(Zn(e,a),As(on(r,"float32"),os(s))),nr(Zn(e,a),As(os(s),on(r,"float32")))]}}});return r(e,t)}(a,o);return fi(u,i,s)}}),ki=st({sparseFillEmptyRows_:function(e,t,n,r){const s=tt(e,"indices","sparseFillEmptyRows","int32"),a=tt(t,"values","sparseFillEmptyRows"),o=tt(n,"denseShape","sparseFillEmptyRows","int32"),i=tt(r,"defaultValue","sparseFillEmptyRows",a.dtype);if(2!==s.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${s.shape}`);if(1!==a.rank)throw new Error(`Values should be Tensor1D but received shape ${a.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:s,values:a,denseShape:o,defaultValue:i},p=Je.runKernel("SparseFillEmptyRows",u);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}}),Si=st({sparseReshape_:function(e,t,n){const r=tt(e,"inputIndices","sparseReshape","int32"),s=tt(t,"inputShape","sparseReshape","int32"),a=tt(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==s.rank)throw new Error(`Input shape should be Tensor1D but received shape ${s.shape}`);if(1!==a.rank)throw new Error(`New shape should be Tensor1D but received shape ${a.shape}`);const o={inputIndices:r,inputShape:s,newShape:a},i=Je.runKernel("SparseReshape",o);return{outputIndices:i[0],outputShape:i[1]}}}),Ei=st({sparseSegmentMean_:function(e,t,n){const r=tt(e,"data","sparseSegmentMean"),s=tt(t,"indices","sparseSegmentMean","int32"),a=tt(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Je.runKernel("SparseSegmentMean",o)}}),_i=st({sparseSegmentSum_:function(e,t,n){const r=tt(e,"data","sparseSegmentSum"),s=tt(t,"indices","sparseSegmentSum","int32"),a=tt(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==s.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${s.shape}`);if(1!==a.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${a.shape}`);const o={data:r,indices:s,segmentIds:a};return Je.runKernel("SparseSegmentSum",o)}}),Ii=st({stringNGrams_:function(e,t,n,r,s,a,o,i){const u=tt(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const p=tt(t,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const l={separator:n,nGramWidths:r,leftPad:s,rightPad:a,padWidth:o,preserveShortSequences:i},c={data:u,dataSplits:p},h=Je.runKernel("StringNGrams",c,l);return{nGrams:h[0],nGramsSplits:h[1]}}}),$i=st({stringSplit_:function(e,t,n=!0){const r=tt(e,"input","stringSplit","string"),s=tt(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==s.rank)throw new Error(`Delimiter should be a scalar but received shape ${s.shape}`);const a={skipEmpty:n},o={input:r,delimiter:s},i=Je.runKernel("StringSplit",o,a);return{indices:i[0],values:i[1],shape:i[2]}}}),Ai=st({stringToHashBucketFast_:function(e,t){const n=tt(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const s={input:n};return Je.runKernel("StringToHashBucketFast",s,r)}}),Di={fft:ja,ifft:Ga,rfft:Za,irfft:Ja},Oi={hammingWindow:Uo,hannWindow:Ko,frame:qo,stft:Wo},Mi={flipLeftRight:jo,grayscaleToRGB:Go,resizeNearestNeighbor:ii,resizeBilinear:oi,rotateWithOffset:Jo,cropAndResize:Ho,nonMaxSuppression:Zo,nonMaxSuppressionAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY){const a=tt(e,"boxes","nonMaxSuppressionAsync"),o=tt(t,"scores","nonMaxSuppressionAsync"),i=Yo(a,o,n,r,s);n=i.maxOutputSize,r=i.iouThreshold,s=i.scoreThreshold;const u=await Promise.all([a.data(),o.data()]),p=u[0],l=u[1],{selectedIndices:c}=function(e,t,n,r,s){return ei(e,t,n,r,s,0)}(p,l,n,r,s);return a!==e&&a.dispose(),o!==t&&o.dispose(),so(c,"int32")},nonMaxSuppressionWithScore:si,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=0){const o=tt(e,"boxes","nonMaxSuppressionAsync"),i=tt(t,"scores","nonMaxSuppressionAsync"),u=Yo(o,i,n,r,s,a);n=u.maxOutputSize,r=u.iouThreshold,s=u.scoreThreshold,a=u.softNmsSigma;const p=await Promise.all([o.data(),i.data()]),l=p[0],c=p[1],{selectedIndices:h,selectedScores:d}=function(e,t,n,r,s,a){return ei(e,t,n,r,s,a,!0)}(l,c,n,r,s,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:so(h,"int32"),selectedScores:so(d)}},nonMaxSuppressionPadded:ai,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,s=Number.NEGATIVE_INFINITY,a=!1){const o=tt(e,"boxes","nonMaxSuppressionAsync"),i=tt(t,"scores","nonMaxSuppressionAsync"),u=Yo(o,i,n,r,s,null),p=u.maxOutputSize,l=u.iouThreshold,c=u.scoreThreshold,[h,d]=await Promise.all([o.data(),i.data()]),{selectedIndices:m,validOutputs:f}=function(e,t,n,r,s,a){return ei(e,t,n,r,s,0,!1,a,!0)}(h,d,p,l,c,a);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:so(m,"int32"),validOutputs:Xr(f,"int32")}},threshold:ui,transform:pi},Fi={bandPart:li,gramSchmidt:ci,qr:di},Ci={absoluteDifference:yi,computeWeightedLoss:fi,cosineDistance:gi,hingeLoss:bi,huberLoss:wi,logLoss:xi,meanSquaredError:Ni,sigmoidCrossEntropy:vi,softmaxCrossEntropy:Ti},Ri={sparseFillEmptyRows:ki,sparseReshape:Si,sparseSegmentMean:Ei,sparseSegmentSum:_i},Li={stringNGrams:Ii,stringSplit:$i,stringToHashBucketFast:Ai};var Bi,zi;J().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(Bi||(Bi={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(zi||(zi={}));const Pi={};function Vi(e){return Pi[e]}function Ui(e,t,n,r,s){const a=t.inputParams[e];if(a&&void 0!==a.inputIndexStart){const e=a.inputIndexStart,o=0===a.inputIndexEnd?void 0:void 0===a.inputIndexEnd?e+1:a.inputIndexEnd;if("tensor"===a.type)return Ki(t.inputNames[a.inputIndexStart],n,r,s);if("tensors"===a.type)return t.inputNames.slice(e,o).map(e=>Ki(e,n,r,s));const i=Ki(t.inputNames.slice(e)[0],n,r,s),u=i.dataSync();return"number"===a.type?u[0]:V(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function Ki(e,t,n,r){const[s,a]=Hi(e);if(null!=r){const e=r.getHashTableHandleByName(s);if(null!=e)return e}const o=n.currentContextIds.find(e=>!!t[Wi(s,e)]);return void 0!==o?t[Wi(s,o)][a]:void 0}function qi(e,t){const[n,r,s]=Hi(e);return[Wi(n,t&&t.currentContextId),r,s]}function Wi(e,t){return t?`${e}-${t}`:e}function Hi(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function ji(e,t,n){let r=Ui("pad",e,t,n);if("explicit"===r){r=Ui("explicitPaddings",e,t,n);const s=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)s[e][0]=r[2*e],s[e][1]=r[2*e+1];return s}return r}function Gi(e){return e.kept?e:un(e)}const Ji=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Yi=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Zi=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],Qi=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Xi=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],eu=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],tu=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],nu=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],ru=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],su=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],au=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],ou=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],iu=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],uu=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],pu=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],lu=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],cu=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],hu=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],du=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class mu{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,s,a,o,i,u,p,l,c,h,d,m,f,y,g,b,w,x,N].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const n=e.node,r=[],s=[],a=[],o=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?s.push(e[t.name]):null!=t.input&&0!==t.input.length||a.push(e[t.name]),e),{});let i=[];const u=[];let p={},l={};null!=t&&(p=this.mapSignatureEntries(t.inputs),l=this.mapSignatureEntries(t.outputs));const c=Object.keys(o);c.forEach(e=>{const t=o[e];t.inputNames.forEach((e,n)=>{const[r,,s]=qi(e),a=o[r];if(null!=a.outputs){const e=a.outputs.indexOf(s);if(-1!==e){const s=`${r}:${e}`;t.inputNames[n]=s}}t.inputs.push(a),a.children.push(t)})}),0===Object.keys(l).length?c.forEach(e=>{const t=o[e];0===t.children.length&&u.push(t)}):Object.keys(l).forEach(e=>{const[t]=qi(e),n=o[t];null!=n&&(n.signatureKey=l[e],u.push(n))}),Object.keys(p).length>0?Object.keys(p).forEach(e=>{const[t]=qi(e),n=o[t];n&&(n.signatureKey=p[e],i.push(n))}):i=r;let h={};null!=e.library&&null!=e.library.function&&(h=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const d={nodes:o,inputs:i,outputs:u,weights:s,placeholders:r,signature:t,functions:h};return a.length>0&&(d.initNodes=a),d}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=Vi(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const r=n.type;let s;switch(n.type){case"string":s=yu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=yu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":s=Eu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Eu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":s=bu(e.attr,n.tfName,n.defaultValue||0),void 0===s&&n.tfDeprecatedName&&(s=bu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":s=Su(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Su(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":s=gu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=gu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":s=Iu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Iu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":s=ku(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=ku(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":s=_u(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=_u(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":s=Nu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=Nu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":s=vu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=vu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":s=xu(e.attr,n.tfName,n.defaultValue),void 0===s&&n.tfDeprecatedName&&(s=xu(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:s,type:r},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const s=[],a=[];e.signature.inputArg.forEach(e=>{const[t]=qi(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:wu(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,s.push(n),r[t]=n}),Object.keys(r).forEach(e=>{const t=r[e];t.inputNames.forEach((e,n)=>{const[s,,a]=qi(e),o=r[s];if(null!=o.outputs){const e=o.outputs.indexOf(a);if(-1!==e){const r=`${s}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)})});const o=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=qi(o[e.name]),s=r[t];null!=s&&(s.defaultOutput=n,a.push(s))});const i=this.mapArgsToSignature(e);return{nodes:r,inputs:s,outputs:a,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function fu(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=J().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function yu(e,t,n,r=!1){const s=e[t];return null!=s?fu(s.s,r):n}function gu(e,t,n){const r=e[t];return r?r.b:n}function bu(e,t,n){const r=e[t]||{},s=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof s?s:parseInt(s,10)}function wu(e){switch("string"==typeof e&&(e=Bi[e]),e){case Bi.DT_FLOAT:case Bi.DT_HALF:return"float32";case Bi.DT_INT32:case Bi.DT_INT64:case Bi.DT_INT8:case Bi.DT_UINT8:return"int32";case Bi.DT_BOOL:return"bool";case Bi.DT_DOUBLE:return"float32";case Bi.DT_STRING:return"string";default:return null}}function xu(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Nu(e,t,n){const r=e[t];return r&&r.type?wu(r.type):n}function vu(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>wu(e)):n}function Tu(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function ku(e,t,n){const r=e[t];return r&&r.shape?Tu(r.shape):n}function Su(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function Eu(e,t,n,r=!1){const s=e[t];return s&&s.list&&s.list.s?s.list.s.map(e=>fu(e,r)):n}function _u(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>Tu(e)):n}function Iu(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class $u{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return Ki(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return Ki(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return bu(this.node.rawAttrs,e,t);if(null!=n.s)return yu(this.node.rawAttrs,e,t);if(null!=n.b)return gu(this.node.rawAttrs,e,t);if(null!=n.shape)return ku(this.node.rawAttrs,e,t);if(null!=n.type)return Nu(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Su(this.node.rawAttrs,e,t);if(null!=n.list.s)return Eu(this.node.rawAttrs,e,t);if(null!=n.list.shape)return _u(this.node.rawAttrs,e,t);if(null!=n.list.b)return Iu(this.node.rawAttrs,e,t);if(null!=n.list.type)return vu(this.node.rawAttrs,e,t)}return t}}function Au(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){S(e.length===t.length,()=>n+` Shapes ${e} and ${t} must match`);for(let r=0;r<e.length;r++){const s=e[r],a=t[r];S(s<0||a<0||s===a,()=>n+` Shapes ${e} and ${t} must match`)}}}function Du(e){return"number"!=typeof e&&!e.some(e=>e<0)}function Ou(e,t,n){let r=Mu(e,n);const s=!Du(r);if(s&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(s&&t.forEach(e=>{r=Mu(e.shape,r)}),!Du(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function Mu(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const s=e[r],a=t[r];if(s>=0&&a>=0&&s!==a)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=s>=0?s:a}return n}class Fu{constructor(e,t,n,r,s,a,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=s,this.dynamicSize=a,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=Xr(0),vo(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),Au(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,vo(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return it([],[0].concat(this.elementShape));const n=this.readMany(e);return Au(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),eo(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return it([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return Au(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),er(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,fo(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map(e=>(n+=e,n));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const s=0===n?0:t.size/n,a=[];xo(()=>{t=Zn(t,[1,n,s]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],s];a[n]=Zn(sr(t,o,i),this.elementShape)}return a});const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,a)}}class Cu{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);Au(t,e.shape,"TensorList shape mismatch: "),vo(e)}),this.idTensor=Xr(0),this.maxNumElements=r,vo(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Cu([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);Au(e,this.elementShape,"TensorList shape mismatch: ");const r=Ou(this.elementShape,this.tensors,e);return xo(()=>{const e=this.tensors.map(e=>Zn(e,r));return eo(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=Ou(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,Au(r.shape,e,"TensorList shape mismatch: "),Zn(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(Au(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");vo(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Cu([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);Au(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=Ou(this.elementShape,this.tensors,t);return Zn(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);Au(this.elementShape,t.shape,"TensorList shape mismatch: "),vo(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);Au(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=Ou(this.elementShape,this.tensors,n);return 0===e.length?it([],[0].concat(r)):xo(()=>{const t=e.map(e=>Zn(this.tensors[e],r));return eo(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);Au(this.elementShape,t,"TensorList shape mismatch: ");const n=Ou(this.elementShape,this.tensors,t);return 0===this.size()?it([],[0].concat(n)):xo(()=>{const e=this.tensors.map(e=>Zn(e,n));return er(e,0)})}}function Ru(e,t,n){const[r,s]=Ui("fusedOps",e,t,n),a="biasadd"===r,o=!a,i="prelu"===s,u="fusedbatchnorm"===r,p=Ui("numArgs",e,t,n);if(a){if(i&&2!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&a&&1!==p)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const l=Ui("strides",e,t,n),c=ji(e,t,n),h=Ui("dataFormat",e,t,n).toUpperCase(),d=Ui("dilations",e,t,n);let[m,f]=Ui("args",e,t,n);return o&&(f=m,m=void 0),{stride:l,pad:c,dataFormat:h,dilations:d,biasArg:m,preluArg:f,activationFunc:s,leakyreluAlpha:Ui("leakyreluAlpha",e,t,n)}}function Lu(e,t,n){return{boxes:Ui("boxes",e,t,n),scores:Ui("scores",e,t,n),maxOutputSize:Ui("maxOutputSize",e,t,n),iouThreshold:Ui("iouThreshold",e,t,n),scoreThreshold:Ui("scoreThreshold",e,t,n),softNmsSigma:Ui("softNmsSigma",e,t,n)}}class Bu{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=Xr(0),this.tensorMap=new Map,vo(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Xr(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),xo(()=>{const e=fo(t),r=n.length,s=e.length;S(r===s,()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${s} elements.`);for(let t=0;t<r;t++){const r=n[t],s=e[t];vo(s),this.tensorMap.set(r,s)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return xo(()=>{const e=[];for(let r=0;r<n.length;r++){const s=n[r],a=this.findWithDefault(s,t);e.push(a)}return eo(e)})}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function zu(e,t,n,r,s=xo){const a=((e,t,n)=>{switch(e.category){case"arithmetic":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(Ui("a",e,t,n),Ui("b",e,t,n))];case"AddN":return[r.addN(Ui("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(Ui("a",e,t,n),Ui("b",e,t,n))];case"Mul":return[r.mul(Ui("a",e,t,n),Ui("b",e,t,n))];case"RealDiv":case"Div":return[r.div(Ui("a",e,t,n),Ui("b",e,t,n))];case"DivNoNan":return[r.divNoNan(Ui("a",e,t,n),Ui("b",e,t,n))];case"FloorDiv":return[r.floorDiv(Ui("a",e,t,n),Ui("b",e,t,n))];case"Sub":return[r.sub(Ui("a",e,t,n),Ui("b",e,t,n))];case"Minimum":return[r.minimum(Ui("a",e,t,n),Ui("b",e,t,n))];case"Maximum":return[r.maximum(Ui("a",e,t,n),Ui("b",e,t,n))];case"Pow":return[r.pow(Ui("a",e,t,n),Ui("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(Ui("a",e,t,n),Ui("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"basic_math":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(Ui("x",e,t,n))];case"Acos":return[r.acos(Ui("x",e,t,n))];case"Acosh":return[r.acosh(Ui("x",e,t,n))];case"Asin":return[r.asin(Ui("x",e,t,n))];case"Asinh":return[r.asinh(Ui("x",e,t,n))];case"Atan":return[r.atan(Ui("x",e,t,n))];case"Atan2":return[r.atan2(Ui("x",e,t,n),Ui("y",e,t,n))];case"Atanh":return[r.atanh(Ui("x",e,t,n))];case"Ceil":return[r.ceil(Ui("x",e,t,n))];case"Complex":return[r.complex(Ui("real",e,t,n),Ui("imag",e,t,n))];case"Cos":return[r.cos(Ui("x",e,t,n))];case"Cosh":return[r.cosh(Ui("x",e,t,n))];case"Elu":return[r.elu(Ui("x",e,t,n))];case"Erf":return[r.erf(Ui("x",e,t,n))];case"Exp":return[r.exp(Ui("x",e,t,n))];case"Expm1":return[r.expm1(Ui("x",e,t,n))];case"Floor":return[r.floor(Ui("x",e,t,n))];case"Log":return[r.log(Ui("x",e,t,n))];case"Log1p":return[r.log1p(Ui("x",e,t,n))];case"Imag":return[r.imag(Ui("x",e,t,n))];case"Neg":return[r.neg(Ui("x",e,t,n))];case"Reciprocal":return[r.reciprocal(Ui("x",e,t,n))];case"Real":return[r.real(Ui("x",e,t,n))];case"Relu":return[r.relu(Ui("x",e,t,n))];case"Round":return[r.round(Ui("x",e,t,n))];case"Selu":return[r.selu(Ui("x",e,t,n))];case"Sigmoid":return[r.sigmoid(Ui("x",e,t,n))];case"Sin":return[r.sin(Ui("x",e,t,n))];case"Sign":return[r.sign(Ui("x",e,t,n))];case"Sinh":return[r.sinh(Ui("x",e,t,n))];case"Softplus":return[r.softplus(Ui("x",e,t,n))];case"Sqrt":return[r.sqrt(Ui("x",e,t,n))];case"Square":return[r.square(Ui("x",e,t,n))];case"Tanh":return[r.tanh(Ui("x",e,t,n))];case"Tan":return[r.tan(Ui("x",e,t,n))];case"ClipByValue":return[r.clipByValue(Ui("x",e,t,n),Ui("clipValueMin",e,t,n),Ui("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(Ui("x",e,t,n))];case"Rsqrt":return[r.rsqrt(Ki(e.inputNames[0],t,n))];case"Prod":return[r.prod(Ui("x",e,t,n),Ui("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(Ui("x",e,t,n),Ui("alpha",e,t,n))];case"Prelu":return[r.prelu(Ui("x",e,t,n),Ui("alpha",e,t,n))];case"IsNan":return[r.isNaN(Ki(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=Ui("thenBranch",e,t,n),s=Ui("elseBranch",e,t,n),a=Ui("cond",e,t,n),o=Ui("args",e,t,n);return(await a.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[s].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=Ui("body",e,t,n),s=Ui("cond",e,t,n),a=Ui("args",e,t,n),o=await n.functionMap[s].executeFunctionAsync(a,n.tensorArrayMap,n.tensorListMap),i=a.map(e=>e.id);let u=await o[0].data();o.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()});let p=a;for(;u[0];){const e=p;p=await n.functionMap[r].executeFunctionAsync(p,n.tensorArrayMap,n.tensorListMap);const t=p.map(e=>e.id);e.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const a=await n.functionMap[s].executeFunctionAsync(p,n.tensorArrayMap,n.tensorListMap);u=await a[0].data(),a.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return p}case"LoopCond":return[Gi(Ui("pred",e,t,n))];case"Switch":{const r=Ui("pred",e,t,n);let s=Ui("data",e,t,n);return s.kept||(s=Gi(s)),(await r.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const r=e.inputNames.find(e=>void 0!==Ki(e,t,n));return r?[Gi(Ki(r,t,n))]:void 0}case"Enter":{const r=Ui("frameName",e,t,n),s=Ui("tensor",e,t,n);return n.enterFrame(r),[Gi(s)]}case"Exit":{const r=Ui("tensor",e,t,n);return n.exitFrame(),[Gi(r)]}case"NextIteration":{const r=Ui("tensor",e,t,n);return n.nextIteration(),[Gi(r)]}case"TensorArrayV3":{const r=Ui("size",e,t,n),s=Ui("dtype",e,t,n),a=Ui("elementShape",e,t,n),o=Ui("dynamicSize",e,t,n),i=Ui("clearAfterRead",e,t,n),u=Ui("identicalElementShapes",e,t,n),p=Ui("name",e,t,n),l=new Fu(p,s,r,a,u,o,i);return n.addTensorArray(l),[l.idTensor,Xr(1)]}case"TensorArrayWriteV3":{const r=Ui("tensorArrayId",e,t,n),s=Ui("index",e,t,n),a=Ui("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(s,a),[o.idTensor]}case"TensorArrayReadV3":{const r=Ui("tensorArrayId",e,t,n),s=Ui("index",e,t,n);return[n.getTensorArray(r.id).read(s)]}case"TensorArrayGatherV3":{const r=Ui("tensorArrayId",e,t,n),s=Ui("indices",e,t,n),a=Ui("dtype",e,t,n);return[n.getTensorArray(r.id).gather(s,a)]}case"TensorArrayScatterV3":{const r=Ui("tensorArrayId",e,t,n),s=Ui("indices",e,t,n),a=Ui("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(s,a),[o.idTensor]}case"TensorArrayConcatV3":{const r=Ui("tensorArrayId",e,t,n),s=n.getTensorArray(r.id),a=Ui("dtype",e,t,n);return[s.concat(a)]}case"TensorArraySplitV3":{const r=Ui("tensorArrayId",e,t,n),s=Ui("tensor",e,t,n),a=Ui("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(a,s),[o.idTensor]}case"TensorArraySizeV3":{const r=Ui("tensorArrayId",e,t,n);return[Xr(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=Ui("tensorArrayId",e,t,n),s=n.getTensorArray(r.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const r=Ui("tensorListId",e,t,n),s=Ui("index",e,t,n),a=Ui("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(s,a),[o.idTensor]}case"TensorListGetItem":{const r=Ui("tensorListId",e,t,n),s=Ui("index",e,t,n),a=Ui("elementShape",e,t,n),o=Ui("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(s,a,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=Ui("indices",e,t,n),s=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const s=Math.max(...t);if(null!=r&&-1!==r&&s>=r)throw new Error(`Max index must be < array size (${s}  vs. ${r})`);const a=new Cu([],n,e.dtype,r),o=fo(e,0);return t.forEach((e,t)=>{a.setItem(e,o[t])}),a}(Ui("tensor",e,t,n),r,Ui("elementShape",e,t,n),Ui("numElements",e,t,n));return n.addTensorList(s),[s.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=Ui("elementShape",e,t,n),s=Ui("elementDType",e,t,n);let a;a="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=Ui(a,e,t,n),i=function(e,t,n,r){return new Cu([],e,t,r)}(r,s,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=Ui("tensorListId",e,t,n),s=Ui("indices",e,t,n),a=Ui("elementShape",e,t,n),o=Ui("elementDType",e,t,n);return[n.getTensorList(r.id).gather(s,o,a)]}case"TensorListStack":{const r=Ui("tensorListId",e,t,n),s=Ui("elementShape",e,t,n),a=Ui("elementDType",e,t,n),o=Ui("numElements",e,t,n);return[n.getTensorList(r.id).stack(s,a,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);Au(e.shape.slice(1),t,"TensorList shape mismatch: ");const s=fo(e);return new Cu(s,t,r)}(Ui("tensor",e,t,n),Ui("elementShape",e,t,n),Ui("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=Ui("tensorListId",e,t,n),s=n.getTensorList(r.id),a=Ui("dtype",e,t,n),o=Ui("elementShape",e,t,n);return[s.concat(a,o)]}case"TensorListPushBack":{const r=Ui("tensorListId",e,t,n),s=Ui("tensor",e,t,n),a=n.getTensorList(r.id);return a.pushBack(s),[a.idTensor]}case"TensorListPopBack":{const r=Ui("tensorListId",e,t,n),s=Ui("elementShape",e,t,n),a=Ui("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(s,a)]}case"TensorListSplit":{const r=Ui("tensor",e,t,n),s=Ui("elementShape",e,t,n),a=function(e,t,n){let r=0;const s=t.map(e=>(r+=e,r));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const a=Mu(e.shape.slice(1),n),o=0===r?0:e.size/r,i=xo(()=>{const n=[];e=Zn(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:s[r-1],0],u=[1,t[r],o];n[r]=Zn(sr(e,i,u),a)}return e.dispose(),n}),u=new Cu([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(r,Ui("lengths",e,t,n),s);return n.addTensorList(a),[a.idTensor]}case"TensorListLength":{const r=Ui("tensorListId",e,t,n);return[Xr(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=Ui("tensorListId",e,t,n),s=Ui("size",e,t,n),a=n.getTensorList(r.id).resize(s);return n.addTensorList(a),[a.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"Conv1D":{const s=Ui("stride",e,t,n),a=Ui("pad",e,t,n),o=Ui("dataFormat",e,t,n).toUpperCase(),i=Ui("dilation",e,t,n);return[r.conv1d(Ui("x",e,t,n),Ui("filter",e,t,n),s,a,o,i)]}case"Conv2D":{const s=Ui("strides",e,t,n),a=ji(e,t,n),o=Ui("dataFormat",e,t,n).toUpperCase(),i=Ui("dilations",e,t,n);return[r.conv2d(Ui("x",e,t,n),Ui("filter",e,t,n),[s[1],s[2]],a,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:p,activationFunc:l,leakyreluAlpha:c}=Ru(e,t,n);return[r.fused.conv2d({x:Ui("x",e,t,n),filter:Ui("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:l,preluActivationWeights:p,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:s,pad:a,dataFormat:o,dilations:i,biasArg:u,preluArg:p,activationFunc:l,leakyreluAlpha:c}=Ru(e,t,n);return[r.fused.depthwiseConv2d({x:Ui("x",e,t,n),filter:Ui("filter",e,t,n),strides:[s[1],s[2]],pad:a,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:l,preluActivationWeights:p,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const s=Ui("outputShape",e,t,n),a=Ui("strides",e,t,n),o=ji(e,t,n);return[r.conv2dTranspose(Ui("x",e,t,n),Ui("filter",e,t,n),s,[a[1],a[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const s=Ui("strides",e,t,n),a=ji(e,t,n),o=Ui("dilations",e,t,n),i=Ui("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(Ui("input",e,t,n),Ui("filter",e,t,n),[s[1],s[2]],a,i,[o[1],o[2]])]}case"Conv3D":{const s=Ui("strides",e,t,n),a=Ui("pad",e,t,n),o=Ui("dataFormat",e,t,n).toUpperCase(),i=Ui("dilations",e,t,n);return[r.conv3d(Ui("x",e,t,n),Ui("filter",e,t,n),[s[1],s[2],s[3]],a,o,[i[1],i[2],i[3]])]}case"AvgPool":{const s=Ui("strides",e,t,n),a=Ui("pad",e,t,n),o=Ui("kernelSize",e,t,n);return[r.avgPool(Ui("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPool":{const s=Ui("strides",e,t,n),a=Ui("pad",e,t,n),o=Ui("kernelSize",e,t,n);return[r.maxPool(Ui("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a)]}case"MaxPoolWithArgmax":{const s=Ui("strides",e,t,n),a=Ui("pad",e,t,n),o=Ui("kernelSize",e,t,n),i=Ui("includeBatchInIndex",e,t,n),{result:u,indexes:p}=r.maxPoolWithArgmax(Ui("x",e,t,n),[o[1],o[2]],[s[1],s[2]],a,i);return[u,p]}case"AvgPool3D":{const s=Ui("strides",e,t,n),a=Ui("pad",e,t,n),o=Ui("kernelSize",e,t,n);return[r.avgPool3d(Ui("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"MaxPool3D":{const s=Ui("strides",e,t,n),a=Ui("pad",e,t,n),o=Ui("kernelSize",e,t,n);return[r.maxPool3d(Ui("x",e,t,n),[o[1],o[2],o[3]],[s[1],s[2],s[3]],a)]}case"Dilation2D":{const s=Ui("strides",e,t,n),a=Ui("pad",e,t,n),o=Ui("dilations",e,t,n),i=s[1],u=s[2],p=o[1],l=o[2];return[r.dilation2d(Ui("x",e,t,n),Ui("filter",e,t,n),[i,u],a,[p,l],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"creation":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"Fill":{const s=Ui("shape",e,t,n),a=Ui("dtype",e,t,n),o=Ui("value",e,t,n);return[r.fill(s,o,a)]}case"LinSpace":{const s=Ui("start",e,t,n),a=Ui("stop",e,t,n),o=Ui("num",e,t,n);return[r.linspace(s,a,o)]}case"Multinomial":{const s=Ui("logits",e,t,n),a=Ui("numSamples",e,t,n),o=Ui("seed",e,t,n);return[r.multinomial(s,a,o)]}case"OneHot":{const s=Ui("indices",e,t,n),a=Ui("depth",e,t,n),o=Ui("onValue",e,t,n),i=Ui("offValue",e,t,n),u=Ui("dtype",e,t,n);return[r.oneHot(s,a,o,i,u)]}case"Ones":return[r.ones(Ui("shape",e,t,n),Ui("dtype",e,t,n))];case"OnesLike":return[r.onesLike(Ui("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(Ui("shape",e,t,n),Ui("dtype",e,t,n),Ui("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(Ui("shape",e,t,n),Ui("minval",e,t,n),Ui("maxval",e,t,n),Ui("dtype",e,t,n))];case"Range":{const s=Ui("start",e,t,n),a=Ui("stop",e,t,n),o=Ui("step",e,t,n);return[r.range(s,a,o,Ui("dtype",e,t,n))]}case"TruncatedNormal":{const s=Ui("shape",e,t,n),a=Ui("mean",e,t,n),o=Ui("stdDev",e,t,n),i=Ui("seed",e,t,n);return[r.truncatedNormal(s,a,o,Ui("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(Ui("shape",e,t,n),Ui("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(Ui("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"dynamic":return(async(e,t,n,r,s=v)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:p}=Lu(e,t,n),l=await s.image.nonMaxSuppressionWithScoreAsync(r,a,o,i,u,p);return[l.selectedIndices,l.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=Lu(e,t,n),p=Ui("padToMaxOutputSize",e,t,n),l=await s.image.nonMaxSuppressionPaddedAsync(r,a,o,i,u,p);return[l.selectedIndices,l.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:a,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=Lu(e,t,n);return[await s.image.nonMaxSuppressionAsync(r,a,o,i,u)]}case"Where":{const r=s.cast(Ui("condition",e,t,n),"bool"),a=[await s.whereAsync(r)];return r.dispose(),a}case"ListDiff":return s.setdiff1dAsync(Ui("x",e,t,n),Ui("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"LowerBound":{const s=Ui("sortedSequence",e,t,n),a=Ui("values",e,t,n);return[r.lowerBound(s,a)]}case"TopKV2":{const s=Ui("x",e,t,n),a=Ui("k",e,t,n),o=Ui("sorted",e,t,n),i=r.topk(s,a,o);return[i.values,i.indices]}case"UpperBound":{const s=Ui("sortedSequence",e,t,n),a=Ui("values",e,t,n);return[r.upperBound(s,a)]}case"Unique":{const s=Ui("x",e,t,n),a=r.unique(s);return[a.values,a.indices]}case"UniqueV2":{const s=Ui("x",e,t,n),a=Ui("axis",e,t,n),o=r.unique(s,a);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"image":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"ResizeBilinear":{const s=Ui("images",e,t,n),a=Ui("size",e,t,n),o=Ui("alignCorners",e,t,n),i=Ui("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(s,[a[0],a[1]],o,i)]}case"ResizeNearestNeighbor":{const s=Ui("images",e,t,n),a=Ui("size",e,t,n),o=Ui("alignCorners",e,t,n),i=Ui("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(s,[a[0],a[1]],o,i)]}case"CropAndResize":{const s=Ui("image",e,t,n),a=Ui("boxes",e,t,n),o=Ui("boxInd",e,t,n),i=Ui("cropSize",e,t,n),u=Ui("method",e,t,n),p=Ui("extrapolationValue",e,t,n);return[r.image.cropAndResize(s,a,o,i,u,p)]}case"ImageProjectiveTransformV3":{const s=Ui("images",e,t,n),a=Ui("transforms",e,t,n),o=Ui("outputShape",e,t,n),i=Ui("fillValue",e,t,n),u=Ui("interpolation",e,t,n),p=Ui("fillMode",e,t,n);return[r.image.transform(s,a,u.toLowerCase(),p.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"graph":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const s=Ui("default",e,t,n);return[Ki(e.name,t,n)||s];case"Placeholder":return[Ki(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[Gi(Ui("x",e,t,n))];case"IdentityN":return Ui("x",e,t,n).map(e=>Gi(e));case"Shape":return[r.tensor1d(Ui("x",e,t,n).shape,"int32")];case"ShapeN":return Ui("x",e,t,n).map(e=>r.tensor1d(e.shape));case"Size":return[r.scalar(Ui("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(Ui("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const a=Ui("x",e,t,n),o=Ui("data",e,t,n),i=Ui("message",e,t,n),u=Ui("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[a];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"logical":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"Equal":return[r.equal(Ui("a",e,t,n),Ui("b",e,t,n))];case"NotEqual":return[r.notEqual(Ui("a",e,t,n),Ui("b",e,t,n))];case"Greater":return[r.greater(Ui("a",e,t,n),Ui("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(Ui("a",e,t,n),Ui("b",e,t,n))];case"Less":return[r.less(Ui("a",e,t,n),Ui("b",e,t,n))];case"LessEqual":return[r.lessEqual(Ui("a",e,t,n),Ui("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(Ui("a",e,t,n),Ui("b",e,t,n))];case"LogicalNot":return[r.logicalNot(Ui("a",e,t,n))];case"LogicalOr":return[r.logicalOr(Ui("a",e,t,n),Ui("b",e,t,n))];case"Select":case"SelectV2":return[r.where(Ui("condition",e,t,n),Ui("a",e,t,n),Ui("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"matrices":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(Ui("a",e,t,n),Ui("b",e,t,n),Ui("transposeA",e,t,n),Ui("transposeB",e,t,n))];case"Einsum":return[r.einsum(Ui("equation",e,t,n),...Ui("tensors",e,t,n))];case"Transpose":return[r.transpose(Ui("x",e,t,n),Ui("perm",e,t,n))];case"_FusedMatMul":const[s,a]=Ui("fusedOps",e,t,n),o="biasadd"===s,i="prelu"===a,u=Ui("numArgs",e,t,n),p=Ui("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[l,c]=Ui("args",e,t,n);return[r.fused.matMul({a:Ui("a",e,t,n),b:Ui("b",e,t,n),transposeA:Ui("transposeA",e,t,n),transposeB:Ui("transposeB",e,t,n),bias:l,activation:a,preluActivationWeights:c,leakyreluAlpha:p})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"normalization":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(Ui("x",e,t,n),Ui("axis",e,t,n),Ui("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(Ui("x",e,t,n),Ui("mean",e,t,n),Ui("variance",e,t,n),Ui("offset",e,t,n),Ui("scale",e,t,n),Ui("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(Ui("x",e,t,n),Ui("radius",e,t,n),Ui("bias",e,t,n),Ui("alpha",e,t,n),Ui("beta",e,t,n))];case"Softmax":return[r.softmax(Ui("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(Ui("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(Ui("sparseIndices",e,t,n),Ui("outputShape",e,t,n),Ui("sparseValues",e,t,n),Ui("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"reduction":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"Max":{const s=Ui("axis",e,t,n),a=Ui("keepDims",e,t,n);return[r.max(Ui("x",e,t,n),s,a)]}case"Mean":{const s=Ui("axis",e,t,n),a=Ui("keepDims",e,t,n);return[r.mean(Ui("x",e,t,n),s,a)]}case"Min":{const s=Ui("axis",e,t,n),a=Ui("keepDims",e,t,n);return[r.min(Ui("x",e,t,n),s,a)]}case"Sum":{const s=Ui("axis",e,t,n),a=Ui("keepDims",e,t,n);return[r.sum(Ui("x",e,t,n),s,a)]}case"All":{const s=Ui("axis",e,t,n),a=Ui("keepDims",e,t,n);return[r.all(Ui("x",e,t,n),s,a)]}case"Any":{const s=Ui("axis",e,t,n),a=Ui("keepDims",e,t,n);return[r.any(Ui("x",e,t,n),s,a)]}case"ArgMax":{const s=Ui("axis",e,t,n);return[r.argMax(Ui("x",e,t,n),s)]}case"ArgMin":{const s=Ui("axis",e,t,n);return[r.argMin(Ui("x",e,t,n),s)]}case"Prod":{const s=Ui("axis",e,t,n),a=Ui("keepDims",e,t,n);return[r.prod(Ui("x",e,t,n),s,a)]}case"Cumprod":{const s=Ui("axis",e,t,n),a=Ui("exclusive",e,t,n),o=Ui("reverse",e,t,n);return[r.cumprod(Ui("x",e,t,n),s,a,o)]}case"Cumsum":{const s=Ui("axis",e,t,n),a=Ui("exclusive",e,t,n),o=Ui("reverse",e,t,n);return[r.cumsum(Ui("x",e,t,n),s,a,o)]}case"Bincount":const s=Ui("x",e,t,n),a=Ui("weights",e,t,n),o=Ui("size",e,t,n);return[r.bincount(s,a,o)];case"DenseBincount":{const s=Ui("x",e,t,n),a=Ui("weights",e,t,n),o=Ui("size",e,t,n),i=Ui("binaryOutput",e,t,n);return[r.denseBincount(s,a,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"slice_join":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"ConcatV2":case"Concat":{const s=Ui("n",e,t,n),a=Ui("axis",e,t,n);let o=Ui("tensors",e,t,n);return o=o.slice(0,s),[r.concat(o,a)]}case"Gather":{const s=Ui("x",e,t,n),a=Ui("indices",e,t,n);return[r.gather(s,r.cast(a,"int32"),0)]}case"GatherV2":{const s=Ui("axis",e,t,n),a=Ui("batchDims",e,t,n),o=Ui("x",e,t,n),i=Ui("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),s,a)]}case"Reverse":{const s=Ui("dims",e,t,n),a=[];for(let e=0;e<s.length;e++)s[e]&&a.push(e);const o=Ui("x",e,t,n);return[r.reverse(o,a)]}case"ReverseV2":{const s=Ui("axis",e,t,n),a=Ui("x",e,t,n);return[r.reverse(a,s)]}case"Slice":{const s=Ui("begin",e,t,n),a=Ui("size",e,t,n);return[r.slice(Ui("x",e,t,n),s,a)]}case"StridedSlice":{const s=Ui("begin",e,t,n),a=Ui("end",e,t,n),o=Ui("strides",e,t,n),i=Ui("beginMask",e,t,n),u=Ui("endMask",e,t,n),p=Ui("ellipsisMask",e,t,n),l=Ui("newAxisMask",e,t,n),c=Ui("shrinkAxisMask",e,t,n),h=Ui("x",e,t,n);return[r.stridedSlice(h,s,a,o,i,u,p,l,c)]}case"Pack":return xo(()=>{const s=Ui("axis",e,t,n),a=Ui("tensors",e,t,n),o=a[0].shape,i=r.squeeze(a[0]).shape,u=a.map(e=>{const t=A(e.shape,o);if(!t&&!A(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)});return[r.stack(u,s)]});case"Unpack":{const s=Ui("axis",e,t,n),a=Ui("tensor",e,t,n);return r.unstack(a,s)}case"Tile":{const s=Ui("reps",e,t,n);return[r.tile(Ui("x",e,t,n),s)]}case"Split":case"SplitV":{const s=Ui("axis",e,t,n),a=Ui("numOrSizeSplits",e,t,n),o=Ui("x",e,t,n);return r.split(o,a,s)}case"ScatterNd":{const s=Ui("indices",e,t,n),a=Ui("values",e,t,n),o=Ui("shape",e,t,n);return[r.scatterND(s,a,o)]}case"GatherNd":{const s=Ui("x",e,t,n),a=Ui("indices",e,t,n);return[r.gatherND(s,a)]}case"SparseToDense":{const s=Ui("sparseIndices",e,t,n),a=Ui("outputShape",e,t,n),o=Ui("sparseValues",e,t,n),i=Ui("defaultValue",e,t,n);return[r.sparseToDense(s,o,a,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"sparse":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:s,outputValues:a,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(Ui("indices",e,t,n),Ui("values",e,t,n),Ui("denseShape",e,t,n),Ui("defaultValue",e,t,n));return[s,a,o,i]}case"SparseReshape":{const{outputIndices:s,outputShape:a}=r.sparse.sparseReshape(Ui("inputIndices",e,t,n),Ui("inputShape",e,t,n),Ui("newShape",e,t,n));return[s,a]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(Ui("data",e,t,n),Ui("indices",e,t,n),Ui("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(Ui("data",e,t,n),Ui("indices",e,t,n),Ui("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"spectral":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"FFT":return[r.fft(Ui("x",e,t,n))];case"IFFT":return[r.ifft(Ui("x",e,t,n))];case"RFFT":return[r.rfft(Ui("x",e,t,n))];case"IRFFT":return[r.irfft(Ui("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"string":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"StringNGrams":{const{nGrams:s,nGramsSplits:a}=r.string.stringNGrams(Ui("data",e,t,n),Ui("dataSplits",e,t,n),Ui("separator",e,t,n),Ui("nGramWidths",e,t,n),Ui("leftPad",e,t,n),Ui("rightPad",e,t,n),Ui("padWidth",e,t,n),Ui("preserveShortSequences",e,t,n));return[s,a]}case"StringSplit":{const{indices:s,values:a,shape:o}=r.string.stringSplit(Ui("input",e,t,n),Ui("delimiter",e,t,n),Ui("skipEmpty",e,t,n));return[s,a,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(Ui("input",e,t,n),Ui("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"transformation":return s(()=>((e,t,n,r=v)=>{switch(e.op){case"Cast":return[r.cast(Ui("x",e,t,n),Ui("dtype",e,t,n))];case"ExpandDims":{const s=Ui("axis",e,t,n);return[r.expandDims(Ui("x",e,t,n),s)]}case"Squeeze":{const s=Ui("axis",e,t,n);return[r.squeeze(Ui("x",e,t,n),s)]}case"Reshape":return[r.reshape(Ui("x",e,t,n),Ui("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(Ui("x",e,t,n),Ui("padding",e,t,n),Ui("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(Ui("x",e,t,n),Ui("padding",e,t,n),Ui("constantValue",e,t,n))];case"SpaceToBatchND":{const s=Ui("blockShape",e,t,n),a=Ui("paddings",e,t,n);return[r.spaceToBatchND(Ui("x",e,t,n),s,a)]}case"BatchToSpaceND":{const s=Ui("blockShape",e,t,n),a=Ui("crops",e,t,n);return[r.batchToSpaceND(Ui("x",e,t,n),s,a)]}case"DepthToSpace":{const s=Ui("blockSize",e,t,n),a=Ui("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(Ui("x",e,t,n),s,a)]}case"BroadcastTo":return[r.broadcastTo(Ui("x",e,t,n),Ui("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(Ui("s0",e,t,n),Ui("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const s=Ui("keyDType",e,t,n),a=Ui("valueDType",e,t,n),o=new Bu(s,a);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=Ui("tableHandle",e,t,n,r),a=Ui("keys",e,t,n),o=Ui("values",e,t,n),i=r.getHashTableById(s.id);return[await i.import(a,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=Ui("tableHandle",e,t,n,r),a=Ui("keys",e,t,n),o=Ui("defaultValue",e,t,n),i=r.getHashTableById(s.id);return[await i.find(a,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=Ui("tableHandle",e,t,n,r);return[r.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const a=Vi(e.op);if(a&&a.customExecutor)return a.customExecutor(new $u(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return W(a)?a.then(e=>[].concat(e)):[].concat(a)}class Pu{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Vu(e,t,n,r){const s=new Set,a=[];let o=null,i=null;const u=new Set,p=Object.keys(e).map(e=>Hi(e)[0]);let l=[];null!=r&&(l=r.map(e=>Hi(e.name)[0]));const c=[...t];for(;c.length>0;){const e=c.pop();(Wu(e)||Hu(e)||ju(e))&&null==o&&(o=e,i=o.children.map(e=>e.name).filter(e=>s.has(e))),s.add(e.name),null==n[e.name]&&-1===p.indexOf(e.name)&&-1===l.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach(e=>{u.has(e.name)||(u.add(e.name),c.push(e))}):a.push(e.name))}return{inputs:e,outputs:t,usedNodes:s,missingInputs:a,dynamicNode:o,syncInputs:i}}const Uu=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Ku=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],qu=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Wu(e){return Uu.indexOf(e.op)>=0}function Hu(e){return Ku.indexOf(e.op)>=0}function ju(e){return qu.indexOf(e.op)>=0}class Gu{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new Gu(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Vu(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:s,syncInputs:a}=n;if(null!=s)throw new Error(`This execution contains the node '${s.name}', which has the dynamic op '${s.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${a}]`);if(r.length>0){const n=t.map(e=>e.name),s=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${s}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:s}=n,a=[],o=Object.keys(s).map(e=>Hi(e)[0]).map(t=>e.nodes[t]),i=e.initNodes;o.forEach(e=>{r.has(e.name)&&a.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&a.push(e)}),null!=i&&i.forEach(e=>{r.has(e.name)&&a.push(e)});const u=new Set,p=[];for(;a.length>0;){const e=a.pop();u.add(e.name),t[e.name]||p.push(e),e.children.forEach(e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>u.has(e.name))&&a.push(e)})}return p}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map(e=>this.graph.nodes[Hi(e)[0]]),s=t.map(e=>Hi(e)[0]);let a=s.map(e=>this.graph.nodes[e]);this.resetIntermediateTensors(),0===a.length&&(a=this._outputs);const o=this.getCompilationKey(r,a);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,a),this.compiledMap.set(o,i));const u={},p={};return xo(()=>{const n=new Pu(this.weightMap,u,p,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,s]=Hi(t),a=[];a[s]=e[t],r[n]=a});const a=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=zu(t,r,n,this._resourceManager);if(W(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,a,s,o)}}return null==this.parent&&n.dispose(a),t.map(e=>Ki(e,r,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,s,a,o){"control"!==t.category&&-1===a.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){const a=function(e,t,n){return t[Wi(e,n.currentContextId)]}(e.name,n,r);null!=a&&a.forEach(e=>{if(e&&!e.kept&&!s.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,s]=qi(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][s]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach(e=>this.intermediateTensors[e].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach(e=>{this.tensorsMap[e].forEach(e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach(e=>e.dispose()),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},s={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=J().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const a=new Pu(this.weightMap,r,s,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,a,t,n);const o=t.map(e=>Ki(e,this.tensorsMap,a)),i=o.map(e=>e.id),u=Object.keys(e).map(t=>e[t].id);return this.keepIds=new Set([...i,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&a.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const s=Object.keys(e),a=s.map(e=>this.graph.nodes[Hi(e)[0]]),o=n.map(e=>Hi(e)[0]);let i=o.map(e=>this.graph.nodes[e]);0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:p,dynamicNode:l,syncInputs:c}=Vu(e,i,this.weightMap,this._initNodes),h=[...a,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),d=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=Hi(t),s=[];s[r]=e[t],d[n]=s});const m={},f=this.getFrozenTensorIds(d),y={};for(;h.length>0;){const e=this.processStack(a,h,t,d,y,f,o,m,u);await Promise.all(e)}null!=l||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const g=i.filter(e=>!Wu(e)&&!Ki(e.name,d,t)).map(e=>e.name);if(g.length>0){let e="";throw null!=l&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${g}] from the provided inputs [${s}]. Consider providing the following inputs: [${p}]. ${e}`)}return d}processStack(e,t,n,r,s,a,o,i,u){const p=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let l="";if("Enter"===e.node.op&&Ui("isConstant",e.node,r,n)&&([l]=qi(e.node.name,n)),null==r[e.node.name]){const c=zu(e.node,r,n,this._resourceManager);l||([l]=qi(e.node.name,n));const h=n.currentContext;W(c)?p.push(c.then(p=>(r[l]=p,n.currentContext=h,this.checkTensorForDisposal(l,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u),p))):(r[l]=c,this.checkTensorForDisposal(l,e.node,r,n,a,o,i),this.processChildNodes(e.node,t,n,r,s,u))}else this.processChildNodes(e.node,t,n,r,s,u)}return p}processChildNodes(e,t,n,r,s,a){e.children.forEach(e=>{const[o]=qi(e.name,n);!s[o]&&a.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!Ki(e,r,n))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!Ki(e,r,n))&&(s[o]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const n=e[t],[r]=Hi(t),s=this.graph.nodes[r];if(s.attrParams.shape&&s.attrParams.shape.value){const e=s.attrParams.shape.value;S(e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t),()=>`The shape of dict['${s.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}s.attrParams.dtype&&s.attrParams.dtype.value&&S(n.dtype===s.attrParams.dtype.value,()=>`The dtype of dict['${s.name}'] provided in model.execute(dict) must be ${s.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=Hi(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e,{})}checkOutputs(e){e.forEach(e=>{const[t]=Hi(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class Ju{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Yu{constructor(t,n={},r=e){this.modelUrl=t,this.loadOptions=n,this.version="n/a",this.io=r,null==n&&(this.loadOptions={}),this.resourceManager=new Ju}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return W(e)?e.then(e=>this.loadSync(e)):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new Gu(mu.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=mu.Instance.transformGraph(e.modelInitializer);this.initializer=new Gu(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof Fe?[n]:n).forEach((t,n)=>e[this.structuredOutputKeys[n]]=t),e}return n}normalizeInputs(e){if(!(e instanceof Fe||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,n,r)=>(t[n]=e[r],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Zu(t,n={},r=e){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==n&&(n={}),n.fromTFHub&&"string"==typeof t&&(t=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(t));const s=new Yu(t,n,r);return await s.load(),s}function Qu(e,t,n,r){return new(n||(n=Promise))(function(s,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function i(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,i)}u((r=r.apply(e,t||[])).next())})}function Xu(e,t){var n,r,s,a,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return a={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function i(a){return function(i){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&a[0]?r.return:a[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,a[1])).done)return s;switch(r=0,s&&(a=[2&a[0],s.value]),a[0]){case 0:case 1:s=a;break;case 4:return o.label++,{value:a[1],done:!1};case 5:o.label++,r=a[1],a=[0];continue;case 7:a=o.ops.pop(),o.trys.pop();continue;default:if(!(s=(s=o.trys).length>0&&s[s.length-1])&&(6===a[0]||2===a[0])){o=0;continue}if(3===a[0]&&(!s||a[1]>s[0]&&a[1]<s[3])){o.label=a[1];break}if(6===a[0]&&o.label<s[1]){o.label=s[1],s=a;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(a);break}s[2]&&o.ops.pop(),o.trys.pop();continue}a=t.call(e,o)}catch(e){a=[6,e],r=0}finally{n=s=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,i])}}}var ep=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var s=r[n];t.push(s)}return t},tp=function(){this.parent=null,this.children={},this.end=!1,this.word=[[],0,0]},np=function(){function e(){this.root=new tp}return e.prototype.insert=function(e,t,n){for(var r=this.root,s=ep(e),a=0;a<s.length;a++)r.children[s[a]]||(r.children[s[a]]=new tp,r.children[s[a]].parent=r,r.children[s[a]].word[0]=r.word[0].concat(s[a])),r=r.children[s[a]],a===s.length-1&&(r.end=!0,r.word[1]=t,r.word[2]=n)},e.prototype.commonPrefixSearch=function(e){for(var t=[],n=this.root.children[e[0]],r=0;r<e.length&&n;r++)n.end&&t.push(n.word),n=n.children[e[r+1]];return t.length||t.push([[e[0]],0,0]),t},e}(),rp=function(){function e(e,t){void 0===t&&(t=6),this.vocabulary=e,this.reservedSymbolsCount=t,this.trie=new np;for(var n=this.reservedSymbolsCount;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n)}return e.prototype.encode=function(e){var t=[],n=[],r=[];e=function(e){var t=e.normalize("NFKC");return t.length>0?"▁"+t.replace(/ /g,"▁"):t}(e);for(var s=ep(e),a=0;a<=s.length;a++)t.push({}),n.push(0),r.push(0);for(a=0;a<s.length;a++)for(var o=this.trie.commonPrefixSearch(s.slice(a)),i=0;i<o.length;i++){var u=o[i],p={key:u[0],score:u[1],index:u[2]};null==t[a+(l=u[0].length)][a]&&(t[a+l][a]=[]),t[a+l][a].push(p)}for(var l=0;l<=s.length;l++)for(var c in t[l]){var h=t[l][c];for(i=0;i<h.length;i++){var d=h[i],m=d.score+r[l-d.key.length];(0===r[l]||m>=r[l])&&(r[l]=m,n[l]=h[i].index)}}for(var f=[],y=n.length-1;y>0;)f.push(n[y]),y-=this.vocabulary[n[y]][0].length;var g=[],b=!1;for(a=0;a<f.length;a++){var w=f[a];b&&0===w||g.push(w),b=0===w}return g.reverse()},e}();function sp(e){return Qu(this,void 0,void 0,function(){return Xu(this,function(t){switch(t.label){case 0:return[4,(n=e,J().platform.fetch(n,undefined))];case 1:return[2,t.sent().json()]}var n})})}var ap="https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1",op=[0,1,2],ip=192;!function(){function e(){}e.prototype.loadModel=function(){return Qu(this,void 0,void 0,function(){return Xu(this,function(e){return[2,Zu(ap,{fromTFHub:!0})]})})},e.prototype.load=function(){return Qu(this,void 0,void 0,function(){var e,t,n;return Xu(this,function(r){switch(r.label){case 0:return[4,Promise.all([this.loadModel(),sp(ap+"/vocab.json?tfjs-format=file")])];case 1:return e=r.sent(),t=e[0],n=e[1],this.model=t,this.tokenizer=new rp(n,3),[2]}})})},e.prototype.embed=function(e){var t=this,n=xo(function(){var n=t.tokenizeStrings(e.queries,ip),r=t.tokenizeStrings(e.responses,ip);if(null!=e.contexts&&e.contexts.length!==e.responses.length)throw new Error("The length of response strings and context strings need to match.");var s=e.contexts||[];null==e.contexts&&(s.length=e.responses.length,s.fill(""));var a=t.tokenizeStrings(s,ip),o={};return o.input_inp_text=n,o.input_res_text=r,o.input_res_context=a,t.model.execute(o,["Final/EncodeQuery/mul","Final/EncodeResult/mul"])});return{queryEmbedding:n[0],responseEmbedding:n[1]}},e.prototype.tokenizeStrings=function(e,t){var n=this;return ao(e.map(function(e){return n.shiftTokens(n.tokenizer.encode(e),ip)}),[e.length,ip],"int32")},e.prototype.shiftTokens=function(e,t){e.unshift(1);for(var n=0;n<t;n++)n>=e.length?e[n]=2:op.includes(e[n])||(e[n]+=3);return e.slice(0,t)}}();var up=function(){function e(){}return e.prototype.loadModel=function(e){return Qu(this,void 0,void 0,function(){return Xu(this,function(t){return[2,e?Zu(e):Zu("https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1",{fromTFHub:!0})]})})},e.prototype.load=function(e){return void 0===e&&(e={}),Qu(this,void 0,void 0,function(){var t,n,r;return Xu(this,function(s){switch(s.label){case 0:return[4,Promise.all([this.loadModel(e.modelUrl),sp(e.vocabUrl||"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/vocab.json")])];case 1:return t=s.sent(),n=t[0],r=t[1],this.model=n,this.tokenizer=new rp(r),[2]}})})},e.prototype.embed=function(e){return Qu(this,void 0,void 0,function(){var t,n,r,s,a,o,i,u,p=this;return Xu(this,function(l){switch(l.label){case 0:for("string"==typeof e&&(e=[e]),t=e.map(function(e){return p.tokenizer.encode(e)}),n=t.map(function(e,t){return e.map(function(e,n){return[t,n]})}),r=[],s=0;s<n.length;s++)r=r.concat(n[s]);return a=ao(r,[r.length,2],"int32"),o=so(I(t),"int32"),i={indices:a,values:o},[4,this.model.executeAsync(i)];case 1:return u=l.sent(),a.dispose(),o.dispose(),[2,u]}})})},e}(),pp=function(e,t,n,r){return new(n||(n=Promise))(function(s,a){function o(e){try{u(r.next(e))}catch(e){a(e)}}function i(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?s(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,i)}u((r=r.apply(e,t||[])).next())})};const lp=function(){return Qu(this,void 0,void 0,function(){var e;return Xu(this,function(t){switch(t.label){case 0:return[4,(e=new up).load(undefined)];case 1:return t.sent(),[2,e]}})})}();chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"find-sources",title:"Find Sources with VerifyIT",contexts:["selection"]})}),chrome.contextMenus.onClicked.addListener(e=>{if("find-sources"===e.menuItemId&&e.selectionText){const t=chrome.runtime.getURL(`frontend/popup.html?text=${encodeURIComponent(e.selectionText)}`);chrome.windows.create({url:t,type:"popup",width:350,height:410})}}),chrome.runtime.onMessage.addListener((e,t,n)=>"RANK"===e.type&&(function(e,t){return pp(this,void 0,void 0,function*(){return function(e,t){return pp(this,void 0,void 0,function*(){const n=yield lp,r=[e,...t.map(e=>`${e.title} ${e.snippet}`)],s=yield n.embed(r),a=yield s.array();s.dispose();const o=a[0],i=a.slice(1),u=Math.hypot(...o),p=i.map((e,n)=>{let r=0;for(let t=0;t<e.length;t++)r+=e[t]*o[t];const s=r/(Math.hypot(...e)*u);return Object.assign(Object.assign({},t[n]),{score:s})});return p.sort((e,t)=>t.score-e.score).slice(0,3)})}(e,t)})}(e.query,e.articles).then(e=>{n(e)}),!0)),chrome.commands.onCommand.addListener(e=>{"reload-extension"===e&&chrome.runtime.reload()})})()})();