/*! For license information please see background.js.LICENSE.txt */
(()=>{var e={31:function(e,t,n){var r;!function(e,a){function s(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function i(e,t){var n=new s(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,a))||(a.exports=r):this.xorwow=i}(0,e=n.nmd(e),n.amdD)},67:function(e,t,n){var r;!function(e,a){function s(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function o(e,t){return t.x=e.x.slice(),t.i=e.i,t}function i(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.x&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,a))||(a.exports=r):this.xorshift7=i}(0,e=n.nmd(e),n.amdD)},180:function(e,t,n){var r;!function(e,a){function s(e){var t,n=this,r=(t=4022871197,function(e){e=String(e);for(var n=0;n<e.length;n++){var r=.02519603282416938*(t+=e.charCodeAt(n));r-=t=r>>>0,t=(r*=t)>>>0,t+=4294967296*(r-=t)}return 2.3283064365386963e-10*(t>>>0)});n.next=function(){var e=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=e-(n.c=0|e)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(e),n.s0<0&&(n.s0+=1),n.s1-=r(e),n.s1<0&&(n.s1+=1),n.s2-=r(e),n.s2<0&&(n.s2+=1),r=null}function o(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function i(e,t){var n=new s(e),r=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,a))||(a.exports=r):this.alea=i}(0,e=n.nmd(e),n.amdD)},181:function(e,t,n){var r;!function(e,a){function s(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function i(e,t){var n=new s(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,a))||(a.exports=r):this.xor128=i}(0,e=n.nmd(e),n.amdD)},234:()=>{},391:(e,t,n)=>{var r=n(180),a=n(181),s=n(31),o=n(67),i=n(833),u=n(717),l=n(801);l.alea=r,l.xor128=a,l.xorwow=s,l.xorshift7=o,l.xor4096=i,l.tychei=u,e.exports=l},570:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(e){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var a={},s={};function o(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=u(e,(0|e)<0?-1:0,!0),o&&(s[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=a[e])?r:(n=u(e,e<0?-1:0,!1),o&&(a[e]=n),n)}function i(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=h)return x}else{if(e<=-f)return v;if(e+1>=f)return N}return e<0?i(-e,t).neg():u(e%d|0,e/d|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=o,n.fromNumber=i,n.fromBits=u;var l=Math.pow;function p(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"==typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return p(e.substring(1),t,n).neg();for(var a=i(l(n,8)),s=g,o=0;o<e.length;o+=8){var u=Math.min(8,e.length-o),c=parseInt(e.substring(o,o+u),n);if(u<8){var d=i(l(n,u));s=s.mul(d).add(i(c))}else s=(s=s.mul(a)).add(i(c))}return s.unsigned=t,s}function c(e,t){return"number"==typeof e?i(e,t):"string"==typeof e?p(e,t):u(e.low,e.high,"boolean"==typeof t?t:e.unsigned)}n.fromString=p,n.fromValue=c;var d=4294967296,h=d*d,f=h/2,m=o(1<<24),g=o(0);n.ZERO=g;var y=o(0,!0);n.UZERO=y;var b=o(1);n.ONE=b;var k=o(1,!0);n.UONE=k;var w=o(-1);n.NEG_ONE=w;var N=u(-1,2147483647,!1);n.MAX_VALUE=N;var x=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=x;var v=u(0,-2147483648,!1);n.MIN_VALUE=v;var T=n.prototype;T.toInt=function(){return this.unsigned?this.low>>>0:this.low},T.toNumber=function(){return this.unsigned?(this.high>>>0)*d+(this.low>>>0):this.high*d+(this.low>>>0)},T.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(v)){var t=i(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=i(l(e,6),this.unsigned),s=this,o="";;){var u=s.div(a),p=(s.sub(u.mul(a)).toInt()>>>0).toString(e);if((s=u).isZero())return p+o;for(;p.length<6;)p="0"+p;o=""+p+o}},T.getHighBits=function(){return this.high},T.getHighBitsUnsigned=function(){return this.high>>>0},T.getLowBits=function(){return this.low},T.getLowBitsUnsigned=function(){return this.low>>>0},T.getNumBitsAbs=function(){if(this.isNegative())return this.eq(v)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&!(e&1<<t);t--);return 0!=this.high?t+33:t+1},T.isZero=function(){return 0===this.high&&0===this.low},T.eqz=T.isZero,T.isNegative=function(){return!this.unsigned&&this.high<0},T.isPositive=function(){return this.unsigned||this.high>=0},T.isOdd=function(){return!(1&~this.low)},T.isEven=function(){return!(1&this.low)},T.equals=function(e){return r(e)||(e=c(e)),(this.unsigned===e.unsigned||this.high>>>31!=1||e.high>>>31!=1)&&this.high===e.high&&this.low===e.low},T.eq=T.equals,T.notEquals=function(e){return!this.eq(e)},T.neq=T.notEquals,T.ne=T.notEquals,T.lessThan=function(e){return this.comp(e)<0},T.lt=T.lessThan,T.lessThanOrEqual=function(e){return this.comp(e)<=0},T.lte=T.lessThanOrEqual,T.le=T.lessThanOrEqual,T.greaterThan=function(e){return this.comp(e)>0},T.gt=T.greaterThan,T.greaterThanOrEqual=function(e){return this.comp(e)>=0},T.gte=T.greaterThanOrEqual,T.ge=T.greaterThanOrEqual,T.compare=function(e){if(r(e)||(e=c(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},T.comp=T.compare,T.negate=function(){return!this.unsigned&&this.eq(v)?v:this.not().add(b)},T.neg=T.negate,T.add=function(e){r(e)||(e=c(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,s=65535&this.low,o=e.high>>>16,i=65535&e.high,l=e.low>>>16,p=0,d=0,h=0,f=0;return h+=(f+=s+(65535&e.low))>>>16,d+=(h+=a+l)>>>16,p+=(d+=n+i)>>>16,p+=t+o,u((h&=65535)<<16|(f&=65535),(p&=65535)<<16|(d&=65535),this.unsigned)},T.subtract=function(e){return r(e)||(e=c(e)),this.add(e.neg())},T.sub=T.subtract,T.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=c(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(v))return e.isOdd()?v:g;if(e.eq(v))return this.isOdd()?v:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return i(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,a=65535&this.high,s=this.low>>>16,o=65535&this.low,l=e.high>>>16,p=65535&e.high,d=e.low>>>16,h=65535&e.low,f=0,y=0,b=0,k=0;return b+=(k+=o*h)>>>16,y+=(b+=s*h)>>>16,b&=65535,y+=(b+=o*d)>>>16,f+=(y+=a*h)>>>16,y&=65535,f+=(y+=s*d)>>>16,y&=65535,f+=(y+=o*p)>>>16,f+=n*h+a*d+s*p+o*l,u((b&=65535)<<16|(k&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},T.mul=T.multiply,T.divide=function(e){if(r(e)||(e=c(e)),e.isZero())throw Error("division by zero");var n,a,s;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return k;s=y}else{if(this.eq(v))return e.eq(b)||e.eq(w)?v:e.eq(v)?b:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?b:w:(a=this.sub(e.mul(n)),s=n.add(a.div(e)));if(e.eq(v))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=g}for(a=this;a.gte(e);){n=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),p=o<=48?1:l(2,o-48),d=i(n),h=d.mul(e);h.isNegative()||h.gt(a);)h=(d=i(n-=p,this.unsigned)).mul(e);d.isZero()&&(d=b),s=s.add(d),a=a.sub(h)}return s},T.div=T.divide,T.modulo=function(e){return r(e)||(e=c(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},T.mod=T.modulo,T.rem=T.modulo,T.not=function(){return u(~this.low,~this.high,this.unsigned)},T.and=function(e){return r(e)||(e=c(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},T.or=function(e){return r(e)||(e=c(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},T.xor=function(e){return r(e)||(e=c(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},T.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},T.shl=T.shiftLeft,T.shiftRight=function(e){return r(e)&&(e=e.toInt()),0==(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},T.shr=T.shiftRight,T.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0==(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},T.shru=T.shiftRightUnsigned,T.shr_u=T.shiftRightUnsigned,T.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},T.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},T.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},T.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},T.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},590:()=>{},717:function(e,t,n){var r;!function(e,a){function s(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function o(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function i(e,t){var n=new s(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,a))||(a.exports=r):this.tychei=i}(0,e=n.nmd(e),n.amdD)},801:function(e,t,n){var r;!function(a,s,o){var i,u=256,l=o.pow(u,6),p=o.pow(2,52),c=2*p,d=255;function h(e,t,n){var r=[],d=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,b(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(a.crypto||a.msCrypto).getRandomValues(e)),b(e)}catch(e){var t=a.navigator,n=t&&t.plugins;return[+new Date,a,n,a.screen,b(s)]}}():e,3),r),h=new f(r),k=function(){for(var e=h.g(6),t=l,n=0;e<p;)e=(e+n)*u,t*=u,n=h.g(1);for(;e>=c;)e/=2,t/=2,n>>>=1;return(e+n)/t};return k.int32=function(){return 0|h.g(4)},k.quick=function(){return h.g(4)/4294967296},k.double=k,y(b(h.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,h),e.state=function(){return m(h,{})}),n?(o.random=e,t):e})(k,d,"global"in t?t.global:this==o,t.state)}function f(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);a<u;)o[a]=a++;for(a=0;a<u;a++)o[a]=o[s=d&s+e[a%n]+(t=o[a])],o[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,o=r.S;e--;)t=o[a=d&a+1],n=n*u+o[d&(o[a]=o[s=d&s+t])+(o[s]=t)];return r.i=a,r.j=s,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(g(e[n],t-1))}catch(e){}return r.length?r:"string"==a?e:e+"\0"}function y(e,t){for(var n,r=e+"",a=0;a<r.length;)t[d&a]=d&(n^=19*t[d&a])+r.charCodeAt(a++);return b(t)}function b(e){return String.fromCharCode.apply(0,e)}if(y(o.random(),s),e.exports){e.exports=h;try{i=n(234)}catch(e){}}else void 0===(r=function(){return h}.call(t,n,t,e))||(e.exports=r)}("undefined"!=typeof self?self:this,[],Math)},817:()=>{},833:function(e,t,n){var r;!function(e,a){function s(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),a=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function o(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function i(e,t){null==e&&(e=+new Date);var n=new s(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.X&&o(r,n),a.state=function(){return o(n,{})}),a}a&&a.exports?a.exports=i:n.amdD&&n.amdO?void 0===(r=function(){return i}.call(t,n,t,a))||(a.exports=r):this.xor4096=i}(0,e=n.nmd(e),n.amdD)}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var s=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.loaded=!0,s.exports}n.amdD=function(){throw new Error("define cannot be used indirect")},n.amdO={},n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e={};n.r(e),n.d(e,{browserFiles:()=>hs,browserHTTPRequest:()=>xs,concatenateArrayBuffers:()=>ga,copyModel:()=>ns,decodeWeights:()=>da,encodeWeights:()=>ca,fromMemory:()=>Ss,fromMemorySync:()=>Es,getLoadHandlers:()=>_a,getModelArtifactsForJSON:()=>wa,getModelArtifactsForJSONSync:()=>ka,getModelArtifactsInfoForJSON:()=>Na,getSaveHandlers:()=>Ea,getWeightSpecs:()=>xa,http:()=>Ns,isHTTPScheme:()=>ks,listModels:()=>es,loadWeights:()=>gs,moveModel:()=>rs,registerLoadRouter:()=>Sa,registerSaveRouter:()=>Ia,removeModel:()=>ts,weightsLoaderFactory:()=>ys,withSaveHandler:()=>_s,withSaveHandlerSync:()=>Ms});var t={};n.r(t),n.d(t,{conv2d:()=>tp,depthwiseConv2d:()=>ap,matMul:()=>sp});var r={};n.r(r),n.d(r,{json:()=>vy});var a={};n.r(a),n.d(a,{json:()=>Ty});var s={};n.r(s),n.d(s,{json:()=>Iy});var o={};n.r(o),n.d(o,{json:()=>Sy});var i={};n.r(i),n.d(i,{json:()=>Ey});var u={};n.r(u),n.d(u,{json:()=>_y});var l={};n.r(l),n.d(l,{json:()=>My});var p={};n.r(p),n.d(p,{json:()=>$y});var c={};n.r(c),n.d(c,{json:()=>Ay});var d={};n.r(d),n.d(d,{json:()=>Dy});var h={};n.r(h),n.d(h,{json:()=>Fy});var f={};n.r(f),n.d(f,{json:()=>Oy});var m={};n.r(m),n.d(m,{json:()=>Ry});var g={};n.r(g),n.d(g,{json:()=>Cy});var y={};n.r(y),n.d(y,{json:()=>zy});var b={};n.r(b),n.d(b,{json:()=>Ly});var k={};n.r(k),n.d(k,{json:()=>By});var w={};n.r(w),n.d(w,{json:()=>Py});var N={};n.r(N),n.d(N,{json:()=>Vy});var x={};n.r(x),n.d(x,{OP_SCOPE_SUFFIX:()=>aa,abs:()=>Fs,acos:()=>Os,acosh:()=>Rs,add:()=>Cs,addN:()=>zs,all:()=>Ls,any:()=>Bs,argMax:()=>Ps,argMin:()=>Vs,asin:()=>Ws,asinh:()=>Hs,atan:()=>Us,atan2:()=>qs,atanh:()=>Ks,avgPool:()=>uo,avgPool3d:()=>lo,basicLSTMCell:()=>yo,batchNorm:()=>ko,batchNorm2d:()=>wo,batchNorm3d:()=>No,batchNorm4d:()=>xo,batchToSpaceND:()=>bo,bincount:()=>vo,booleanMaskAsync:()=>Rl,broadcastArgs:()=>To,broadcastTo:()=>Io,buffer:()=>os,cast:()=>is,ceil:()=>So,clipByValue:()=>_o,clone:()=>us,complex:()=>oa,concat:()=>po,concat1d:()=>Mo,concat2d:()=>$o,concat3d:()=>Ao,concat4d:()=>Do,conv1d:()=>Oo,conv2d:()=>Fo,conv2dTranspose:()=>Co,conv3d:()=>zo,conv3dTranspose:()=>Bo,cos:()=>Po,cosh:()=>Vo,cosineWindow:()=>Gl,cumprod:()=>Wo,cumsum:()=>Ho,denseBincount:()=>Uo,depthToSpace:()=>qo,depthwiseConv2d:()=>Ko,diag:()=>jo,dilation2d:()=>Go,div:()=>Jo,divNoNan:()=>ei,dot:()=>ti,dropout:()=>Kl,einsum:()=>ni,elu:()=>ri,enclosingPowerOfTwo:()=>jl,equal:()=>Yo,erf:()=>ai,euclideanNorm:()=>Ni,exp:()=>xi,expandDims:()=>vi,expm1:()=>Ti,eye:()=>Si,fft:()=>ll,fill:()=>Eo,floor:()=>Ei,floorDiv:()=>Zo,fused:()=>t,gather:()=>_i,gatherND:()=>ql,greater:()=>Mi,greaterEqual:()=>$i,ifft:()=>pl,imag:()=>Ai,image:()=>ec,inTopKAsync:()=>Zl,irfft:()=>cl,isFinite:()=>Di,isInf:()=>Fi,isNaN:()=>Oi,leakyRelu:()=>Ri,less:()=>Ci,lessEqual:()=>zi,linalg:()=>tc,linspace:()=>Li,localResponseNormalization:()=>Bi,log:()=>Pi,log1p:()=>Vi,logSigmoid:()=>qi,logSoftmax:()=>ji,logSumExp:()=>Gi,logicalAnd:()=>Zi,logicalNot:()=>Ji,logicalOr:()=>Yi,logicalXor:()=>Qi,losses:()=>nc,lowerBound:()=>tu,matMul:()=>co,max:()=>di,maxPool:()=>nu,maxPool3d:()=>ru,maxPoolWithArgmax:()=>au,maximum:()=>su,mean:()=>ou,meshgrid:()=>lu,min:()=>hi,minimum:()=>pu,mirrorPad:()=>cu,mod:()=>du,moments:()=>hu,movingAverage:()=>Vl,mul:()=>ho,multiRNNCell:()=>fu,multinomial:()=>mu,neg:()=>Hi,norm:()=>wi,notEqual:()=>gu,oneHot:()=>yu,ones:()=>uu,onesLike:()=>bu,op:()=>sa,outerProduct:()=>ku,pad:()=>wu,pad1d:()=>Nu,pad2d:()=>xu,pad3d:()=>vu,pad4d:()=>Tu,pool:()=>Su,pow:()=>fi,prelu:()=>Eu,print:()=>ls,prod:()=>_u,raggedGather:()=>Mu,raggedTensorToTensor:()=>$u,rand:()=>Au,randomGamma:()=>Cu,randomNormal:()=>zu,randomStandardNormal:()=>Lu,randomUniform:()=>Bu,range:()=>Pu,real:()=>Vu,reciprocal:()=>Wu,relu:()=>Hu,relu6:()=>Uu,reshape:()=>io,reverse:()=>qu,reverse1d:()=>Ku,reverse2d:()=>ju,reverse3d:()=>Gu,reverse4d:()=>Zu,rfft:()=>hl,round:()=>Ju,rsqrt:()=>Yu,scalar:()=>mi,scatterND:()=>Hl,searchSorted:()=>eu,selu:()=>Qu,separableConv2d:()=>Xu,setdiff1dAsync:()=>el,sigmoid:()=>fo,sign:()=>tl,signal:()=>Xp,sin:()=>nl,sinh:()=>rl,slice:()=>mo,slice1d:()=>al,slice2d:()=>sl,slice3d:()=>ol,slice4d:()=>il,softmax:()=>ul,softplus:()=>Ui,spaceToBatchND:()=>Iu,sparse:()=>rc,sparseToDense:()=>Ul,spectral:()=>Qp,split:()=>dl,sqrt:()=>gi,square:()=>yi,squaredDifference:()=>fl,squeeze:()=>ml,stack:()=>gl,step:()=>yl,stridedSlice:()=>bl,string:()=>ac,sub:()=>Ki,sum:()=>bi,tan:()=>kl,tanh:()=>go,tensor:()=>ua,tensor1d:()=>wl,tensor2d:()=>Nl,tensor3d:()=>xl,tensor4d:()=>vl,tensor5d:()=>Tl,tensor6d:()=>Il,tile:()=>Ii,topk:()=>Sl,transpose:()=>Pl,truncatedNormal:()=>El,unique:()=>_l,unsortedSegmentSum:()=>Ml,unstack:()=>$l,upperBound:()=>Al,variable:()=>Dl,where:()=>Qo,whereAsync:()=>Ol,zeros:()=>iu,zerosLike:()=>Xo});class v{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class T{refCount(e){return I("refCount")}incRef(e){return I("incRef")}timerAvailable(){return!0}time(e){return I("time")}read(e){return I("read")}readSync(e){return I("readSync")}readToGPU(e,t){return I("readToGPU")}numDataIds(){return I("numDataIds")}disposeData(e,t){return I("disposeData")}write(e,t,n){return I("write")}move(e,t,n,r,a){return I("move")}memory(){return I("memory")}floatPrecision(){return I("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return I("dispose")}}function I(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}function S(e,t,n){return Math.max(e,Math.min(t,n))}function E(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function _(e,t){if(!e)throw new Error("string"==typeof t?t:t())}function M(e,t,n=""){_(F(e,t),()=>n+` Shapes ${e} and ${t} must match`)}function $(e){_(null!=e,()=>"The input to the tensor constructor must be a non-null value.")}function A(e,t=[],n=!1){if(null==t&&(t=[]),Array.isArray(e)||B(e)&&!n)for(let r=0;r<e.length;++r)A(e[r],t,n);else t.push(e);return t}function D(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function F(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function O(e){return e%1==0}function R(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function C(e,t){const n=t.length;return _((e=null==e?t.map((e,t)=>t):[].concat(e)).every(e=>e>=-n&&e<n),()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`),_(e.every(e=>O(e)),()=>`All values in axis param must be integers but got axis ${e}`),e.map(e=>e<0?n+e:e)}function z(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function L(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function B(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function P(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function V(e){return"string"==typeof e||e instanceof String}function W(e){return Array.isArray(e)?W(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":"number"==typeof e?"float32":V(e)?"string":"boolean"==typeof e?"bool":"float32"}function H(e){return!!(e&&e.constructor&&e.call&&e.apply)}function U(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function q(e,t,n,r=!1){const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce((e,t)=>e*t)*(r?2:1);for(let t=0;t<s;t++)a[t]=q(e+t*i,o,n,r)}return a}function K(e,t,n=!1){if(0===e.length)return t[0];const r=e.reduce((e,t)=>e*t)*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return q(0,e,t,n)}function j(e,t){const n=G(e,t);for(let e=0;e<n.length;e++)n[e]=1;return n}function G(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function Z(e,t){const n=e.reduce((e,t)=>e*t,1);if(null==t||"float32"===t)return K(e,new Float32Array(n));if("int32"===t)return K(e,new Int32Array(n));if("bool"===t)return K(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function J(e){e.forEach(t=>{_(Number.isInteger(t)&&t>=0,()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`)})}function Y(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let t=0;t<e.length-1;++t)r+=n[t]*e[t];return r}function Q(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let t=0;t<r.length-1;++t)r[t]=Math.floor(e/n[t]),e-=r[t]*n[t];return r[r.length-1]=e,r}function X(e){return e&&e.then&&"function"==typeof e.then}const ee="tfjsflags";class te{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=ne,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(re().getBool("IS_TEST")||re().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];re().getBool("IS_TEST")||re().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if(X(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if(void 0===this.global||void 0===this.global.location||void 0===this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);ee in e&&e[ee].split(",").forEach(e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)})}}function ne(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(e,...n)=>(function(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}(t,n[0],n[1]),n.join("="))),t}function re(){return se}let ae,se=null;function oe(){if(null==ae){let e;if("undefined"!=typeof window)e=window;else if(void 0!==n.g)e=n.g;else if("undefined"!=typeof process)e=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}ae=e}return ae}function ie(e,t){const n=function(){const e=oe();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}const ue="Acos",le="Acosh",pe="Add",ce="AddN",de="ArgMax",he="ArgMin",fe="Asin",me="Asinh",ge="Atan",ye="Atanh",be="Atan2",ke="AvgPool",we="AvgPool3D",Ne="BatchMatMul",xe="BatchToSpaceND",ve="Bincount",Te="BroadcastArgs",Ie="Cast",Se="Ceil",Ee="ClipByValue",_e="Complex",Me="ComplexAbs",$e="Concat",Ae="Conv2D",De="Conv2DBackpropFilter",Fe="Conv2DBackpropInput",Oe="Conv3D",Re="Conv3DBackpropInputV2",Ce="Cos",ze="Cosh",Le="Cumprod",Be="Cumsum",Pe="CropAndResize",Ve="DenseBincount",We="DepthToSpace",He="DepthwiseConv2dNative",Ue="DepthwiseConv2dNativeBackpropFilter",qe="DepthwiseConv2dNativeBackpropInput",Ke="Diag",je="Dilation2D",Ge="Dilation2DBackpropInput",Ze="Dilation2DBackpropFilter",Je="RealDiv",Ye="Einsum",Qe="Elu",Xe="Erf",et="Equal",tt="Exp",nt="ExpandDims",rt="Expm1",at="Fill",st="FlipLeftRight",ot="Floor",it="FloorDiv",ut="FusedBatchNorm",lt="GatherV2",pt="GatherNd",ct="Greater",dt="GreaterEqual",ht="Identity",ft="IFFT",mt="Imag",gt="IsFinite",yt="IsInf",bt="IsNan",kt="LeakyRelu",wt="Less",Nt="LessEqual",xt="LinSpace",vt="Log",Tt="Log1p",It="LogicalAnd",St="LogicalNot",Et="LogicalOr",_t="Maximum",Mt="MaxPool",$t="MaxPool3D",At="MaxPoolWithArgmax",Dt="Mean",Ft="Minimum",Ot="MirrorPad",Rt="Mod",Ct="Multinomial",zt="Multiply",Lt="NotEqual",Bt="NonMaxSuppressionV3",Pt="NonMaxSuppressionV4",Vt="NonMaxSuppressionV5",Wt="OnesLike",Ht="OneHot",Ut="Pack",qt="PadV2",Kt="Pow",jt="Prelu",Gt="Prod",Zt="RaggedGather",Jt="RaggedTensorToTensor",Yt="Range",Qt="Real",Xt="Reciprocal",en="Relu",tn="Reshape",nn="ResizeNearestNeighbor",rn="ResizeBilinear",an="Relu6",sn="Reverse",on="Round",un="Rsqrt",ln="ScatterNd",pn="SearchSorted",cn="Select",dn="Selu",hn="Slice",fn="Sin",mn="Sinh",gn="Sign",yn="Sigmoid",bn="Softplus",kn="Sqrt",wn="SpaceToBatchND",Nn="SplitV",xn="Softmax",vn="SparseFillEmptyRows",Tn="SparseReshape",In="SparseSegmentMean",Sn="SparseSegmentSum",En="SparseToDense",_n="SquaredDifference",Mn="StridedSlice",$n="StringNGrams",An="StringSplit",Dn="StringToHashBucketFast",Fn="Sub",On="Tan",Rn="Tanh",Cn="Tile",zn="TopK",Ln="Transform",Bn="Transpose",Pn="Unique",Vn="Unpack",Wn="UnsortedSegmentSum",Hn="ZerosLike",Un="Step",qn="RotateWithOffset",Kn="_FusedMatMul",jn="FusedConv2D",Gn="FusedDepthwiseConv2D";function Zn(...e){re().getBool("IS_TEST")||re().getBool("PROD")||console.warn(...e)}const Jn=ie("kernelRegistry",()=>new Map),Yn=ie("gradRegistry",()=>new Map);function Qn(e,t){const n=nr(e,t);return Jn.get(n)}function Xn(e){return Yn.get(e)}function er(e){const t=Jn.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function tr(e){const{kernelName:t,backendName:n}=e,r=nr(t,n);Jn.has(r)&&Zn(`The kernel '${t}' for backend '${n}' is already registered`),Jn.set(r,e)}function nr(e,t){return`${t}_${e}`}var rr=n(570);const ar=n.n(rr)()||rr;function sr(e){return ar.fromString(e,!0,16)}const or=sr("c3a5c85c97cb3127"),ir=sr("b492b66fbe98f273"),ur=sr("9ae16a3b2f90404f");function lr(e){return e.xor(e.shru(47))}function pr(e,t,n){const r=e.slice(t,t+n);return ar.fromBytes(Array.from(r),!0,!0)}function cr(e,t){return pr(e,t,8)}function dr(e,t){return pr(e,t,4)}function hr(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function fr(e,t,n=sr("9ddfea08eb382d69")){let r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function mr(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=hr(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(hr(a,44)),[a.add(r),s.add(o)]}(cr(e,t),cr(e,t+8),cr(e,t+16),cr(e,t+24),n,r)}function gr(e,t=e.length){const n=ar.fromNumber(81,!0);if(t<=32)return t<=16?function(e,t=e.length){if(t>=8){const n=ur.add(2*t),r=cr(e,0).add(ur),a=cr(e,t-8);return fr(hr(a,37).mul(n).add(r),hr(r,25).add(a).mul(n),n)}if(t>=4){const n=ur.add(2*t);return fr(dr(e,0).shl(3).add(t),dr(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return lr(ur.mul(n).xor(or.mul(r))).mul(ur)}return ur}(e,t):function(e,t=e.length){const n=ur.add(2*t),r=cr(e,0).mul(ir),a=cr(e,8),s=cr(e,t-8).mul(n),o=cr(e,t-16).mul(ur);return fr(hr(r.add(a),43).add(hr(s,30)).add(o),r.add(hr(a.add(ur),18)).add(s),n)}(e,t);if(t<=64)return function(e,t=e.length){const n=ur.add(2*t),r=cr(e,0).mul(ur),a=cr(e,8),s=cr(e,t-8).mul(n),o=cr(e,t-16).mul(ur),i=hr(r.add(a),43).add(hr(s,30)).add(o),u=fr(i,r.add(hr(a.add(ur),18)).add(s),n),l=cr(e,16).mul(n),p=cr(e,24),c=i.add(cr(e,t-32)).mul(n),d=u.add(cr(e,t-24)).mul(n);return fr(hr(l.add(p),43).add(hr(c,30)).add(d),l.add(hr(p.add(r),18)).add(c),n)}(e,t);let r=n,a=n.mul(ir).add(113),s=lr(a.mul(ur).add(113)).mul(ur),o=[ar.UZERO,ar.UZERO],i=[ar.UZERO,ar.UZERO];r=r.mul(ur).add(cr(e,0));let u=0;const l=64*(t-1>>6),p=l+(t-1&63)-63;do{r=hr(r.add(a).add(o[0]).add(cr(e,u+8)),37).mul(ir),a=hr(a.add(o[1]).add(cr(e,u+48)),42).mul(ir),r=r.xor(i[1]),a=a.add(o[0]).add(cr(e,u+40)),s=hr(s.add(i[0]),33).mul(ir),o=mr(e,u,o[1].mul(ir),r.add(i[0])),i=mr(e,u+32,s.add(i[1]),a.add(cr(e,u+16))),[s,r]=[r,s],u+=64}while(u!==l);const c=ir.add(s.and(255).shl(1));return u=p,i[0]=i[0].add(t-1&63),o[0]=o[0].add(i[0]),i[0]=i[0].add(o[0]),r=hr(r.add(a).add(o[0]).add(cr(e,u+8)),37).mul(c),a=hr(a.add(o[1]).add(cr(e,u+48)),42).mul(c),r=r.xor(i[1].mul(9)),a=a.add(o[0].mul(9).add(cr(e,u+40))),s=hr(s.add(i[0]),33).mul(c),o=mr(e,u,o[1].mul(c),r.add(i[0])),i=mr(e,u+32,s.add(i[1]),a.add(cr(e,u+16))),[s,r]=[r,s],fr(fr(o[0],i[0],c).add(lr(a).mul(or)).add(s),fr(o[1],i[1],c).add(r),c)}function yr(e,t){return"string"===t?wr(e):br([e],t)}function br(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=A(e)),re().getBool("DEBUG")&&function(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function kr(){return re().platform.now()}function wr(e,t="utf-8"){return t=t||"utf-8",re().platform.encode(e,t)}function Nr(e,t="utf-8"){return t=t||"utf-8",re().platform.decode(e,t)}class xr{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new Tr)}profileKernel(e,t,n){let r;const a=()=>{r=n()};let s;const o=kr();if(this.backendTimer.timerAvailable())s=this.backendTimer.time(a);else{a();for(const e of r)e.dataSync();s=Promise.resolve({kernelMs:kr()-o})}if(re().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let t=0;t<r.length;t++){const n=r[t];n.data().then(t=>{vr(t,n.dtype,e)})}return{kernelName:e,outputs:r,inputs:t,timeMs:s.then(e=>e.kernelMs),extraInfo:s.then(e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():"")}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach(e=>{Promise.all([e.data(),r,s]).then(n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])})})}}function vr(e,t,n){if("float32"!==t)return!1;for(let t=0;t<e.length;t++){const r=e[t];if(isNaN(r)||!isFinite(r))return console.warn(`Found ${r} in the result of '${n}'`),!0}return!1}class Tr{logKernelProfile(e,t,n,r,a,s){const o="number"==typeof r?R(`${r}ms`,9):r.error,i=R(e,25),u=t.rank,l=t.size,p=R(t.shape.toString(),14);let c="";for(const e in a){const n=a[e];if(null!=n){const r=n.shape||t.shape,a=r.length;c+=`${e}: ${a}D ${a>0?r:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${p}\t%c${l}\t%c${c}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}function Ir(e,t,n,r){const a=U(t),s=function(e,t,n,r){const a=D(t),s=r[r.length-1],o=new Array(s).fill(0),i=t.length,u="complex64"===n?Mr(e):e;if(i>1)for(let e=0;e<a/s;e++){const t=e*s;for(let e=0;e<s;e++)o[e]=Math.max(o[e],Sr(u[t+e],0,n).length)}return o}(e,t,n,a),o=t.length,i=_r(e,t,n,a,s),u=["Tensor"];return r&&(u.push(`  dtype: ${n}`),u.push(`  rank: ${o}`),u.push(`  shape: [${t}]`),u.push("  values:")),u.push(i.map(e=>"    "+e).join("\n")),u.join("\n")}function Sr(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:V(e)?`'${e}'`:"bool"===n?Er(e):parseFloat(e.toFixed(7)).toString(),R(r,t)}function Er(e){return 0===e?"false":"true"}function _r(e,t,n,r,a,s=!0){const o="complex64"===n?2:1,i=t[0],u=t.length;if(0===u)return"complex64"===n?[Sr(Mr(e)[0],0,n)]:"bool"===n?[Er(e[0])]:[e[0].toString()];if(1===u){if(i>20){const t=3*o;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((i-3)*o,i*o));return"complex64"===n&&(r=Mr(r),s=Mr(s)),["["+r.map((e,t)=>Sr(e,a[t],n)).join(", ")+", ..., "+s.map((e,t)=>Sr(e,a[i-3+t],n)).join(", ")+"]"]}return["["+("complex64"===n?Mr(e):Array.from(e)).map((e,t)=>Sr(e,a[t],n)).join(", ")+"]"]}const l=t.slice(1),p=r.slice(1),c=r[0]*o,d=[];if(i>20){for(let t=0;t<3;t++){const r=t*c,s=r+c;d.push(..._r(e.slice(r,s),l,n,p,a,!1))}d.push("...");for(let t=i-3;t<i;t++){const r=t*c,s=r+c;d.push(..._r(e.slice(r,s),l,n,p,a,t===i-1))}}else for(let t=0;t<i;t++){const r=t*c,s=r+c;d.push(..._r(e.slice(r,s),l,n,p,a,t===i-1))}const h=2===u?",":"";d[0]="["+d[0]+h;for(let e=1;e<d.length-1;e++)d[e]=" "+d[e]+h;let f=",\n";for(let e=2;e<u;e++)f+="\n";return d[d.length-1]=" "+d[d.length-1]+"]"+(s?"":f),d}function Mr(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}class $r{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=D(e),null!=n){const e=n.length;_(e===this.size,()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`)}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||L(t,this.size),this.strides=U(e)}set(e,...t){0===t.length&&(t=[0]),_(t.length===this.rank,()=>`The number of provided coordinates (${t.length}) must match the rank (${this.rank})`);const n=this.locToIndex(t);this.values[n]=e}get(...e){0===e.length&&(e=[0]);let t=0;for(const n of e){if(n<0||n>=this.shape[t]){const t=`Requested out of range element at ${e}.   Buffer shape=${this.shape}`;throw new Error(t)}t++}let n=e[e.length-1];for(let t=0;t<e.length-1;++t)n+=this.strides[t]*e[t];return this.values[n]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return Ar().makeTensor(this.values,this.shape,this.dtype)}}let Ar=null,Dr=null,Fr=null;class Or{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=D(e),this.strides=U(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return Dr.buffer(this.shape,this.dtype,e)}bufferSync(){return Dr.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return K(this.shape,e,"complex64"===this.dtype)}arraySync(){return K(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=Ar().read(this.dataId);if("string"===this.dtype){const t=await e;try{return t.map(e=>Nr(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),Ar().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=Ar().readSync(this.dataId);if("string"===this.dtype)try{return e.map(e=>Nr(e))}catch(e){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await Ar().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(Ar().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(e=!1){return Dr.print(this,e)}clone(){return this.throwIfDisposed(),Dr.clone(this)}toString(e=!1){return Ir(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),Dr.cast(this,e)}variable(e=!0,t,n){return this.throwIfDisposed(),Ar().makeVariable(this,e,t,n)}}Object.defineProperty(Or,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),ie("Tensor",()=>Or);class Rr extends Or{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!F(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);Ar().disposeTensor(this),this.dataId=e.dataId,Ar().incRef(this,null)}dispose(){Ar().disposeVariable(this),this.isDisposedInternal=!0}}var Cr,zr,Lr,Br,Pr;Object.defineProperty(Rr,Symbol.hasInstance,{value:e=>e instanceof Or&&null!=e.assign&&e.assign instanceof Function}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(Cr||(Cr={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(zr||(zr={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(Lr||(Lr={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(Br||(Br={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(Pr||(Pr={}));const Vr={float32:Br,int32:zr,bool:Lr,complex64:Pr};function Wr(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return Vr[e][t]}function Hr(e,t){if(e.dtype===t.dtype)return[e,t];const n=Wr(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function Ur(e){const t=[];return qr(e,t,new Set),t}function qr(e,t,n){if(null==e)return;if(e instanceof Or)return void t.push(e);if(r=e,!Array.isArray(r)&&"object"!=typeof r)return;var r;const a=e;for(const e in a){const r=a[e];n.has(r)||(n.add(r),qr(r,t,n))}}function Kr(e){return null!=e.kernelName}class jr{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map(e=>e.name)))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class Gr{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new jr}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then(()=>{});if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t,n=1){return e in this.registryFactory?(Zn(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new xr(this.backendInstance),!0}setupRegisteredKernels(){er(this.backendName).forEach(e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)})}disposeRegisteredKernels(e){er(e).forEach(t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])})}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof T||"function"!=typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then(n=>!(t<this.pendingBackendInitId||(this.registry[e]=n,this.pendingBackendInit=null,0))).catch(n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,Zn(`Initialization of backend ${e} failed`),Zn(n.stack||n.message)),!1));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(t){return Zn(`Initialization of backend ${e} failed`),Zn(t.stack||t.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority)}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!=typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!=typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun(()=>this.startScope(r),()=>this.endScope(n),()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(e){throw t(),e}}nextTensorId(){return Gr.nextTensorId++}nextVariableId(){return Gr.nextVariableId++}clone(e){const t=Jr.runKernel(ht,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],e=>({x:()=>{const t={x:e};return Jr.runKernel(Ie,t,{dtype:"float32"})}}),[],{}),t}runKernel(e,t,n){if(null==this.backendName&&this.backend,null==Qn(e,this.backendName))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach(e=>{a+="complex64"===e.dtype?3:1});const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,i;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const u=Kr(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(Kr(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const u=Qn(t,this.backendName);_(null!=u,()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`),o=()=>{const e=this.backend.numDataIds();i=u.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(i)?i:[i];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const l=o.map(e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e));if(r){const e=this.getTensorsForGradient(t,a,l);n=this.saveTensorsForBackwardMode(e)}return l}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map(e=>this.keep(this.clone(e))))};o=()=>{const e=this.backend.numDataIds();i=this.tidy(()=>t(this.backend,a));const n=Array.isArray(i)?i:[i];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(u,e,n),n}}const{inputs:l,attrs:p}=e,c=Kr(e)?null:e.backwardsFunc;let d;return this.scopedRun(()=>this.state.kernelDepth++,()=>this.state.kernelDepth--,()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(d=this.profiler.profileKernel(u,l,()=>o()),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(d),t=d.outputs):t=o()}),r&&this.addTapeNode(u,l,t,c,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:u,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(l).map(e=>null!=l[e]?l[e].shape:null),outputShapes:t.map(e=>e.shape),kernelTimeMs:d.timeMs,extraInfo:d.extraInfo}),Array.isArray(i)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map(e=>this.keep(this.clone(e)));return t}getTensorsForGradient(e,t,n){const r=Xn(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(_(Array.isArray(t),()=>"saveAllInputs is true, expected inputs to be an array."),s=Object.keys(t).map(e=>t[e])):s=e.map(e=>t[e]);const o=n.filter((e,t)=>a[t]);return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&V(e[0])&&(a=e.map(e=>wr(e)));const s=r.write(a,t,n),o=new Or(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=function(e){if(null==e)return 0;let t=0;return e.forEach(e=>t+=e.length),t}(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:a}=e,s=new Or(r,a,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e,t=!0,n,r){n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new Rr(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*P(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof Rr||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*P(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map(e=>e.totalBytesSnapshot)),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const e of this.state.activeProfile.kernels)e.kernelTimeMs=await e.kernelTimeMs,e.extraInfo=await e.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},i=Xn(e);null!=i&&(r=i.gradFunc),null!=r&&(o.gradient=e=>(e=e.map((e,t)=>{if(null==e){const e=n[t],r=G(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e}),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=Ur(e),n=new Set(t.map(e=>e.id));for(let e=0;e<this.state.activeScope.track.length;e++){const t=this.state.activeScope.track[e];t.kept||n.has(t.id)||t.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach(e=>{e.kept||e.scopeId!==r.id||this.track(e)})}gradients(e,t,n,r=!1){if(_(t.length>0,()=>"gradients() received an empty list of xs."),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun(()=>this.startTape(),()=>this.endTape(),()=>this.tidy("forward",e));_(a instanceof Or,()=>"The result y returned by f() must be a tensor.");const s=function(e,t,n){const r={},a={};for(let e=0;e<t.length;e++)r[t[e].id]=!0;for(let n=0;n<e.length;n++){const s=e[n],o=s.inputs;for(const e in o){const n=o[e];let i=!1;for(let e=0;e<t.length;e++)if(r[n.id]){s.outputs.forEach(e=>r[e.id]=!0),i=!0,a[s.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let t=e.length-1;t>=0;t--){const n=e[t],r=n.inputs;for(let e=0;e<n.outputs.length;e++)if(s[n.outputs[e].id]){for(const e in r)s[r[e].id]=!0,o[n.id]=!0;break}}const i=[];for(let t=0;t<e.length;t++){const n=e[t];if(a[n.id]&&o[n.id]){const e={};for(const t in n.inputs){const a=n.inputs[t];r[a.id]&&(e[t]=a)}const t=Object.assign({},n);t.inputs=e,t.outputs=n.outputs,i.push(t)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",()=>{const e={};e[a.id]=null==n?function(e){const t=j(D(e),"float32");return Jr.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach(t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)}),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n(()=>i[t]());if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!F(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,e=>this.tidy(e),Yr);const r=t.map(t=>e[t.id]);return 0===this.state.gradientDepth&&(this.state.activeTape.forEach(e=>{for(const t of e.saved)t.dispose()}),this.state.activeTape=null),{value:a,grads:r}})}customGrad(e){return _(H(e),()=>"The f passed in customGrad(f) must be a function."),(...t)=>{let n;_(t.every(e=>e instanceof Or),()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors");const r={};return t.forEach((e,t)=>{r[t]=e}),this.runKernelFunc({forwardFunc:(r,a)=>(n=e(...t,a),_(n.value instanceof Or,()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"),_(H(n.gradFunc),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."),n.value),backwardsFunc:(e,r)=>{const a=n.gradFunc(e,r),s=Array.isArray(a)?a:[a];_(s.length===t.length,()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."),_(s.every(e=>e instanceof Or),()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors.");const o={};return s.forEach((e,t)=>{o[t]=()=>e}),o},inputs:r})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=kr(),n=await this.backend.time(e);return n.wallMs=kr()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new jr;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function Zr(){const e=oe();if(null==e._tfengine){const t=new te(e);e._tfengine=new Gr(t)}var t;return t=e._tfengine.ENV,se=t,Ar=()=>e._tfengine,e._tfengine}Gr.nextTensorId=0,Gr.nextVariableId=0;const Jr=Zr();function Yr(e,t){const n={a:e,b:t};return Jr.runKernel(pe,n)}const Qr=re();function Xr(e,t){let n=e;if(B(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||B(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&re().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&ea(e,r,[]),r}function ea(e,t,n){if(n=n||[],!Array.isArray(e)&&!B(e))return void _(0===t.length,()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`);_(t.length>0,()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`),_(e.length===t[0],()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`);const r=t.slice(1);for(let t=0;t<e.length;++t)ea(e[t],r,n.concat(t))}function ta(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function na(e,t,n,r="numeric"){if(e instanceof Or)return ta(r,e.dtype,t,n),e;let a=W(e);if("string"!==a&&["bool","int32","float32"].indexOf(r)>=0&&(a=r),ta(r,a,t,n),null==e||!B(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const s=Xr(e,a);B(e)||Array.isArray(e)||(e=[e]);const o="string"!==a?br(e,a):A(e,[],!0);return Jr.makeTensor(o,s,a)}function ra(e,t,n,r="numeric"){if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);return e.map((e,a)=>na(e,`${t}[${a}]`,n,r))}Qr.registerFlag("DEBUG",()=>!1,e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")}),Qr.registerFlag("IS_BROWSER",()=>"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope),Qr.registerFlag("IS_NODE",()=>"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node),Qr.registerFlag("IS_CHROME",()=>"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)),Qr.registerFlag("PROD",()=>!1),Qr.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",()=>Qr.getBool("DEBUG")),Qr.registerFlag("DEPRECATION_WARNINGS_ENABLED",()=>!0),Qr.registerFlag("IS_TEST",()=>!1),Qr.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",()=>!0),Qr.registerFlag("WRAP_TO_IMAGEBITMAP",()=>!1),Qr.registerFlag("ENGINE_COMPILE_ONLY",()=>!1),Qr.registerFlag("CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU",()=>!1),Qr.registerFlag("USE_SETTIMEOUTCUSTOM",()=>!1);const aa="__op";function sa(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const r=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=aa;const a=(...e)=>{Jr.startScope(n);try{const t=r(...e);return X(t)&&console.error("Cannot return a Promise inside of tidy."),Jr.endScope(t),t}catch(e){throw Jr.endScope(null),e}};return Object.defineProperty(a,"name",{value:n,configurable:!0}),a}const oa=sa({complex_:function(e,t){const n=na(e,"real","complex"),r=na(t,"imag","complex");M(n.shape,r.shape,`real and imag shapes, ${n.shape} and ${r.shape}, must match in call to tf.complex().`);const a={real:n,imag:r};return Jr.runKernel(_e,a)}});function ia(e,t,n,r){if(null==r&&(r=W(e)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!B(e)&&!Array.isArray(e)&&"number"!=typeof e&&"boolean"!=typeof e&&"string"!=typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){J(t);const e=D(t),r=D(n);_(e===r,()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`);for(let e=0;e<n.length;++e){const r=n[e],a=e!==n.length-1||r!==D(t.slice(e));_(n[e]===t[e]||!a,()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `)}}return B(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==r?br(e,r):A(e,[],!0),Jr.makeTensor(e,t,r)}function ua(e,t,n){return ia(e,t,Xr(e,n),n)}const la={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8},pa=4;async function ca(e,t){const n=[],r=[],a=Array.isArray(e)?e.map(e=>e.name):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise(async e=>{const t=await i.bytes(),n=t.reduce((e,t)=>e+t.length,0)+pa*t.length,r=new Uint8Array(n);let a=0;for(let e=0;e<t.length;e++){const n=t[e],s=new Uint8Array(new Uint32Array([n.length]).buffer);r.set(s,a),a+=pa,r.set(n,a),a+=n.length}e(r)});r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:ha(await Promise.all(r)),specs:n}}function da(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,u=D(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=la[n.dtype],p=e.slice(a,a+u*i),c="uint8"===n.dtype?new Uint8Array(p):new Uint16Array(p);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(c.length);for(let e=0;e<c.length;e++){const t=c[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=va()),l=r(c)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(c.length);for(let e=0;e<c.length;e++){const t=c[e];l[e]=Math.round(t*n.scale+n.min)}}a+=u*i}else if("string"===o){const t=D(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+pa))[0];a+=pa;const n=new Uint8Array(e.slice(a,a+t));l.push(n),a+=t}}else{const r=la[o],s=e.slice(a,a+u*r);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const a=ua(e,i,"float32"),o=ua(r,i,"float32");n[t]=oa(a,o),a.dispose(),o.dispose()}}a+=u*r}"complex64"!==o&&(n[t]=ua(l,i,o))}return n}function ha(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach(e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)});const r=new Uint8Array(t);let a=0;return n.forEach(e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength}),r.buffer}const fa="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ma(e){return fa?Buffer.byteLength(e):new Blob([e]).size}function ga(e){if(1===e.length)return e[0];let t=0;e.forEach(e=>{t+=e.byteLength});const n=new Uint8Array(t);let r=0;return e.forEach(e=>{n.set(new Uint8Array(e),r),r+=e.byteLength}),n.buffer}function ya(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function ba(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}function ka(e,t,n){const r={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(r.trainingConfig=e.trainingConfig),null!=e.weightsManifest){if(!t)throw new Error("modelJSON has weightsManifest but weightSpecs is null");if(!n)throw new Error("modelJSON has weightsManifest but weightData is null");r.weightSpecs=t,r.weightData=n}return null!=e.signature&&(r.signature=e.signature),null!=e.userDefinedMetadata&&(r.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(r.modelInitializer=e.modelInitializer),r}async function wa(e,t){let n,r;return null!=e.weightsManifest&&([n,r]=await t(e.weightsManifest)),ka(e,n,r)}function Na(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:ma(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:ma(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function xa(e){const t=[];for(const n of e)t.push(...n.weights);return t}function va(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;!(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let e=1024;e<2048;e++)t[e]=939524096+(e-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let a=0;a<r.length;a++){const o=r[a],i=e[n[o>>10]+(1023&o)]+t[o>>10];s[a]=i}return new Float32Array(a)}}class Ta{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==Ta.instance&&(Ta.instance=new Ta),Ta.instance}static registerSaveRouter(e){Ta.getInstance().saveRouters.push(e)}static registerLoadRouter(e){Ta.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return Ta.getHandlers(e,"save")}static getLoadHandlers(e,t){return Ta.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?Ta.getInstance().loadRouters:Ta.getInstance().saveRouters).forEach(t=>{const a=t(e,n);null!==a&&r.push(a)}),r}}const Ia=e=>Ta.registerSaveRouter(e),Sa=e=>Ta.registerLoadRouter(e),Ea=e=>Ta.getSaveHandlers(e),_a=(e,t)=>Ta.getLoadHandlers(e,t),Ma="tensorflowjs",$a="models_store",Aa="model_info_store";function Da(){if(!re().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"==typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function Fa(e){const t=e.result;t.createObjectStore($a,{keyPath:"modelPath"}),t.createObjectStore(Aa,{keyPath:"modelPath"})}class Oa{constructor(e){if(this.indexedDB=Da(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise((e,n)=>{const r=this.indexedDB.open(Ma,1);r.onupgradeneeded=()=>Fa(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction($a,"readonly"),r=t.objectStore($a).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=Na(t),s=a.transaction(Aa,"readwrite");let o=s.objectStore(Aa);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=a.transaction($a,"readwrite");const i=u.objectStore($a).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(Aa);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)})}}Oa.URL_SCHEME="indexeddb://";const Ra=e=>{return re().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(Oa.URL_SCHEME)?(t=e.slice(Oa.URL_SCHEME.length),new Oa(t)):null;var t};Ta.registerSaveRouter(Ra),Ta.registerLoadRouter(Ra);class Ca{constructor(){this.indexedDB=Da()}async listModels(){return new Promise((e,t)=>{const n=this.indexedDB.open(Ma,1);n.onupgradeneeded=()=>Fa(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(Aa,"readonly"),s=a.objectStore(Aa).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)})}async removeModel(e){var t;return e=(t=e).startsWith(Oa.URL_SCHEME)?t.slice(Oa.URL_SCHEME.length):t,new Promise((t,n)=>{const r=this.indexedDB.open(Ma,1);r.onupgradeneeded=()=>Fa(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(Aa,"readwrite"),o=s.objectStore(Aa),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{u=a.transaction($a,"readwrite");const r=u.objectStore($a).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)})}}const za="/",La="tensorflowjs_models",Ba="info",Pa="model_topology",Va="weight_specs",Wa="weight_data",Ha="model_metadata";function Ua(e){return{info:[La,e,Ba].join(za),topology:[La,e,Pa].join(za),weightSpecs:[La,e,Va].join(za),weightData:[La,e,Wa].join(za),modelMetadata:[La,e,Ha].join(za)}}function qa(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function Ka(e){const t=e.split(za);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(za)}class ja{constructor(e){if(!re().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=Ua(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const t=JSON.stringify(e.modelTopology),n=JSON.stringify(e.weightSpecs),r=Na(e);try{this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,t),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,function(e){if(fa)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let e=0,r=t.length;e<r;e++)n+=String.fromCharCode(t[e]);return btoa(n)}(e.weightData));const a={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(a)),{modelArtifactsInfo:r}}catch(e){throw qa(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${r.modelTopologyBytes}, weightSpecsBytes=${r.weightSpecsBytes}, weightDataBytes=${r.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(fa){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let e=0;e<t.length;++e)n.set([t.charCodeAt(e)],e);return n.buffer}(s),t}}ja.URL_SCHEME="localstorage://";const Ga=e=>{return re().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(ja.URL_SCHEME)?(t=e.slice(ja.URL_SCHEME.length),new ja(t)):null;var t};Ta.registerSaveRouter(Ga),Ta.registerLoadRouter(Ga);class Za{constructor(){_(re().getBool("IS_BROWSER"),()=>"Current environment is not a web browser"),_("undefined"==typeof window||void 0!==window.localStorage,()=>"Current browser does not appear to support localStorage"),this.LS=window.localStorage}async listModels(){const e={},t=La+za,n=za+Ba;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);a.startsWith(t)&&a.endsWith(n)&&(e[Ka(a)]=JSON.parse(this.LS.getItem(a)))}return e}async removeModel(e){var t;const n=Ua(e=(t=e).startsWith(ja.URL_SCHEME)?t.slice(ja.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return qa(n),r}}const Ja="://";class Ya{constructor(){this.managers={}}static getInstance(){return null==Ya.instance&&(Ya.instance=new Ya),Ya.instance}static registerManager(e,t){_(null!=e,()=>"scheme must not be undefined or null."),e.endsWith(Ja)&&(e=e.slice(0,e.indexOf(Ja))),_(e.length>0,()=>"scheme must not be an empty string.");const n=Ya.getInstance();_(null==n.managers[e],()=>`A model store manager is already registered for scheme '${e}'.`),n.managers[e]=t}static getManager(e){const t=Ya.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(Ya.getInstance().managers)}}function Qa(e){if(-1===e.indexOf(Ja))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${Ya.getSchemes().join(",")}`);return{scheme:e.split(Ja)[0],path:e.split(Ja)[1]}}async function Xa(e,t,n=!1){_(e!==t,()=>`Old path and new path are the same: '${e}'`);const r=Ta.getLoadHandlers(e);_(r.length>0,()=>`Copying failed because no load handler is found for source URL ${e}.`),_(r.length<2,()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`);const a=r[0],s=Ta.getSaveHandlers(t);_(s.length>0,()=>`Copying failed because no save handler is found for destination URL ${t}.`),_(s.length<2,()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`);const o=s[0],i=Qa(e).scheme,u=Qa(e).path,l=i===Qa(e).scheme,p=await a.load();n&&l&&await Ya.getManager(i).removeModel(u);const c=await o.save(p);return n&&!l&&await Ya.getManager(i).removeModel(u),c.modelArtifactsInfo}async function es(){const e=Ya.getSchemes(),t={};for(const n of e){const e=await Ya.getManager(n).listModels();for(const r in e)t[n+Ja+r]=e[r]}return t}async function ts(e){const t=Qa(e);return Ya.getManager(t.scheme).removeModel(t.path)}async function ns(e,t){return Xa(e,t,!1)}async function rs(e,t){return Xa(e,t,!0)}class as{constructor(){this.messageName="setTimeoutCustom",this.functionRefs=[],this.handledMessageCount=0,this.hasEventListener=!1}fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}setTimeoutCustom(e,t){window&&re().getBool("USE_SETTIMEOUTCUSTOM")?(this.functionRefs.push(e),setTimeout(()=>{window.postMessage({name:this.messageName,index:this.functionRefs.length-1},"*")},t),this.hasEventListener||(this.hasEventListener=!0,window.addEventListener("message",e=>{e.source===window&&e.data.name===this.messageName&&(e.stopPropagation(),(0,this.functionRefs[e.data.index])(),this.handledMessageCount++,this.handledMessageCount===this.functionRefs.length&&(this.functionRefs=[],this.handledMessageCount=0))},!0))):setTimeout(e,t)}}if(re().get("IS_BROWSER")){re().setPlatform("browser",new as);try{Ya.registerManager(ja.URL_SCHEME,new Za)}catch(e){}try{Ya.registerManager(Oa.URL_SCHEME,new Ca)}catch(e){}}let ss;function os(e,t="float32",n){return t=t||"float32",J(e),new $r(e,t,n)}re().get("IS_NODE")&&!re().get("IS_BROWSER")&&re().setPlatform("node",new class{constructor(){this.util=n(590),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=re().global.fetch?re().global.fetch(e,t):(null==ss&&(ss=n(817)),ss(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}});const is=sa({cast_:function(e,t){const n=na(e,"x","cast");if(!function(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const r={x:n},a={dtype:t};return Jr.runKernel(Ie,r,a)}}),us=sa({clone_:function(e){const t={x:na(e,"x","clone","string_or_numeric")};return Jr.runKernel(ht,t)}});function ls(e,t=!1){console.log(e.toString(t))}function ps(e){return new Promise(e=>setTimeout(e)).then(e)}Zr(),Dr={buffer:os,cast:is,clone:us,print:ls};class cs{constructor(e){if(!re().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(cs.URL_SCHEME)&&(e=e.slice(cs.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=ba(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,await ps(()=>a.dispatchEvent(new MouseEvent("click"))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await ps(()=>e.dispatchEvent(new MouseEvent("click")))}return{modelArtifactsInfo:Na(e)}}}}cs.URL_SCHEME="downloads://";class ds{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const s=wa(r,e=>this.loadWeights(e));e(s)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)})}loadWeights(e){const t=[],n=[];for(const r of e)t.push(...r.weights),n.push(...r.paths);const r=this.checkManifestAndWeightFiles(e),a=n.map(e=>this.loadWeightsFile(e,r[e]));return Promise.all(a).then(e=>[t,ga(e)])}loadWeightsFile(e,t){return new Promise((n,r)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)})}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map(e=>ya(e.name)),r={};for(const a of e)a.paths.forEach(e=>{const a=ya(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]});if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function hs(e){return new ds(e)}function fs(e,t,n,r){!function(e){_(null!=e&&Array.isArray(e)&&e.length>0,()=>"promises must be a none empty array")}(e),function(e,t){_(e>=0&&e<=1,()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`),_(t>=0&&t<=1,()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`),_(t>=e,()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`)}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map(s=>(s.then(s=>{const o=n+ ++a/e.length*(r-n);return t(o),s}),s)))}async function ms(e,t){null==t&&(t={});const n=null==t.fetchFunc?re().platform.fetch:t.fetchFunc,r=e.map(e=>n(e,t.requestInit,{isBinary:!0})),a=(null==t.onProgress?await Promise.all(r):await fs(r,t.onProgress,0,.5)).map(e=>e.arrayBuffer());return null==t.onProgress?await Promise.all(a):await fs(a,t.onProgress,.5,1)}async function gs(e,t="",n,r){return ys(e=>ms(e,{requestInit:r}))(e,t,n)}function ys(e){return async(t,n="",r)=>{const a=t.map(()=>!1),s={},o=null!=r?r.map(()=>!1):[],i=[];if(t.forEach((e,t)=>{let n=0;e.weights.forEach(e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=la[u]*D(e.shape),p=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach((t,n)=>{t===e.name&&(p(),o[n]=!0)}):p(),i.push(e.name),n+=l})}),!o.every(e=>e)){const e=r.filter((e,t)=>!o[t]);throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=a.reduce((e,t,n)=>(t&&e.push(n),e),[]),l=[];u.forEach(e=>{t[e].paths.forEach(e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)})});const p=await e(l),c={};let d=0;return u.forEach(e=>{const n=t[e].paths.length;let r=0;for(let e=0;e<n;e++)r+=p[d+e].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let e=0;e<n;e++){const t=new Uint8Array(p[d+e]);o.set(t,i),i+=t.byteLength}s[e].forEach(e=>{const t=da(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const e in t)c[e]=t[e]}),d+=n}),c}}Ta.registerSaveRouter(e=>re().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(cs.URL_SCHEME)?function(e="model"){return new cs(e)}(e.slice(cs.URL_SCHEME.length)):null);class bs{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?(_("function"==typeof t.fetchFunc,()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"),this.fetch=t.fetchFunc):this.fetch=re().platform.fetch,_(null!=e&&e.length>0,()=>"URL path for http must not be null, undefined or empty."),Array.isArray(e)&&_(2===e.length,()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=ba(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:Na(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(e){let t=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?t+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":t+=" Please make sure the server is serving valid JSON for this request.",new Error(t)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return wa(t,e=>this.loadWeights(e))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?");return[e.substring(0,t)+"/",n>t?e.substring(n):""]}(t),a=this.weightPathPrefix||n,s=xa(e),o=[],i=[];for(const t of e)for(const e of t.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);return this.weightUrlConverter&&o.push(...await Promise.all(i)),[s,ga(await ms(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function ks(e){return null!=e.match(bs.URL_SCHEME_REGEX)}bs.URL_SCHEME_REGEX=/^https?:\/\//;const ws=(e,t)=>{if("undefined"==typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every(e=>ks(e)):ks(e),n)return Ns(e,t)}return null};function Ns(e,t){return new bs(e,t)}function xs(e,t){return Ns(e,t)}Ta.registerSaveRouter(ws),Ta.registerLoadRouter(ws);class vs{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Ts{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class Is{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ss(e,t,n,r){return new Is(Es(...arguments))}function Es(e,t,n,r){return 1===arguments.length?null!=e.modelTopology||null!=e.weightSpecs?new vs(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new vs({modelTopology:e})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new vs({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r}))}function _s(e){return new Ts(e)}function Ms(e){return new Ts(e)}function $s(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function As(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s)throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`);n.unshift(r)}}return n}function Ds(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{const t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}const Fs=sa({abs_:function(e){const t=na(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return Jr.runKernel(Me,e)}{const e={x:t};return Jr.runKernel("Abs",e)}}}),Os=sa({acos_:function(e){const t={x:na(e,"x","acos")};return Jr.runKernel(ue,t)}}),Rs=sa({acosh_:function(e){const t={x:na(e,"x","acosh")};return Jr.runKernel(le,t)}}),Cs=sa({add_:function(e,t){let n=na(e,"a","add"),r=na(t,"b","add");[n,r]=Hr(n,r);const a={a:n,b:r};return Jr.runKernel(pe,a)}}),zs=sa({addN_:function(e){_(Array.isArray(e),()=>"The argument passed to tf.addN() must be a list of tensors"),_(e.length>=1,()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`);const t=e.map((e,t)=>na(e,`tensors${t}`,"addN")),n=t[0];t.forEach(e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")}),t.forEach(e=>{if(!F(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")});const r=t;return Jr.runKernel(ce,r)}}),Ls=sa({all_:function(e,t=null,n=!1){const r={x:na(e,"x","all","bool")},a={axis:t,keepDims:n};return Jr.runKernel("All",r,a)}}),Bs=sa({any_:function(e,t=null,n=!1){const r={x:na(e,"x","any","bool")},a={axis:t,keepDims:n};return Jr.runKernel("Any",r,a)}}),Ps=sa({argMax_:function(e,t=0){const n={x:na(e,"x","argMax")},r={axis:t};return Jr.runKernel(de,n,r)}}),Vs=sa({argMin_:function(e,t=0){const n={x:na(e,"x","argMin")},r={axis:t};return Jr.runKernel(he,n,r)}}),Ws=sa({asin_:function(e){const t={x:na(e,"x","asin")};return Jr.runKernel(fe,t)}}),Hs=sa({asinh_:function(e){const t={x:na(e,"x","asinh")};return Jr.runKernel(me,t)}}),Us=sa({atan_:function(e){const t={x:na(e,"x","atan")};return Jr.runKernel(ge,t)}}),qs=sa({atan2_:function(e,t){let n=na(e,"a","atan2"),r=na(t,"b","atan2");[n,r]=Hr(n,r);const a={a:n,b:r};return Jr.runKernel(be,a)}}),Ks=sa({atanh_:function(e){const t={x:na(e,"x","atanh")};return Jr.runKernel(ye,t)}});function js(e,t,n,r,a="NHWC",s){return Js(e,[...t,e[3]],n,s,r,null,null,so(a))}function Gs(e,t,n,r,a,s,o="channelsLast"){const[i,u]=Xs(t);let l;if("channelsLast"===o)l=[i,u,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);l=[i,u,e[1],e[1]]}return Js(e,l,n,r,a,s,!1,o)}function Zs(e,t,n,r,a,s,o="NDHWC"){const[i,u,l]=eo(t);let p,c;if("NDHWC"===o)c="channelsLast",p=[i,u,l,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);c="channelsFirst",p=[i,u,l,e[1],e[1]]}return Ys(e,p,n,r,a,!1,c,s)}function Js(e,t,n,r,a,s,o=!1,i="channelsLast"){let[u,l,p,c]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,p,c]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,c,l,p]=e}const[d,h,,f]=t,[m,g]=Xs(n),[y,b]=Xs(r),k=to(d,y),w=to(h,b),{padInfo:N,outHeight:x,outWidth:v}=function(e,t,n,r,a,s,o,i,u){let l,p,c;if("number"==typeof e){l={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=Qs(e,t,n));const s=e[1];return[no((e[0]-t+2*r)/n+1,a),no((s-t+2*r)/n+1,a)]}([t,n],s,r,e,i);p=a[0],c=a[1]}else if("same"===e){p=Math.ceil(t/r),c=Math.ceil(n/a);const e=Math.max(0,(p-1)*r+s-t),i=Math.max(0,(c-1)*a+o-n),u=Math.floor(e/2),d=e-u,h=Math.floor(i/2);l={top:u,bottom:d,left:h,right:i-h,type:"SAME"}}else if("valid"===e)l={top:0,bottom:0,left:0,right:0,type:"VALID"},p=Math.ceil((t-s+1)/r),c=Math.ceil((n-o+1)/a);else{if("object"!=typeof e)throw Error(`Unknown padding parameter: ${e}`);{const d="channelsLast"===u?e[1][0]:e[2][0],h="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],m="channelsLast"===u?e[2][1]:e[3][1];l={top:d,bottom:h,left:f,right:m,type:0===d&&0===h&&0===f&&0===m?"VALID":"EXPLICIT"},p=no((t-s+d+h)/r+1,i),c=no((n-o+f+m)/a+1,i)}}return{padInfo:l,outHeight:p,outWidth:c}}(a,l,p,m,g,k,w,s,i),T=o?f*c:f;let I;return"channelsFirst"===i?I=[u,T,x,v]:"channelsLast"===i&&(I=[u,x,v,T]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:p,inChannels:c,outHeight:x,outWidth:v,outChannels:T,padInfo:N,strideHeight:m,strideWidth:g,filterHeight:d,filterWidth:h,effectiveFilterHeight:k,effectiveFilterWidth:w,dilationHeight:y,dilationWidth:b,inShape:e,outShape:I,filterShape:t}}function Ys(e,t,n,r,a,s=!1,o="channelsLast",i){let[u,l,p,c,d]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,p,c,d]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,d,l,p,c]=e}const[h,f,m,,g]=t,[y,b,k]=eo(n),[w,N,x]=eo(r),v=to(h,w),T=to(f,N),I=to(m,x),{padInfo:S,outDepth:E,outHeight:_,outWidth:M}=function(e,t,n,r,a,s,o,i,u,l,p){let c,d,h,f;if("number"==typeof e){c={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=Qs(e,t,r));const o=e[1],i=e[2];return[no((e[0]-t+2*a)/r+1,s),no((o-t+2*a)/r+1,s),no((i-t+2*a)/r+1,s),1]}([t,n,r,1],i,0,a,e,p);d=s[0],h=s[1],f=s[2]}else if("same"===e){d=Math.ceil(t/a),h=Math.ceil(n/s),f=Math.ceil(r/o);const e=(d-1)*a+i-t,p=(h-1)*s+u-n,m=(f-1)*o+l-r,g=Math.floor(e/2),y=e-g,b=Math.floor(p/2),k=p-b,w=Math.floor(m/2);c={top:b,bottom:k,left:w,right:m-w,front:g,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);c={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((t-i+1)/a),h=Math.ceil((n-u+1)/s),f=Math.ceil((r-l+1)/o)}return{padInfo:c,outDepth:d,outHeight:h,outWidth:f}}(a,l,p,c,y,b,k,v,T,I,i),$=s?g*d:g;let A;return"channelsFirst"===o?A=[u,$,E,_,M]:"channelsLast"===o&&(A=[u,E,_,M,$]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:p,inWidth:c,inChannels:d,outDepth:E,outHeight:_,outWidth:M,outChannels:$,padInfo:S,strideDepth:y,strideHeight:b,strideWidth:k,filterDepth:h,filterHeight:f,filterWidth:m,effectiveFilterDepth:v,effectiveFilterHeight:T,effectiveFilterWidth:I,dilationDepth:w,dilationHeight:N,dilationWidth:x,inShape:e,outShape:A,filterShape:t}}function Qs(e,t,n,r=1){const a=to(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function Xs(e){return"number"==typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function eo(e){return"number"==typeof e?[e,e,e]:e}function to(e,t){return t<=1?e:e+(e-1)*(t-1)}function no(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function ro(e){const[t,n,r]=Xs(e);return 1===t&&1===n&&1===r}function ao(e,t){return ro(e)||ro(t)}function so(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function oo(e,t,n){if(null!=n){if("string"==typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"==typeof t)_(O(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);else{if("object"!=typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach(t=>{t.forEach(t=>{_(O(t),()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`)})})}}}const io=sa({reshape_:function(e,t){const n={x:na(e,"x","reshape","string_or_numeric")},r={shape:t};return Jr.runKernel(tn,n,r)}}),uo=sa({avgPool_:function(e,t,n,r,a){const s=na(e,"x","avgPool","float32");_(ao(n,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`);let o=s,i=!1;3===s.rank&&(i=!0,o=io(s,[1,s.shape[0],s.shape[1],s.shape[2]])),_(4===o.rank,()=>`Error in avgPool: x must be rank 4 but got rank ${o.rank}.`),oo("avgPool",r,a);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:a};let p=Jr.runKernel(ke,u,l);return p=is(p,s.dtype),i?io(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),lo=sa({avgPool3d_:function(e,t,n,r,a,s="NDHWC"){const o=na(e,"x","avgPool3d","float32");let i=o,u=!1;4===o.rank&&(u=!0,i=io(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),_(5===i.rank,()=>`Error in avgPool3d: x must be rank 5 but got rank ${i.rank}.`),_("NDHWC"===s,()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),oo("avgPool3d",r,a);const l={x:i},p={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s};let c=Jr.runKernel(we,l,p);return c=is(c,i.dtype),u?io(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),po=sa({concat_:function(e,t=0){_(e.length>=1,()=>"Pass at least one tensor to concat");const n=ra(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach(e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)}),1===n.length)return us(n[0]);const r=n,a={axis:t};return Jr.runKernel($e,r,a)}}),co=sa({matMul_:function(e,t,n=!1,r=!1){let a=na(e,"a","matMul"),s=na(t,"b","matMul");[a,s]=Hr(a,s);const o={a,b:s},i={transposeA:n,transposeB:r};return Jr.runKernel(Ne,o,i)}}),ho=sa({mul_:function(e,t){let n=na(e,"a","mul"),r=na(t,"b","mul");[n,r]=Hr(n,r);const a={a:n,b:r};return Jr.runKernel(zt,a)}}),fo=sa({sigmoid_:function(e){const t={x:na(e,"x","sigmoid","float32")};return Jr.runKernel(yn,t)}}),mo=sa({slice_:function(e,t,n){const r=na(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const a={x:r},s={begin:t,size:n};return Jr.runKernel(hn,a,s)}}),go=sa({tanh_:function(e){const t={x:na(e,"x","tanh","float32")};return Jr.runKernel(Rn,t)}}),yo=sa({basicLSTMCell_:function(e,t,n,r,a,s){const o=na(e,"forgetBias","basicLSTMCell"),i=na(t,"lstmKernel","basicLSTMCell"),u=na(n,"lstmBias","basicLSTMCell"),l=na(r,"data","basicLSTMCell"),p=na(a,"c","basicLSTMCell"),c=na(s,"h","basicLSTMCell"),d=po([l,c],1),h=co(d,i),f=Cs(h,u),m=f.shape[0],g=f.shape[1]/4,y=[m,g],b=mo(f,[0,0],y),k=mo(f,[0,g],y),w=mo(f,[0,2*g],y),N=mo(f,[0,3*g],y),x=Cs(ho(fo(b),go(k)),ho(p,fo(Cs(o,w))));return[x,ho(go(x),fo(N))]}}),bo=sa({batchToSpaceND_:function(e,t,n){const r=na(e,"x","batchToSpaceND"),a=t.reduce((e,t)=>e*t);_(r.rank>=1+t.length,()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`),_(n.length===t.length,()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`),_(r.shape[0]%a===0,()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`);const s={x:r},o={blockShape:t,crops:n};return Jr.runKernel(xe,s,o)}}),ko=sa({batchNorm_:function(e,t,n,r,a,s){null==s&&(s=.001);const o=na(e,"x","batchNorm"),i=na(t,"mean","batchNorm"),u=na(n,"variance","batchNorm");let l,p;null!=a&&(l=na(a,"scale","batchNorm")),null!=r&&(p=na(r,"offset","batchNorm")),_(i.rank===u.rank,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),_(null==p||i.rank===p.rank,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),_(null==l||i.rank===l.rank,()=>"Batch normalization gradient requires mean and scale to have equal ranks.");const c={x:function(e){let t;return t=0===e.rank||1===e.rank?io(e,[1,1,1,e.size]):2===e.rank?io(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?io(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(o),scale:l,offset:p,mean:i,variance:u},d={varianceEpsilon:s},h=Jr.runKernel(ut,c,d);return io(h,o.shape)}}),wo=sa({batchNorm2d_:function(e,t,n,r,a,s){const o=na(e,"x","batchNorm"),i=na(t,"mean","batchNorm"),u=na(n,"variance","batchNorm");let l,p;return null!=a&&(l=na(a,"scale","batchNorm")),null!=r&&(p=na(r,"offset","batchNorm")),_(2===o.rank,()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`),_(2===i.rank||1===i.rank,()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${i.rank}.`),_(2===u.rank||1===u.rank,()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${u.rank}.`),null!=l&&_(2===l.rank||1===l.rank,()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${l.rank}.`),null!=p&&_(2===p.rank||1===p.rank,()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${p.rank}.`),ko(o,i,u,p,l,s)}}),No=sa({batchNorm3d_:function(e,t,n,r,a,s){const o=na(e,"x","batchNorm"),i=na(t,"mean","batchNorm"),u=na(n,"variance","batchNorm");let l,p;return null!=a&&(l=na(a,"scale","batchNorm")),null!=r&&(p=na(r,"offset","batchNorm")),_(3===o.rank,()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`),_(3===i.rank||1===i.rank,()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${i.rank}.`),_(3===u.rank||1===u.rank,()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${u.rank}.`),null!=l&&_(3===l.rank||1===l.rank,()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${l.rank}.`),null!=p&&_(3===p.rank||1===p.rank,()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${p.rank}.`),ko(o,i,u,p,l,s)}}),xo=sa({batchNorm4d_:function(e,t,n,r,a,s){const o=na(e,"x","batchNorm"),i=na(t,"mean","batchNorm"),u=na(n,"variance","batchNorm");let l,p;return null!=a&&(l=na(a,"scale","batchNorm")),null!=r&&(p=na(r,"offset","batchNorm")),_(4===o.rank,()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`),_(4===i.rank||1===i.rank,()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${i.rank}.`),_(4===u.rank||1===u.rank,()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${u.rank}.`),null!=l&&_(4===l.rank||1===l.rank,()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${l.rank}.`),null!=p&&_(4===p.rank||1===p.rank,()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${p.rank}.`),ko(o,i,u,p,l,s)}}),vo=sa({bincount_:function(e,t,n){const r=na(e,"x","bincount"),a=na(t,"weights","bincount");_("int32"===r.dtype,()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`),_(n>=0,()=>`size must be non-negative, but got ${n}.`),_(a.size===r.size||0===a.size,()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`);const s={x:r,weights:a},o={size:n};return Jr.runKernel(ve,s,o)}}),To=sa({broadcastArgs_:function(e,t){const n=na(e,"s0","broadcastArgs","int32"),r=na(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const a={s0:n,s1:r};return Jr.runKernel(Te,a)}}),Io=sa({broadcastTo_:function(e,t){let n=na(e,"broadcastTo","x");const r=n.shape;if(t.some(e=>!(e>0)||e%1!=0))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=io(n,e)}const a=n.shape,s=Array.from(t);for(let e=t.length-1;e>=0;e--)if(a[e]===t[e])s[e]=1;else if(1!==n.shape[e])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===s.map((e,t)=>e>1?t:-1).filter(e=>e>=0).length)return us(n);const o={x:n},i={reps:s};return Jr.runKernel(Cn,o,i)}}),So=sa({ceil_:function(e){const t={x:na(e,"x","ceil","float32")};return Jr.runKernel(Se,t)}});function Eo(e,t,n){const r={shape:e,value:t,dtype:n};return Jr.runKernel(at,{},r)}const _o=sa({clipByValue_:function(e,t,n){const r=na(e,"x","clipByValue");if(_(t<=n,()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`),t===n)return Eo(r.shape,t,r.dtype);const a={x:r},s={clipValueMin:t,clipValueMax:n};return Jr.runKernel(Ee,a,s)}}),Mo=sa({concat1d_:function(e){return po(e,0)}}),$o=sa({concat2d_:function(e,t){return po(e,t)}}),Ao=sa({concat3d_:function(e,t){return po(e,t)}}),Do=sa({concat4d_:function(e,t){return po(e,t)}}),Fo=sa({conv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const i=na(e,"x","conv2d","float32"),u=na(t,"filter","conv2d","float32");let l=i,p=!1;3===i.rank&&(p=!0,l=io(i,[1,i.shape[0],i.shape[1],i.shape[2]])),_(4===l.rank,()=>`Error in conv2d: input must be rank 4, but got rank ${l.rank}.`),_(4===u.rank,()=>`Error in conv2d: filter must be rank 4, but got rank ${u.rank}.`),oo("conv2d",r,o);const c="NHWC"===a?l.shape[3]:l.shape[1];_(c===u.shape[2],()=>`Error in conv2d: depth of input (${c}) must match input depth for filter ${u.shape[2]}.`),_(ao(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);const d={x:l,filter:u},h={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},f=Jr.runKernel(Ae,d,h);return p?io(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Oo=sa({conv1d_:function(e,t,n,r,a="NWC",s=1,o){const i=na(e,"x","conv1d"),u=na(t,"filter","conv1d");let l=i,p=!1;2===i.rank&&(p=!0,l=io(i,[1,i.shape[0],i.shape[1]])),_(3===l.rank,()=>`Error in conv1d: input must be rank 3, but got rank ${l.rank}.`),_(3===u.rank,()=>`Error in conv1d: filter must be rank 3, but got rank ${u.rank}.`),oo("conv1d",r,o),_(l.shape[2]===u.shape[1],()=>`Error in conv1d: depth of input (${l.shape[2]}) must match input depth for filter ${u.shape[1]}.`),_(ao(n,s),()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`),_("NWC"===a,()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`);const c=io(u,[1,u.shape[0],u.shape[1],u.shape[2]]),d=io(l,[l.shape[0],1,l.shape[1],l.shape[2]]),h=Fo(d,c,[1,n],r,"NHWC",[1,s],o);return io(h,p?[h.shape[2],h.shape[3]]:[h.shape[0],h.shape[2],h.shape[3]])}}),Ro=sa({conv2DBackpropInput_:function(e,t,n,r,a,s="NHWC",o){_(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let i=e,u=t,l=!1;3===t.rank&&(l=!0,u=io(t,[1,t.shape[0],t.shape[1],t.shape[2]]),i=[1,e[0],e[1],e[2]]),_(4===i.length,()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${i.length}.`),_(4===u.rank,()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${u.rank}`),_(4===n.rank,()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`);const p="NHWC"===s?i[3]:i[1],c="NHWC"===s?u.shape[3]:u.shape[1];_(p===n.shape[2],()=>`Error in conv2dDerInput: depth of input (${p}) must match input depth for filter ${n.shape[2]}.`),_(c===n.shape[3],()=>`Error in conv2dDerInput: depth of output (${c}) must match output depth for filter ${n.shape[3]}.`),oo("conv2dDerInput",a,o);const d={dy:u,filter:n},h={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,inputShape:i},f=Jr.runKernel(Fe,d,h);return l?io(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),Co=sa({conv2dTranspose_:function(e,t,n,r,a,s){const o=na(e,"x","conv2dTranspose"),i=na(t,"filter","conv2dTranspose");return Ro(n,o,i,r,a,"NHWC",s)}}),zo=sa({conv3d_:function(e,t,n,r,a="NDHWC",s=[1,1,1]){const o=na(e,"x","conv3d"),i=na(t,"filter","conv3d");let u=o,l=!1;4===o.rank&&(l=!0,u=io(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),_(5===u.rank,()=>`Error in conv3d: input must be rank 5, but got rank ${u.rank}.`),_(5===i.rank,()=>`Error in conv3d: filter must be rank 5, but got rank ${i.rank}.`),_(u.shape[4]===i.shape[3],()=>`Error in conv3d: depth of input (${u.shape[4]}) must match input depth for filter ${i.shape[3]}.`),_(ao(n,s),()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),_("NDHWC"===a,()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`);const p={x:u,filter:i},c={strides:n,pad:r,dataFormat:a,dilations:s},d=Jr.runKernel(Oe,p,c);return l?io(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Lo=sa({conv3DBackpropInput_:function(e,t,n,r,a){_(e.length===t.rank,()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`);let s=e,o=t,i=!1;4===t.rank&&(i=!0,o=io(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),s=[1,e[0],e[1],e[2],e[3]]);const u=s[4],l=o.shape[4];_(5===s.length,()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${s.length}.`),_(5===o.rank,()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${o.rank}`),_(5===n.rank,()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`),_(u===n.shape[3],()=>`Error in conv3dDerInput: depth of input (${u}) must match input depth for filter ${n.shape[3]}.`),_(l===n.shape[4],()=>`Error in conv3dDerInput: depth of output (${l}) must match output depth for filter ${n.shape[4]}.`);const p={dy:o,filter:n},c={pad:a,strides:r,inputShape:s},d=Jr.runKernel(Re,p,c);return i?io(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),Bo=sa({conv3dTranspose_:function(e,t,n,r,a){const s=na(e,"x","conv3dTranspose"),o=na(t,"filter","conv3dTranspose");return Lo(n,s,o,r,a)}}),Po=sa({cos_:function(e){const t={x:na(e,"x","cos","float32")};return Jr.runKernel(Ce,t)}}),Vo=sa({cosh_:function(e){const t={x:na(e,"x","cosh","float32")};return Jr.runKernel(ze,t)}}),Wo=sa({cumprod_:function(e,t=0,n=!1,r=!1){const a={x:na(e,"x","cumprod")},s={axis:t,exclusive:n,reverse:r};return Jr.runKernel(Le,a,s)}}),Ho=sa({cumsum_:function(e,t=0,n=!1,r=!1){const a={x:na(e,"x","cumsum")},s={axis:t,exclusive:n,reverse:r};return Jr.runKernel(Be,a,s)}}),Uo=sa({denseBincount_:function(e,t,n,r=!1){const a=na(e,"x","denseBincount"),s=na(t,"weights","denseBincount");_("int32"===a.dtype,()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`),_(a.rank<=2,()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`),_(n>=0,()=>`size must be non-negative, but got ${n}.`),_(s.size===a.size||0===s.size,()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${s.shape}.`);const o={x:a,weights:s},i={size:n,binaryOutput:r};return Jr.runKernel(Ve,o,i)}}),qo=sa({depthToSpace_:function(e,t,n="NHWC"){const r=na(e,"x","depthToSpace","float32"),a="NHWC"===n?r.shape[1]:r.shape[2],s="NHWC"===n?r.shape[2]:r.shape[3],o="NHWC"===n?r.shape[3]:r.shape[1];_(t>1,()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`),_(a*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${r.shape}`),_(s*t>=0,()=>`Negative dimension size caused by overflow when multiplying\n    ${s} and ${t} for depthToSpace with input shape\n        ${r.shape}`),_(o%(t*t)===0,()=>`Dimension size must be evenly divisible by ${t*t} but is ${o} for depthToSpace with input shape ${r.shape}`);const i={x:r},u={blockSize:t,dataFormat:n};return Jr.runKernel(We,i,u)}}),Ko=sa({depthwiseConv2d_:function(e,t,n,r,a="NHWC",s=[1,1],o){const i=na(e,"x","depthwiseConv2d","float32"),u=na(t,"filter","depthwiseConv2d","float32");let l=i,p=!1;3===i.rank&&(p=!0,l=io(i,[1,i.shape[0],i.shape[1],i.shape[2]])),_(4===l.rank,()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${l.rank}.`),_(4===u.rank,()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${u.rank}.`);const c="NHWC"===a?l.shape[3]:l.shape[1];_(c===u.shape[2],()=>`Error in depthwiseConv2d: number of input channels (${c}) must match the inChannels dimension in filter ${u.shape[2]}.`),oo("depthwiseConv2d",r,o);const d={x:l,filter:u},h={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o},f=Jr.runKernel(He,d,h);return p?io(f,[f.shape[1],f.shape[2],f.shape[3]]):f}}),jo=sa({diag_:function(e){const t={x:na(e,"x","diag")};return Jr.runKernel(Ke,t)}}),Go=sa({dilation2d_:function(e,t,n,r,a=[1,1],s="NHWC"){const o=na(e,"x","dilation2d"),i=na(t,"filter","dilation2d");_(3===o.rank||4===o.rank,()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${o.rank}.`),_(3===i.rank,()=>`Error in dilation2d: filter must be rank 3, but got rank ${i.rank}.`),_("NHWC"===s,()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${s}`);let u=o,l=!1;3===o.rank&&(u=io(o,[1,o.shape[0],o.shape[1],o.shape[2]]),l=!0);const p={x:u,filter:i},c={strides:n,pad:r,dilations:a},d=Jr.runKernel(je,p,c);return l?io(d,[d.shape[1],d.shape[2],d.shape[3]]):d}}),Zo=sa({floorDiv_:function(e,t){let n=na(e,"a","floorDiv"),r=na(t,"b","floorDiv");[n,r]=Hr(n,r);const a={a:n,b:r};return Jr.runKernel(it,a)}}),Jo=sa({div_:function(e,t){let n=na(e,"a","div"),r=na(t,"b","div");if([n,r]=Hr(n,r),"int32"===n.dtype&&"int32"===r.dtype)return Zo(n,r);const a={a:n,b:r};return Jr.runKernel(Je,a,{})}}),Yo=sa({equal_:function(e,t){let n=na(e,"a","equal","string_or_numeric"),r=na(t,"b","equal","string_or_numeric");[n,r]=Hr(n,r),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(et,a)}}),Qo=sa({where_:function(e,t,n){const r=na(t,"a","where"),a=na(n,"b","where"),s=na(e,"condition","where","bool"),o=As(As(s.shape,r.shape),a.shape),i={condition:Io(s,o),t:Io(r,o),e:Io(a,o)};return Jr.runKernel(cn,i)}}),Xo=sa({zerosLike_:function(e){const t={x:na(e,"x","zerosLike")};return Jr.runKernel(Hn,t)}}),ei=sa({divNoNan_:function(e,t){let n=na(e,"a","div"),r=na(t,"b","div");[n,r]=Hr(n,r);const a=Jo(n,r),s=Xo(a),o=Yo(r,s);return Qo(o,s,a)}}),ti=sa({dot_:function(e,t){const n=na(e,"t1","dot"),r=na(t,"t2","dot");_(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`);const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(_(a===s,()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`),1===n.rank&&1===r.rank){const e=io(n,[1,-1]),t=io(r,[-1,1]),a=co(e,t);return io(a,[])}if(1===n.rank&&2===r.rank){const e=io(n,[1,-1]),t=io(r,[r.shape[0],r.shape[1]]),a=co(e,t);return io(a,[a.size])}if(2===n.rank&&1===r.rank){const e=io(r,[-1,1]),t=co(n,e);return io(t,[t.size])}{const e=io(r,[r.shape[0],r.shape[1]]);return co(n,e)}}}),ni=sa({einsum_:function(e,...t){const n=t.map((e,t)=>na(e,`tensors${t}`,"einsum")),r={equation:e};return Jr.runKernel(Ye,n,r)}}),ri=sa({elu_:function(e){const t={x:na(e,"x","elu","float32")};return Jr.runKernel(Qe,t)}}),ai=sa({erf_:function(e){let t=na(e,"x","erf");_("int32"===t.dtype||"float32"===t.dtype,()=>"Input dtype must be `int32` or `float32`."),"int32"===t.dtype&&(t=is(t,"float32"));const n={x:t};return Jr.runKernel(Xe,n)}});function si(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function oi(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map(t=>e[t])]}function ii(e,t){return function(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}(e,t.map(e=>1),t)}function ui(e,t,n){_(si(t,n),()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`)}function li(e,t){if(si(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach(e=>n.push(e)),n}function pi(e){return e.map((e,t)=>[t,e]).sort((e,t)=>e[1]-t[1]).map(e=>e[0])}function ci(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}const di=sa({max_:function(e,t=null,n=!1){const r={x:na(e,"x","max")},a={reductionIndices:t,keepDims:n};return Jr.runKernel("Max",r,a)}}),hi=sa({min_:function(e,t=null,n=!1){const r={x:na(e,"x","min")},a={axis:t,keepDims:n};return Jr.runKernel("Min",r,a)}}),fi=sa({pow_:function(e,t){let n=na(e,"base","pow"),r=na(t,"exp","pow");[n,r]=Hr(n,r);const a={a:n,b:r};return Jr.runKernel(Kt,a)}});function mi(e,t){if((B(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&B(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return ia(e,[],[],t)}const gi=sa({sqrt_:function(e){const t={x:na(e,"x","sqrt","float32")};return Jr.runKernel(kn,t)}}),yi=sa({square_:function(e){const t=na(e,"x","square");return Jr.runKernel("Square",{x:t},{})}}),bi=sa({sum_:function(e,t=null,n=!1){let r=na(e,"x","sum");"bool"===r.dtype&&(r=is(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return Jr.runKernel("Sum",a,s)}});function ki(e,t,n=null){if(0===e.rank)return Fs(e);if(1!==e.rank&&null===n)return ki(io(e,[-1]),t,n);if(1===e.rank||"number"==typeof n||Array.isArray(n)&&1===n.length){if(1===t)return bi(Fs(e),n);if(t===1/0)return di(Fs(e),n);if(t===-1/0)return hi(Fs(e),n);if("euclidean"===t||2===t)return gi(bi(fi(Fs(e),mi(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return di(bi(Fs(e),n[0]),n[1]-1);if(t===1/0)return di(bi(Fs(e),n[1]),n[0]);if(t===-1/0)return hi(bi(Fs(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return gi(bi(yi(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const wi=sa({norm_:function(e,t="euclidean",n=null,r=!1){const a=ki(e=na(e,"x","norm"),t,n);let s=a.shape;if(r){const t=C(n,e.shape);s=ii(a.shape,t)}return io(a,s)}}),Ni=sa({euclideanNorm_:function(e,t=null,n=!1){return wi(e,"euclidean",t,n)}}),xi=sa({exp_:function(e){const t={x:na(e,"x","exp")};return Jr.runKernel(tt,t)}}),vi=sa({expandDims_:function(e,t=0){const n=na(e,"x","expandDims","string_or_numeric");_(t<=n.rank,()=>"Axis must be <= rank of the tensor");const r={input:n},a={dim:t};return Jr.runKernel(nt,r,a)}}),Ti=sa({expm1_:function(e){const t={x:na(e,"x","expm1")};return Jr.runKernel(rt,t)}}),Ii=sa({tile_:function(e,t){const n=na(e,"x","tile","string_or_numeric");_(n.rank===t.length,()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`);const r={x:n},a={reps:t};return Jr.runKernel(Cn,r,a)}}),Si=sa({eye_:function(e,t,n,r="float32"){null==t&&(t=e);const a=os([e,t],r),s=e<=t?e:t;for(let e=0;e<s;++e)a.set(1,e,e);const o=io(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Ii(vi(o,0),[n[0],1,1]);if(2===n.length)return Ii(vi(vi(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Ii(vi(vi(vi(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}}),Ei=sa({floor_:function(e){const t={x:na(e,"x","floor","float32")};return Jr.runKernel(ot,t)}}),_i=sa({gather_:function(e,t,n=0,r=0){const a={x:na(e,"x","gather"),indices:na(t,"indices","gather","int32")},s={axis:n,batchDims:r};return Jr.runKernel(lt,a,s)}}),Mi=sa({greater_:function(e,t){let n=na(e,"a","greater","string_or_numeric"),r=na(t,"b","greater","string_or_numeric");[n,r]=Hr(n,r),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(ct,a)}}),$i=sa({greaterEqual_:function(e,t){let n=na(e,"a","greaterEqual","string_or_numeric"),r=na(t,"b","greaterEqual","string_or_numeric");[n,r]=Hr(n,r),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(dt,a)}}),Ai=sa({imag_:function(e){const t={input:na(e,"input","imag")};return Jr.runKernel(mt,t)}}),Di=sa({isFinite_:function(e){const t={x:na(e,"x","isFinite")};return Jr.runKernel(gt,t)}}),Fi=sa({isInf_:function(e){const t={x:na(e,"x","isInf")};return Jr.runKernel(yt,t)}}),Oi=sa({isNaN_:function(e){const t={x:na(e,"x","isNaN")};return Jr.runKernel(bt,t)}}),Ri=sa({leakyRelu_:function(e,t=.2){const n={x:na(e,"x","leakyRelu")},r={alpha:t};return Jr.runKernel(kt,n,r)}}),Ci=sa({less_:function(e,t){let n=na(e,"a","less","string_or_numeric"),r=na(t,"b","less","string_or_numeric");[n,r]=Hr(n,r),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(wt,a)}}),zi=sa({lessEqual_:function(e,t){let n=na(e,"a","lessEqual","string_or_numeric"),r=na(t,"b","lessEqual","string_or_numeric");[n,r]=Hr(n,r),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(Nt,a)}});function Li(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return Jr.runKernel(xt,{},r)}const Bi=sa({localResponseNormalization_:function(e,t=5,n=1,r=1,a=.5){const s=na(e,"x","localResponseNormalization");_(4===s.rank||3===s.rank,()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${s.rank}.`),_(O(t),()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`);let o=s,i=!1;3===s.rank&&(i=!0,o=io(s,[1,s.shape[0],s.shape[1],s.shape[2]]));const u={x:o},l={depthRadius:t,bias:n,alpha:r,beta:a},p=Jr.runKernel("LRN",u,l);return i?io(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),Pi=sa({log_:function(e){const t={x:na(e,"x","log","float32")};return Jr.runKernel(vt,t)}}),Vi=sa({log1p_:function(e){const t={x:na(e,"x","log1p")};return Jr.runKernel(Tt,t)}});function Wi(e){return Jr.customGrad(e)}const Hi=sa({neg_:function(e){const t={x:na(e,"x","neg")};return Jr.runKernel("Neg",t)}}),Ui=sa({softplus_:function(e){const t={x:na(e,"x","softplus")};return Jr.runKernel(bn,t)}}),qi=sa({logSigmoid_:function(e){const t=na(e,"x","logSigmoid");return Wi(e=>({value:Hi(Ui(Hi(e))),gradFunc:t=>ho(t,fo(Hi(e)))}))(t)}}),Ki=sa({sub_:function(e,t){let n=na(e,"a","sub"),r=na(t,"b","sub");[n,r]=Hr(n,r);const a={a:n,b:r};return Jr.runKernel(Fn,a)}}),ji=sa({logSoftmax_:function(e,t=-1){const n=na(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=Wi((e,n)=>{const r=di(e,t,!0),a=Ki(e,r),s=Ki(is(a,"float32"),Pi(bi(xi(a),t,!0)));return n([s]),{value:s,gradFunc:(e,n)=>{const[r]=n,a=xi(r);return Ki(e,ho(bi(e,t,!0),a))}}});return r(n)}}),Gi=sa({logSumExp_:function(e,t=null,n=!1){const r=na(e,"x","logSumExp"),a=C(t,r.shape),s=di(r,a,!0),o=Ki(r,s),i=xi(o),u=bi(i,a),l=Pi(u),p=Cs(io(s,l.shape),l);if(n){const e=ii(p.shape,a);return io(p,e)}return p}}),Zi=sa({logicalAnd_:function(e,t){const n=na(e,"a","logicalAnd","bool"),r=na(t,"b","logicalAnd","bool");As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(It,a)}}),Ji=sa({logicalNot_:function(e){const t={x:na(e,"x","logicalNot","bool")};return Jr.runKernel(St,t)}}),Yi=sa({logicalOr_:function(e,t){const n=na(e,"a","logicalOr","bool"),r=na(t,"b","logicalOr","bool");As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(Et,a)}}),Qi=sa({logicalXor_:function(e,t){const n=na(e,"a","logicalXor","bool"),r=na(t,"b","logicalXor","bool");return As(n.shape,r.shape),Zi(Yi(e,t),Ji(Zi(e,t)))}}),Xi=2147483648,eu=sa({searchSorted_:function(e,t,n="left"){const r=na(e,"sortedSequence","searchSorted"),a=na(t,"values","searchSorted"),s=r.shape[r.shape.length-1],o=a.shape[a.shape.length-1],i=io(r,[-1,s]),u=io(a,[-1,o]);if(i.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(i.shape[0]!==u.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if(D(u.shape)>=Xi)throw new Error("values tensor size must less than 2147483648");if(i.shape[1]>=Xi)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${i.shape[1]}`);const l={sortedSequence:i,values:u},p={side:n};return Jr.runKernel(pn,l,p)}});function tu(e,t){return eu(e,t,"left")}const nu=sa({maxPool_:function(e,t,n,r,a){const s=na(e,"x","maxPool");let o=s,i=!1;3===s.rank&&(i=!0,o=io(s,[1,s.shape[0],s.shape[1],s.shape[2]])),_(4===o.rank,()=>`Error in maxPool: input must be rank 4 but got rank ${o.rank}.`),_(ao(n,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`),oo("maxPool",r,a);const u={x:o},l={filterSize:t,strides:n,pad:r,dimRoundingMode:a},p=Jr.runKernel(Mt,u,l);return i?io(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ru=sa({maxPool3d_:function(e,t=[1,1,1],n,r,a,s="NDHWC"){const o=na(e,"x","maxPool3d");let i=o,u=!1;4===o.rank&&(u=!0,i=io(o,[1,o.shape[0],o.shape[1],o.shape[2],o.shape[3]])),_(5===i.rank,()=>`Error in maxPool3d: x must be rank 5 but got rank ${i.rank}.`),_("NDHWC"===s,()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${s}`),oo("maxPool3d",r,a);const l={x:i},p={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:s},c=Jr.runKernel($t,l,p);return u?io(c,[c.shape[1],c.shape[2],c.shape[3],c.shape[4]]):c}}),au=sa({maxPoolWithArgmax_:function(e,t,n,r,a=!1){const s={x:na(e,"x","maxPoolWithArgmax")},o={filterSize:t,strides:n,pad:r,includeBatchInIndex:a},i=Jr.runKernel(At,s,o);return{result:i[0],indexes:i[1]}}}),su=sa({maximum_:function(e,t){let n=na(e,"a","maximum"),r=na(t,"b","maximum");[n,r]=Hr(n,r),"bool"===n.dtype&&(n=is(n,"int32"),r=is(r,"int32")),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(_t,a)}}),ou=sa({mean_:function(e,t=null,n=!1){const r={x:na(e,"x","mean")},a={axis:t,keepDims:n};return Jr.runKernel(Dt,r,a)}});function iu(e,t="float32"){if("complex64"===t){const t=iu(e,"float32"),n=iu(e,"float32");return oa(t,n)}const n=G(D(e),t);return Jr.makeTensor(n,e,t)}function uu(e,t="float32"){if("complex64"===t){const t=uu(e,"float32"),n=iu(e,"float32");return oa(t,n)}const n=j(D(e),t);return Jr.makeTensor(n,e,t)}function lu(e,t,{indexing:n="xy"}={}){if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=na(e,"x","meshgrid",e instanceof Or?e.dtype:"float32");if(void 0===t)return[r];let a=na(t,"y","meshgrid",t instanceof Or?t.dtype:"float32");const s=D(r.shape),o=D(a.shape);return"xy"===n?(r=io(r,[1,-1]),a=io(a,[-1,1]),[co(uu([o,1],r.dtype),r),co(a,uu([1,s],a.dtype))]):(r=io(r,[-1,1]),a=io(a,[1,-1]),[co(r,uu([1,o],r.dtype)),co(uu([s,1],a.dtype),a)])}const pu=sa({minimum_:function(e,t){let n=na(e,"a","minimum"),r=na(t,"b","minimum");[n,r]=Hr(n,r),"bool"===n.dtype&&(n=is(n,"int32"),r=is(r,"int32")),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(Ft,a)}}),cu=sa({mirrorPad_:function(e,t,n){_("reflect"===n||"symmetric"===n,()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`);const r=na(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");_(t.length===r.rank,()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`);const a="reflect"===n?1:0;for(let e=0;e<r.rank;e++)_(2===t[e].length,()=>"Invalid number of paddings. Must be length of 2 each."),_(t[e][0]>=0&&t[e][0]<=r.shape[e]-a&&t[e][1]>=0&&t[e][1]<=r.shape[e]-a,()=>`Padding in dimension ${e} cannot be greater than or equal to ${r.shape[e]-a} or less than 0 for input of shape ${r.shape}`);const s={paddings:t,mode:n},o={x:r};return Jr.runKernel(Ot,o,s)}}),du=sa({mod_:function(e,t){let n=na(e,"a","mod"),r=na(t,"b","mod");[n,r]=Hr(n,r);const a={a:n,b:r};return Jr.runKernel(Rt,a)}}),hu=sa({moments_:function(e,t=null,n=!1){const r=C(t,(e=na(e,"x","moments")).shape),a=ou(e,r,n);let s=a.shape;n||(s=ii(a.shape,r));const o=yi(Ki(is(e,"float32"),io(a,s)));return{mean:a,variance:ou(o,r,n)}}}),fu=sa({multiRNNCell_:function(e,t,n,r){const a=na(t,"data","multiRNNCell"),s=ra(n,"c","multiRNNCell"),o=ra(r,"h","multiRNNCell");let i=a;const u=[];for(let t=0;t<e.length;t++){const n=e[t](i,s[t],o[t]);u.push(n[0]),u.push(n[1]),i=n[1]}const l=[],p=[];for(let e=0;e<u.length;e+=2)l.push(u[e]),p.push(u[e+1]);return[l,p]}}),mu=sa({multinomial_:function(e,t,n,r=!1){const a=na(e,"logits","multinomial"),s=a.size,o=a.rank;if(s<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${s}.`);if(o>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${o}`);n=n||Math.random();const i={logits:1===o?io(a,[1,-1]):a},u={numSamples:t,seed:n,normalized:r},l=Jr.runKernel(Ct,i,u);return 1===o?io(l,[l.size]):l}}),gu=sa({notEqual_:function(e,t){let n=na(e,"a","notEqual","string_or_numeric"),r=na(t,"b","notEqual","string_or_numeric");[n,r]=Hr(n,r),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(Lt,a)}}),yu=sa({oneHot_:function(e,t,n=1,r=0,a="int32"){if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const s={indices:na(e,"indices","oneHot","int32")},o={dtype:a,depth:t,onValue:n,offValue:r};return Jr.runKernel(Ht,s,o)}}),bu=sa({onesLike_:function(e){const t={x:na(e,"x","onesLike")};return Jr.runKernel(Wt,t)}}),ku=sa({outerProduct_:function(e,t){const n=na(e,"v1","outerProduct"),r=na(t,"v2","outerProduct");_(1===n.rank&&1===r.rank,()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`);const a=io(n,[-1,1]),s=io(r,[1,-1]);return co(a,s)}}),wu=sa({pad_:function(e,t,n=0){const r=na(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},s={x:r};return Jr.runKernel(qt,s,a)}}),Nu=sa({pad1d_:function(e,t,n=0){return _(2===t.length,()=>"Invalid number of paddings. Must be length of 2."),wu(e,[t],n)}}),xu=sa({pad2d_:function(e,t,n=0){return _(2===t.length&&2===t[0].length&&2===t[1].length,()=>"Invalid number of paddings. Must be length of 2 each."),wu(e,t,n)}}),vu=sa({pad3d_:function(e,t,n=0){return _(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,()=>"Invalid number of paddings. Must be length of 2 each."),wu(e,t,n)}}),Tu=sa({pad4d_:function(e,t,n=0){return _(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,()=>"Invalid number of paddings. Must be length of 2 each."),wu(e,t,n)}}),Iu=sa({spaceToBatchND_:function(e,t,n){const r=na(e,"x","spaceToBatchND");_(r.rank>=1+t.length,()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`),_(n.length===t.length,()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`),_(r.shape.reduce((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]===0:e,!0),()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`);const a={x:r},s={blockShape:t,paddings:n};return Jr.runKernel(wn,a,s)}}),Su=sa({pool_:function(e,t,n,r,a,s,o){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const i=na(e,"x","maxPool");let u=i,l=!1;3===i.rank&&(l=!0,u=io(i,[1,i.shape[0],i.shape[1],i.shape[2]])),_(ao(s,a),()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`);const p=Gs(u.shape,t,s,a,r),c=[p.dilationHeight,p.dilationWidth];let d;d="same"===r?function(e,t){const n=e.map((e,n)=>e+(e-1)*(t[n]-1)).map(e=>e-1),r=n.map(e=>Math.floor(e/2)),a=n.map((e,t)=>e-r[t]);return n.map((e,t)=>[r[t],a[t]])}([p.filterHeight,p.filterWidth],c):[[0,0],[0,0]];const h=1===c[0]&&1===c[1],[f,m]=function(e,t,n){const r=n.map(e=>e[0]),a=n.map(e=>e[1]),s=e.concat(r,a),o=t.map((e,t)=>(e-s[t]%e)%e),i=a.map((e,t)=>e+o[t]);return[t.map((e,t)=>[r[t],i[t]]),t.map((e,t)=>[0,o[t]])]}([p.inHeight,p.inWidth],c,d),g=h?r:"valid",y=h?u:Iu(u,c,f),b=("avg"===n?()=>uo(y,t,s,g,o):()=>nu(y,t,s,g,o))(),k=h?b:bo(b,c,m);return l?io(k,[k.shape[1],k.shape[2],k.shape[3]]):k}}),Eu=sa({prelu_:function(e,t){const n={x:na(e,"x","prelu"),alpha:na(t,"alpha","prelu")};return Jr.runKernel(jt,n)}}),_u=sa({prod_:function(e,t=null,n=!1){let r=na(e,"x","prod");"bool"===r.dtype&&(r=is(r,"int32"));const a={x:r},s={axis:t,keepDims:n};return Jr.runKernel(Gt,a,s)}}),Mu=sa({raggedGather_:function(e,t,n,r){const a={paramsNestedSplits:e.map((e,t)=>na(e,`tensors${t}`,"raggedGather","int32")),paramsDenseValues:na(t,"paramsDenseValues","raggedGather"),indices:na(n,"indices","raggedGather","int32")},s={outputRaggedRank:r},o=Jr.runKernel(Zt,a,s);return{outputNestedSplits:o.slice(0,o.length-1),outputDenseValues:o[o.length-1]}}}),$u=sa({raggedTensorToTensor_:function(e,t,n,r,a){const s=na(e,"shape","raggedTensorToTensor","int32"),o=na(t,"values","raggedTensorToTensor"),i={shape:s,values:o,defaultValue:na(n,"defaultValue","raggedTensorToTensor",o.dtype),rowPartitionTensors:r.map((e,t)=>na(e,`tensors${t}`,"raggedTensorToTensor","int32"))},u={rowPartitionTypes:a};return Jr.runKernel(Jt,i,u)}}),Au=sa({rand_:function(e,t,n){const r=D(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(r)}for(let e=0;e<r;e++)a[e]=t();return Jr.makeTensor(a,e,n)}});var Du=n(391);class Fu{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=a||Math.random();this.random=Du.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Ou{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const a=r||Math.random();this.randu=Du.alea(a.toString()),this.randn=new Fu(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Ru{constructor(e=0,t=1,n,r){if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Du.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Cu=sa({randomGamma_:function(e,t,n=1,r="float32",a){if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const s=new Ou(t,n,r,a),o=os(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}}),zu=sa({randomNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const s=new Fu(t,n,r,!1,a),o=os(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}}),Lu=sa({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return zu(e,0,1,t,n)}}),Bu=sa({randomUniform_:function(e,t=0,n=1,r="float32",a){const s=os(e,r),o=new Ru(t,n,null,a);for(let e=0;e<s.values.length;e++)s.values[e]=o.nextValue();return s.toTensor()}});function Pu(e,t,n=1,r="float32"){if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:r};return Jr.runKernel(Yt,{},a)}const Vu=sa({real_:function(e){const t={input:na(e,"input","real")};return Jr.runKernel(Qt,t)}}),Wu=sa({reciprocal_:function(e){const t={x:na(e,"x","reciprocal")};return Jr.runKernel(Xt,t)}}),Hu=sa({relu_:function(e){const t={x:na(e,"x","relu")};return Jr.runKernel(en,t)}}),Uu=sa({relu6_:function(e){const t={x:na(e,"x","relu6")};return Jr.runKernel(an,t)}}),qu=sa({reverse_:function(e,t){const n={x:na(e,"x","reverse")},r={dims:t};return Jr.runKernel(sn,n,r)}}),Ku=sa({reverse1d_:function(e){const t=na(e,"x","reverse");return _(1===t.rank,()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`),qu(t,0)}}),ju=sa({reverse2d_:function(e,t){const n=na(e,"x","reverse");return _(2===n.rank,()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`),qu(n,t)}}),Gu=sa({reverse3d_:function(e,t){const n=na(e,"x","reverse");return _(3===n.rank,()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`),qu(n,t)}}),Zu=sa({reverse4d_:function(e,t){const n=na(e,"x","reverse");return _(4===n.rank,()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`),qu(n,t)}}),Ju=sa({round_:function(e){const t={x:na(e,"x","round")};return Jr.runKernel(on,t)}}),Yu=sa({rsqrt_:function(e){const t={x:na(e,"x","rsqrt","float32")};return Jr.runKernel(un,t)}}),Qu=sa({selu_:function(e){const t={x:na(e,"x","selu")};return Jr.runKernel(dn,t)}}),Xu=sa({separableConv2d_:function(e,t,n,r,a,s=[1,1],o="NHWC"){const i=na(e,"x","separableConv2d"),u=na(t,"depthwiseFilter","separableConv2d"),l=na(n,"pointwiseFilter","separableConv2d");let p=i,c=!1;if(3===i.rank&&(c=!0,p=io(i,[1,i.shape[0],i.shape[1],i.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");_(4===p.rank,()=>`Error in separableConv2d: input must be rank 4, but got rank ${p.rank}.`),_(4===u.rank,()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${u.rank}.`),_(4===l.rank,()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${u.rank}.`),_(1===l.shape[0],()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${l.shape[0]}.`),_(1===l.shape[1],()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${l.shape[1]}.`);const d=u.shape[2],h=u.shape[3];_(l.shape[2]===d*h,()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${d*h}, but got ${l.shape[2]}.`);const f=Ko(p,u,r,a,o,s),m=Fo(f,l,1,"valid",o);return c?io(m,[m.shape[1],m.shape[2],m.shape[3]]):m}}),el=async function(e,t){const n=na(e,"x","setdiff1d"),r=na(t,"y","setdiff1d");_(n.dtype===r.dtype,()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`),_(1===n.rank,()=>`x should be 1D tensor, but got x (${n.shape}).`),_(1===r.rank,()=>`y should be 1D tensor, but got y (${r.shape}).`);const a=await n.data(),s=await r.data(),o=new Set(s);let i=0;for(let e=0;e<a.length;e++)o.has(a[e])||i++;const u=new $r([i],n.dtype),l=new $r([i],"int32");for(let e=0,t=0;e<a.length;e++)o.has(a[e])||(u.values[t]=a[e],l.values[t]=e,t++);return[u.toTensor(),l.toTensor()]},tl=sa({sign_:function(e){const t={x:na(e,"x","sign")};return Jr.runKernel(gn,t)}}),nl=sa({sin_:function(e){const t={x:na(e,"x","sin","float32")};return Jr.runKernel(fn,t)}}),rl=sa({sinh_:function(e){const t={x:na(e,"x","sinh")};return Jr.runKernel(mn,t)}}),al=sa({slice1d_:function(e,t,n){const r=na(e,"x","slice1d");return _(1===r.rank,()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`),mo(r,[t],[n])}}),sl=sa({slice2d_:function(e,t,n){const r=na(e,"x","slice2d");return _(2===r.rank,()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`),mo(r,t,n)}}),ol=sa({slice3d_:function(e,t,n){const r=na(e,"x","slice3d");return _(3===r.rank,()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`),mo(r,t,n)}}),il=sa({slice4d_:function(e,t,n){const r=na(e,"x","slice4d");return _(4===r.rank,()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`),mo(r,t,n)}}),ul=sa({softmax_:function(e,t=-1){const n=na(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},a={dim:t};return Jr.runKernel(xn,r,a)}}),ll=sa({fft_:function(e){_("complex64"===e.dtype,()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Jr.runKernel("FFT",t)}}),pl=sa({ifft_:function(e){_("complex64"===e.dtype,()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`);const t={input:e};return Jr.runKernel(ft,t)}}),cl=sa({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const a=io(e,[n,t]);r=pl(a)}else{const a=[n,2*(t-1)],s=io(Vu(e),[n,t]),o=io(Ai(e),[n,t]),i=qu(mo(s,[0,1],[n,t-2]),1),u=ho(qu(mo(o,[0,1],[n,t-2]),1),mi(-1)),l=po([s,i],1),p=po([o,u],1),c=io(oa(l,p),[a[0],a[1]]);r=pl(c)}if(r=Vu(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=io(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}}),dl=sa({split_:function(e,t,n=0){const r={x:na(e,"x","split")},a={numOrSizeSplits:t,axis:n};return Jr.runKernel(Nn,r,a)}}),hl=sa({rfft_:function(e,t){_("float32"===e.dtype,()=>`The dtype for rfft() must be real value but got ${e.dtype}`);let n=e.shape[e.shape.length-1];const r=e.size/n;let a;if(null!=t&&t<n){const r=e.shape.map(e=>0),s=e.shape.map(e=>e);s[e.shape.length-1]=t,a=mo(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map(e=>e);r[e.shape.length-1]=t-n,a=po([e,iu(r)],e.shape.length-1),n=t}else a=e;const s=Xo(a),o=io(oa(a,s),[r,n]),i=ll(o),u=Math.floor(n/2)+1,l=Vu(i),p=Ai(i),c=dl(l,[u,n-u],l.shape.length-1),d=dl(p,[u,n-u],p.shape.length-1),h=a.shape.slice();return h[a.shape.length-1]=u,io(oa(c[0],d[0]),h)}}),fl=sa({squaredDifference_:function(e,t){let n=na(e,"a","squaredDifference"),r=na(t,"b","squaredDifference");[n,r]=Hr(n,r),As(n.shape,r.shape);const a={a:n,b:r};return Jr.runKernel(_n,a,{})}}),ml=sa({squeeze_:function(e,t){const n=na(e,"x","squeeze","string_or_numeric");return io(n,function(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:C(t,e).sort();let o=0;for(let t=0;t<e.length;++t){if(null!=s){if(s[o]===t&&1!==e[t])throw new Error(`Can't squeeze axis ${t} since its dim '${e[t]}' is not 1`);(null==s[o]||s[o]>t)&&1===e[t]&&(n.push(e[t]),r.push(t)),s[o]<=t&&o++}1!==e[t]&&(n.push(e[t]),r.push(t))}return{newShape:n,keptDims:r}}(n.shape,t).newShape)}}),gl=sa({stack_:function(e,t=0){const n=ra(e,"tensors","stack","string_or_numeric");_(n.length>=1,()=>"Pass at least one tensor to tf.stack"),n.length>0&&_(t<=n[0].rank,()=>"Axis must be <= rank of the tensor");const r=n,a={axis:t};return Jr.runKernel(Ut,r,a)}}),yl=sa({step_:function(e,t=0){const n={x:na(e,"x","step")},r={alpha:t};return Jr.runKernel(Un,n,r)}}),bl=sa({stridedSlice_:function(e,t,n,r,a=0,s=0,o=0,i=0,u=0){const l={x:na(e,"x","stridedSlice","string_or_numeric")},p={begin:t,end:n,strides:r,beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};return Jr.runKernel(Mn,l,p)}}),kl=sa({tan_:function(e){const t={x:na(e,"x","tan","float32")};return Jr.runKernel(On,t)}});function wl(e,t){$(e);const n=Xr(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return ia(e,null,n,t)}function Nl(e,t,n){if($(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=Xr(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return ia(e,t,r,n)}function xl(e,t,n){if($(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const r=Xr(e,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return ia(e,t,r,n)}function vl(e,t,n){if($(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=Xr(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return ia(e,t,r,n)}function Tl(e,t,n){if($(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=Xr(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return ia(e,t,r,n)}function Il(e,t,n){if($(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=Xr(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return ia(e,t=t||r,r,n)}const Sl=sa({topk_:function(e,t=1,n=!0){const r=na(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const s={x:r},o={k:t,sorted:n},[i,u]=Jr.runKernel(zn,s,o);return{values:i,indices:u}}}),El=sa({truncatedNormal_:function(e,t=0,n=1,r,a){if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new Fu(t,n,r,!0,a),o=os(e,r);for(let e=0;e<o.values.length;e++)o.values[e]=s.nextValue();return o.toTensor()}}),_l=sa({unique_:function(e,t=0){const n=na(e,"x","unique","string_or_numeric");_(n.rank>0,()=>"The input tensor must be at least 1D");const r={x:n},a={axis:t},[s,o]=Jr.runKernel(Pn,r,a);return{values:s,indices:o}}}),Ml=sa({unsortedSegmentSum_:function(e,t,n){const r=na(e,"x","unsortedSegmentSum"),a=na(t,"segmentIds","unsortedSegmentSum","int32");_(O(n),()=>"numSegments must be of dtype int");const s={x:r,segmentIds:a},o={numSegments:n};return Jr.runKernel(Wn,s,o)}}),$l=sa({unstack_:function(e,t=0){const n=na(e,"x","unstack","string_or_numeric");_(t>=-n.shape.length&&t<n.shape.length,()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`);const r={value:n},a={axis:t};return Jr.runKernel(Vn,r,a)}});function Al(e,t){return eu(e,t,"right")}function Dl(e,t=!0,n,r){return Jr.makeVariable(e,t,n,r)}function Fl(e,t){const n=[];for(let e=0;e<t.length;e++)t[e]&&n.push(e);const r=os(e,"int32"),a=os([n.length,e.length],"int32");for(let t=0;t<n.length;t++){const s=r.indexToLoc(n[t]),o=t*e.length;a.values.set(s,o)}return a.toTensor()}const Ol=async function(e){const t=na(e,"condition","whereAsync","bool"),n=await t.data(),r=Fl(t.shape,n);return e!==t&&t.dispose(),r},Rl=async function(e,t,n){const r=na(e,"tensor","boolMask"),a=na(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,i=r.shape;_(o>0,()=>"mask cannot be scalar"),M(i.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let u=1;for(let e=s;e<s+o;e++)u*=i[e];const l=i.slice(0,s).concat([u],i.slice(s+o)),p=io(r,l),c=io(a,[-1]),d=await Ol(c),h=ml(d,[1]),f=_i(p,h,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),h.dispose(),p.dispose(),c.dispose(),d.dispose(),f};function Cl(){return Jr}function zl(e,t){return Jr.tidy(e,t)}function Ll(e){Ur(e).forEach(e=>e.dispose())}function Bl(e){return Jr.keep(e)}Fr=function(e){re().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")};const Pl=sa({transpose_:function(e,t,n){const r=na(e,"x","transpose");if(null==t&&(t=r.shape.map((e,t)=>t).reverse()),_(r.rank===t.length,()=>`Error in transpose: rank of input ${r.rank} must match length of perm ${t}.`),t.forEach(e=>{_(e>=0&&e<r.rank,()=>"All entries in 'perm' must be between 0 and "+(r.rank-1)+` but got ${t}`)}),r.rank<=1)return r.clone();const a={x:r},s={perm:t};return"complex64"===r.dtype?zl(()=>{let e=Vu(r),t=Ai(r);return e=Jr.runKernel(Bn,{x:e},s),t=Jr.runKernel(Bn,{x:t},s),n&&(t=Hi(t)),oa(e,t)}):Jr.runKernel(Bn,a,s)}}),Vl=sa({movingAverage_:function(e,t,n,r,a=!0){const s=na(e,"v","movingAverage"),o=na(t,"x","movingAverage"),i=na(n,"decay","movingAverage");var u,l;l=o,_((u=s).dtype===l.dtype,()=>`The dtypes of the first(${u.dtype}) and second(${l.dtype}) input must match`),_(F(s.shape,o.shape),()=>"Shape mismatch in v and x");const p=mi(1),c=Ki(p,i);let d=ho(Ki(o,s),c);if(a){_(null!=r,()=>"When using zeroDebias: true, step is required.");const e=na(r,"step","movingAverage");d=Jo(d,Ki(p,fi(i,e)))}return Cs(s,d)}});function Wl(e,t,n){const r=t.shape.length,a=r>1?t.shape[r-1]:1,s=n.length;let o=1;for(let e=a;e<s;++e)o*=n[e];const i=a<1?1:a;return{sliceRank:a,numUpdates:D(t.shape)/i,sliceSize:o,strides:[...U(n.slice(0,a)),1],outputSize:D(n)}}const Hl=sa({scatterND_:function(e,t,n){const r=na(e,"indices","scatterND","int32"),a=na(t,"updates","scatterND");!function(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}!function(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let e=0;e<a;++e)if(n.shape[e]!==t.shape[e])throw new Error(s+` updates.shape[${e}] (${n.shape[e]}) != indices.shape[${e}] (${t.shape[e]}).`);for(let t=0;t<n.rank-a;++t)if(n.shape[t+a]!==e[t+r])throw new Error(s+` updates.shape[${t+a}] (${n.shape[t+a]}) != shape[${t+a}] (${e[t+a]})`)}(n,t,e)}(a,r,n);const s={indices:r,updates:a},o={shape:n};return Jr.runKernel(ln,s,o)}}),Ul=sa({sparseToDense_:function(e,t,n,r=0){const a=na(e,"sparseIndices","sparseToDense","int32"),s=na(t,"sparseValues","sparseToDense","string_or_numeric"),o=na(r,"defaultValue","sparseToDense",s.dtype);!function(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(a,s,n,o);const i={sparseIndices:a,sparseValues:s,defaultValue:o},u={outputShape:n};return Jr.runKernel(En,i,u)}}),ql=sa({gatherND_:function(e,t){const n=na(t,"indices","gatherND","int32"),r={params:na(e,"x","gatherND","string_or_numeric"),indices:n};return Jr.runKernel(pt,r)}}),Kl=sa({dropout_:function(e,t,n,r){const a=na(e,"x","dropout");if(_("float32"===a.dtype,()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`),_(t>=0&&t<1,()=>`rate must be a float in the range [0, 1), but got ${t}.`),0===t)return e instanceof Or?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(F(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,i=Jo(Ei(Cs(Bu(s,0,1,"float32",r),o)),o);return ho(a,i)}});function jl(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function Gl(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return wl(a,"float32")}const Zl=async function(e,t,n=1){const r=na(e,"predictions","inTopK"),a=na(t,"targets","inTopK");_(r.rank>1,()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`),_(r.rank-1===a.rank,()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`),M(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];_(n>0&&n<=s,()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`);const o=await r.data(),i=await a.data(),[u,l]=[o.length/s,s],p=z("bool",u);for(let e=0;e<u;e++){const t=e*l,r=o.subarray(t,t+l),a=[];for(let e=0;e<r.length;e++)a.push({value:r[e],index:e});a.sort((e,t)=>t.value-e.value),p[e]=0;for(let t=0;t<n;t++)if(a[t].index===i[e]){p[e]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),ua(p,a.shape,"bool")},Jl=sa({conv2DBackpropFilter_:function(e,t,n,r,a,s="NHWC",o){let i=e;3===e.rank&&(i=io(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=io(t,[1,t.shape[0],t.shape[1],t.shape[2]])),_(4===i.rank,()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${i.shape}.`),_(4===u.rank,()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${u.shape}.`),_(4===n.length,()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`);const l="NHWC"===s?i.shape[3]:i.shape[1],p="NHWC"===s?u.shape[3]:u.shape[1];_(l===n[2],()=>`Error in conv2dDerFilter: depth of input ${l}) must match input depth in filter (${n[2]}.`),_(p===n[3],()=>`Error in conv2dDerFilter: depth of dy (${p}) must match output depth for filter (${n[3]}).`),oo("conv2dDerFilter",a,o);const c={x:i,dy:u},d={strides:r,pad:a,dataFormat:s,dimRoundingMode:o,filterShape:n};return Jr.runKernel(De,c,d)}});function Yl(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return ho(e,yl(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function Ql(e,t){let n=t;const r=function(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}(e.shape,t.shape);return r.length>0&&(n=bi(n,r)),io(n,e.shape)}function Xl(e,t,n,r){if("linear"===t)return e;if("relu"===t)return Hu(e);if("elu"===t)return ri(e);if("relu6"===t)return Uu(e);if("prelu"===t)return Eu(e,n);if("leakyrelu"===t)return Ri(e,r);if("sigmoid"===t)return fo(e);throw new Error(`Unknown fused activation ${t}.`)}const ep=(e,t)=>!(e>0)||"linear"===t,tp=sa({fusedConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:p}){if(u=u||"linear",!1===ep(Jr.state.gradientDepth,u)){_("NHWC"===a,()=>`Error in fused conv2d: got dataFormat of ${a} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`);let c=Fo(e,t,n,r,a,s,o);return null!=i&&(c=Cs(c,i)),Xl(c,u,l,p)}const c=na(e,"x","conv2d","float32"),d=na(t,"filter","conv2d","float32");let h=c,f=!1;3===c.rank&&(f=!0,h=io(c,[1,c.shape[0],c.shape[1],c.shape[2]])),_(4===h.rank,()=>`Error in fused conv2d: input must be rank 4, but got rank ${h.rank}.`),_(4===d.rank,()=>`Error in fused conv2d: filter must be rank 4, but got rank ${d.rank}.`),oo("fused conv2d",r,o);const m="NHWC"===a?h.shape[3]:h.shape[1];_(d.shape[2]===m,()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`),_(ao(n,s),()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`);const g=Js(h.shape,d.shape,n,s,r,o);let y,b;if(null!=i&&(y=na(i,"bias","fused conv2d"),[y]=Hr(y,c),"NHWC"===a?As(g.outShape,y.shape):(_(y.shape.length<=1,()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${y.shape.length}.`),_(0===y.shape.length||y.shape[0]===g.outChannels||1===y.shape[0],()=>`Error in fused conv2d: bias shape (${y.shape}) is not compatible with the number of output channels (${g.outChannels})`))),null!=l){const e=l.shape;if(_(e.length<=1||3===e.length,()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`),1===e.length)_(1===e[0]||e[0]===g.outChannels,()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${g.outChannels}).`);else if(3===e.length)try{As(e,g.outShape)}catch(t){const n=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${g.outShape}).`;throw Error(n)}b=na(l,"prelu weights","fused conv2d")}const k=(e,t)=>{_("NHWC"===a,()=>`Error in gradient of fused conv2D: got dataFormat of ${a} but only NHWC is currently supported.`);const[o,i,l,p]=t,c=Yl(e,l,u);_(ro(s),()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${s}'`);const d=[Ro(i.shape,c,o,n,r),Jl(i,c,o.shape,n,r)];if(null!=p){const e=Ql(p,c);d.push(e)}return d},w={x:h,filter:d,bias:y,preluActivationWeights:b},N={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:u,leakyreluAlpha:p};if(null==i){const e=Wi((e,t,n)=>{let r=Jr.runKernel(jn,w,N);return n([t,e,r]),f&&(r=io(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:k}});return e(h,d)}{const e=Wi((e,t,n,r)=>{let a=Jr.runKernel(jn,w,N);return r([t,e,a,n]),f&&(a=io(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:k}});return e(h,d,y)}}}),np=sa({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a,s=[1,1],o){let i=e;3===e.rank&&(i=io(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let u=t;3===u.rank&&(u=io(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={x:i,dy:u},p={strides:r,pad:a,dimRoundingMode:o,dilations:s,filterShape:n};return Jr.runKernel(Ue,l,p)}}),rp=sa({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a,s=[1,1],o){let i=t,u=!1;3===t.rank&&(u=!0,i=io(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const l={dy:i,filter:n},p={strides:r,pad:a,dimRoundingMode:o,dilations:s,inputShape:e},c=Jr.runKernel(qe,l,p);return u?io(c,[c.shape[1],c.shape[2],c.shape[3]]):c}}),ap=sa({fusedDepthwiseConv2d_:function({x:e,filter:t,strides:n,pad:r,dataFormat:a="NHWC",dilations:s=[1,1],dimRoundingMode:o,bias:i,activation:u="linear",preluActivationWeights:l,leakyreluAlpha:p}){if(!1===ep(Jr.state.gradientDepth,u)){let c=Ko(e,t,n,r,a,s,o);return null!=i&&(c=Cs(c,i)),Xl(c,u,l,p)}const c=na(e,"x","depthwiseConv2d","float32"),d=na(t,"filter","depthwiseConv2d","float32");let h=c,f=!1;3===c.rank&&(f=!0,h=io(c,[1,c.shape[0],c.shape[1],c.shape[2]])),_(4===h.rank,()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`),_(4===d.rank,()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`),_(h.shape[3]===d.shape[2],()=>`Error in fused depthwiseConv2d: number of input channels (${h.shape[3]}) must match the inChannels dimension in filter ${d.shape[2]}.`),null==s&&(s=[1,1]),_(ao(n,s),()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${n} and dilations '${s}'`),oo("fused depthwiseConv2d",r,o);const m=Js(h.shape,d.shape,n,s,r,o,!0);let g,y;null!=i&&(g=na(i,"bias","fused conv2d"),[g]=Hr(g,c),As(m.outShape,g.shape)),null!=l&&(y=na(l,"prelu weights","fused depthwiseConv2d"));const b=(e,t)=>{_(ro(s),()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${s}'`);const[a,i,l,p]=t,c=Yl(e,l,u),d=rp(i.shape,c,a,n,r,s,o),h=np(i,c,a.shape,n,r,s,o);return null!=p?[d,h,Ql(g,c)]:[d,h]},k={x:h,filter:d,bias:g,preluActivationWeights:y},w={strides:n,pad:r,dataFormat:a,dilations:s,dimRoundingMode:o,activation:u,leakyreluAlpha:p};if(null==i){const e=Wi((e,t,n)=>{let r=Jr.runKernel(Gn,k,w);return n([t,e,r]),f&&(r=io(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:b}});return e(h,d)}{const e=Wi((e,t,n,r)=>{let a=Jr.runKernel(Gn,k,w);return r([t,e,a,n]),f&&(a=io(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:b}});return e(h,d,g)}}}),sp=sa({fusedMatMul_:function({a:e,b:t,transposeA:n=!1,transposeB:r=!1,bias:a,activation:s="linear",preluActivationWeights:o,leakyreluAlpha:i=.2}){if(!1===ep(Jr.state.gradientDepth,s)){let u=co(e,t,n,r);return null!=a&&(u=Cs(u,a)),Xl(u,s,o,i)}let u=na(e,"a","fused matMul"),l=na(t,"b","fused matMul");[u,l]=Hr(u,l);const p=n?u.shape[u.rank-2]:u.shape[u.rank-1],c=r?l.shape[l.rank-1]:l.shape[l.rank-2],d=n?u.shape[u.rank-1]:u.shape[u.rank-2],h=r?l.shape[l.rank-2]:l.shape[l.rank-1],f=u.shape.slice(0,-2),m=l.shape.slice(0,-2),g=D(f),y=D(m);_(p===c,()=>`Error in fused matMul: inner shapes (${p}) and (${c}) of Tensors with shapes ${u.shape} and ${l.shape} and transposeA=${n} and transposeB=${r} must match.`);const b=As(u.shape.slice(0,-2),l.shape.slice(0,-2)).concat([d,h]),k=io(u,n?[g,p,d]:[g,d,p]),w=io(l,r?[y,h,c]:[y,c,h]);let N,x;null!=a&&(N=na(a,"bias","fused matMul"),[N]=Hr(N,u),As(b,N.shape)),null!=o&&(x=na(o,"prelu weights","fused matMul"));const v=(e,t)=>{const[o,i,u,l]=t,p=Yl(io(e,u.shape),u,s);let c,d;return n||r?!n&&r?(c=co(p,i,!1,!1),d=co(p,o,!0,!1)):n&&!r?(c=co(i,p,!1,!0),d=co(o,p,!1,!1)):(c=co(i,p,!0,!0),d=co(p,o,!0,!0)):(c=co(p,i,!1,!0),d=co(o,p,!0,!1)),null!=a?[c,d,Ql(l,p)]:[c,d]},T={a:k,b:w,bias:N,preluActivationWeights:x},I={transposeA:n,transposeB:r,activation:s,leakyreluAlpha:i};if(null==a){const e=Wi((e,t,n)=>{const r=Jr.runKernel(Kn,T,I);return n([e,t,r]),{value:io(r,b),gradFunc:v}});return e(k,w)}{const e=Wi((e,t,n,r)=>{const a=Jr.runKernel(Kn,T,I);return r([e,t,a,n]),{value:io(a,b),gradFunc:v}});return e(k,w,N)}}}),op=sa({hammingWindow_:function(e){return Gl(e,.54,.46)}}),ip=sa({hannWindow_:function(e){return Gl(e,.5,.5)}}),up=sa({frame_:function(e,t,n,r=!1,a=0){let s=0;const o=[];for(;s+t<=e.size;)o.push(mo(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=po([mo(e,s,t-r),Eo([r],a)]);o.push(i),s+=n}return 0===o.length?Nl([],[0,t]):io(po(o),[o.length,t])}}),lp=sa({stft_:function(e,t,n,r,a=ip){null==r&&(r=jl(t));const s=up(e,t,n),o=ho(s,a(t));return hl(o,r)}}),pp=sa({cropAndResize_:function(e,t,n,r,a="bilinear",s=0){const o=na(e,"image","cropAndResize"),i=na(t,"boxes","cropAndResize","float32"),u=na(n,"boxInd","cropAndResize","int32"),l=i.shape[0];_(4===o.rank,()=>`Error in cropAndResize: image must be rank 4,but got rank ${o.rank}.`),_(2===i.rank&&4===i.shape[1],()=>`Error in cropAndResize: boxes must be have size [${l},4] but had shape ${i.shape}.`),_(1===u.rank&&u.shape[0]===l,()=>`Error in cropAndResize: boxInd must be have size [${l}] but had shape ${i.shape}.`),_(2===r.length,()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`),_(r[0]>=1&&r[1]>=1,()=>`cropSize must be atleast [1,1], but was ${r}`),_("bilinear"===a||"nearest"===a,()=>`method must be bilinear or nearest, but was ${a}`);const p={image:o,boxes:i,boxInd:u},c={method:a,extrapolationValue:s,cropSize:r};return Jr.runKernel(Pe,p,c)}}),cp=sa({flipLeftRight_:function(e){const t=na(e,"image","flipLeftRight","float32");_(4===t.rank,()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`);const n={image:t};return Jr.runKernel(st,n,{})}}),dp=sa({grayscaleToRGB_:function(e){const t=na(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];_(t.rank>=2,()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`),_(1===r,()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`);const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,Ii(t,a)}}),hp=sa({rotateWithOffset_:function(e,t,n=0,r=.5){const a=na(e,"image","rotateWithOffset","float32");_(4===a.rank,()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`);const s={image:a},o={radians:t,fillValue:n,center:r};return Jr.runKernel(qn,s,o)}});function fp(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),_(0<=r&&r<=1,()=>`iouThreshold must be in [0, 1], but was '${r}'`),_(2===e.rank,()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`),_(4===e.shape[1],()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`),_(1===t.rank,()=>"scores must be a 1D tensor"),_(t.shape[0]===o,()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`),_(0<=s&&s<=1,()=>`softNmsSigma must be in [0, 1], but was '${s}'`),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const mp=sa({nonMaxSuppression_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=na(e,"boxes","nonMaxSuppression","float32"),o=na(t,"scores","nonMaxSuppression","float32"),i=fp(s,o,n,r,a),u={maxOutputSize:n=i.maxOutputSize,iouThreshold:r=i.iouThreshold,scoreThreshold:a=i.scoreThreshold};return Jr.runKernel(Bt,{boxes:s,scores:o},u)}});function gp(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||yp)}(e,t,n),a=r<0?-(r+1):r;e.splice(a,0,t)}function yp(e,t){return e>t?1:e<t?-1:0}function bp(e,t,n,r,a){return Np(e,t,n,r,a,0)}function kp(e,t,n,r,a,s){return Np(e,t,n,r,a,0,!1,s,!0)}function wp(e,t,n,r,a,s){return Np(e,t,n,r,a,s,!0)}function Np(e,t,n,r,a,s,o=!1,i=!1,u=!1){const l=[];for(let e=0;e<t.length;e++)t[e]>a&&l.push({score:t[e],boxIndex:e,suppressBeginIndex:0});l.sort(Tp);const p=s>0?-.5/s:0,c=[],d=[];for(;c.length<n&&l.length>0;){const t=l.pop(),{score:n,boxIndex:s,suppressBeginIndex:o}=t;if(n<a)break;let i=!1;for(let n=c.length-1;n>=o;--n){const o=xp(e,s,c[n]);if(o>=r){i=!0;break}if(t.score=t.score*vp(r,p,o),t.score<=a)break}t.suppressBeginIndex=c.length,i||(t.score===n?(c.push(s),d.push(t.score)):t.score>a&&gp(l,t,Tp))}const h=c.length,f=n-h;i&&f>0&&(c.push(...new Array(f).fill(0)),d.push(...new Array(f).fill(0)));const m={selectedIndices:c};return o&&(m.selectedScores=d),u&&(m.validOutputs=h),m}function xp(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(a[0],a[2]),p=Math.min(a[1],a[3]),c=Math.max(a[0],a[2]),d=Math.max(a[1],a[3]),h=(i-s)*(u-o),f=(c-l)*(d-p);if(h<=0||f<=0)return 0;const m=Math.max(s,l),g=Math.max(o,p),y=Math.min(i,c),b=Math.min(u,d),k=Math.max(y-m,0)*Math.max(b-g,0);return k/(h+f-k)}function vp(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function Tp(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}const Ip=sa({nonMaxSuppressionWithScore_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=na(e,"boxes","nonMaxSuppression"),i=na(t,"scores","nonMaxSuppression"),u=fp(o,i,n,r,a,s),l={boxes:o,scores:i},p={maxOutputSize:n=u.maxOutputSize,iouThreshold:r=u.iouThreshold,scoreThreshold:a=u.scoreThreshold,softNmsSigma:s=u.softNmsSigma},c=Jr.runKernel(Vt,l,p);return{selectedIndices:c[0],selectedScores:c[1]}}}),Sp=sa({nonMaxSuppressionPadded_:function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=na(e,"boxes","nonMaxSuppression"),i=na(t,"scores","nonMaxSuppression"),u=fp(o,i,n,r,a,null),l={boxes:o,scores:i},p={maxOutputSize:u.maxOutputSize,iouThreshold:u.iouThreshold,scoreThreshold:u.scoreThreshold,padToMaxOutputSize:s},c=Jr.runKernel(Pt,l,p);return{selectedIndices:c[0],validOutputs:c[1]}}}),Ep=sa({resizeBilinear_:function(e,t,n=!1,r=!1){const a=na(e,"images","resizeBilinear");_(3===a.rank||4===a.rank,()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`),_(2===t.length,()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`),_(!1===r||!1===n,()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false.");let s=a,o=!1;3===a.rank&&(o=!0,s=io(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},u={alignCorners:n,halfPixelCenters:r,size:t},l=Jr.runKernel(rn,i,u);return o?io(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),_p=sa({resizeNearestNeighbor_:function(e,t,n=!1,r=!1){const a=na(e,"images","resizeNearestNeighbor");_(3===a.rank||4===a.rank,()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`),_(2===t.length,()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`),_("float32"===a.dtype||"int32"===a.dtype,()=>"`images` must have `int32` or `float32` as dtype"),_(!1===r||!1===n,()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false.");let s=a,o=!1;3===a.rank&&(o=!0,s=io(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,i={images:s},u={alignCorners:n,halfPixelCenters:r,size:t},l=Jr.runKernel(nn,i,u);return o?io(l,[l.shape[1],l.shape[2],l.shape[3]]):l}}),Mp=sa({threshold_:function(e,t="binary",n=!1,r=.5){const a=na(e,"image","threshold"),s=a.shape[0]*a.shape[1];let o,i,u,l,p=ho(wl([r]),255);if(_(3===a.rank,()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`),_(3===a.shape[2]||1===a.shape[2],()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`),_("int32"===a.dtype||"float32"===a.dtype,()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`),_("otsu"===t||"binary"===t,()=>`Method must be binary or otsu, but was ${t}`),3===a.shape[2]){[o,i,u]=dl(a,[1,1,1],-1);const e=ho(o,.2989),t=ho(i,.587),n=ho(u,.114);l=Cs(Cs(e,t),n)}else l=e;"otsu"===t&&(p=function(e,t){let n,r,a,s,o,i,u=wl([-1]),l=wl([0]),p=wl([0]);for(let c=0;c<e.size-1;c++){n=mo(e,0,c+1),r=mo(e,c+1),o=Jo(bi(n),t),i=Jo(bi(r),t);const d=bi(ho(n,Pu(0,n.size)));a=Jo(d,bi(n));const h=Eo(r.shape,n.size),f=Cs(Pu(0,r.size),h),m=ho(r,f);s=Jo(bi(m),bi(r));const g=Ki(a,s),y=Ki(a,s),b=ho(o,i);p=ho(ho(b,g),y);const k=Mi(p,l);l=Qo(k,p,l),u=Qo(k,wl([c]),u)}return u}(vo(is(Ju(l),"int32"),ua([]),256),s));const c=n?zi(l,p):Mi(l,p);return is(ho(c,255),"int32")}}),$p=sa({transform_:function(e,t,n="nearest",r="constant",a=0,s){const o=na(e,"image","transform","float32"),i=na(t,"transforms","transform","float32");_(4===o.rank,()=>`Error in transform: image must be rank 4,but got rank ${o.rank}.`),_(2===i.rank&&(i.shape[0]===o.shape[0]||1===i.shape[0])&&8===i.shape[1],()=>"Error in transform: Input transform should be batch x 8 or 1 x 8"),_(null==s||2===s.length,()=>`Error in transform: outputShape must be [height, width] or null, but got ${s}.`);const u={image:o,transforms:i},l={interpolation:n,fillMode:r,fillValue:a,outputShape:s};return Jr.runKernel(Ln,u,l)}}),Ap=sa({bandPart_:function(e,t,n){_(t%1==0,()=>`bandPart(): numLower must be an integer, got ${t}.`),_(n%1==0,()=>`bandPart(): numUpper must be an integer, got ${n}.`);const r=na(e,"a","bandPart");_(r.rank>=2,()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`);const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const i=io(Pu(0,s,1,"int32"),[-1,1]),u=Pu(0,o,1,"int32"),l=Ki(i,u),p=Zi(zi(l,mi(+t,"int32")),$i(l,mi(-n,"int32"))),c=iu([s,o],r.dtype);return io(gl($l(io(r,[-1,s,o])).map(e=>Qo(p,e,c))),a)}}),Dp=sa({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,_(null!=e&&e.length>0,()=>"Gram-Schmidt process: input must not be null, undefined, or empty");const n=e[0].shape[0];for(let t=1;t<e.length;++t)_(e[t].shape[0]===n,()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`)}else t=!0,e=dl(e,e.shape[0],0).map(e=>ml(e,[0]));_(e.length<=e[0].shape[0],()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`);const n=[],r=e;for(let t=0;t<e.length;++t)n.push(Jr.tidy(()=>{let e=r[t];if(t>0)for(let r=0;r<t;++r){const t=ho(bi(ho(n[r],e)),n[r]);e=Ki(e,t)}return Jo(e,wi(e,"euclidean"))}));return t?gl(n,0):n}});function Fp(e,t=!1){return Jr.tidy(()=>{_(2===e.shape.length,()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`);const n=e.shape[0],r=e.shape[1];let a=Si(n),s=us(e);const o=Nl([[1]],[1,1]);let i=us(o);const u=n>=r?r:n;for(let e=0;e<u;++e){const t=s,u=i,l=a;[i,s,a]=Jr.tidy(()=>{const t=mo(s,[e,e],[n-e,1]),u=wi(t),l=mo(s,[e,e],[1,1]),p=Qo(Mi(l,0),Nl([[-1]]),Nl([[1]])),c=Ki(l,ho(p,u)),d=Jo(t,c);i=1===d.shape[0]?us(o):po([o,mo(d,[1,0],[d.shape[0]-1,d.shape[1]])],0);const h=Hi(Jo(co(p,c),u)),f=mo(s,[e,0],[n-e,r]),m=ho(h,i),g=Pl(i);if(0===e)s=Ki(f,co(m,co(g,f)));else{const t=Ki(f,co(m,co(g,f)));s=po([mo(s,[0,0],[e,r]),t],0)}const y=Pl(m),b=mo(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=Ki(b,co(co(b,i),y));else{const t=Ki(b,co(co(b,i),y));a=po([mo(a,[0,0],[n,e]),t],1)}return[i,s,a]}),Ll([t,u,l])}return!t&&n>r&&(a=mo(a,[0,0],[n,r]),s=mo(s,[0,0],[r,r])),[a,s]})}const Op=sa({qr_:function(e,t=!1){if(_(e.rank>=2,()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`),2===e.rank)return Fp(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce((e,t)=>e*t),r=$l(io(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];return r.forEach(e=>{const[n,r]=Fp(e,t);a.push(n),s.push(r)}),[io(gl(a,0),e.shape),io(gl(s,0),e.shape)]}}});var Rp;!function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Rp||(Rp={}));const Cp=sa({computeWeightedLoss_:function(e,t,n=Rp.SUM_BY_NONZERO_WEIGHTS){const r=na(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=na(t,"weights","computeWeightedLoss"));const s=null==a?r:ho(r,a);if(n===Rp.NONE)return s;if(n===Rp.SUM)return bi(s);if(n===Rp.MEAN){if(null==a)return ou(s);{const e=r.size/a.size,t=Jo(bi(s),bi(a));return e>1?Jo(t,mi(e)):t}}if(n===Rp.SUM_BY_NONZERO_WEIGHTS){if(null==a)return Jo(bi(s),mi(r.size));{const e=ho(a,uu(r.shape)),t=is(bi(gu(e,mi(0))),"float32");return Jo(bi(s),t)}}throw Error(`Unknown reduction: ${n}`)}}),zp=sa({absoluteDifference_:function(e,t,n,r=Rp.SUM_BY_NONZERO_WEIGHTS){const a=na(e,"labels","absoluteDifference"),s=na(t,"predictions","absoluteDifference");let o=null;null!=n&&(o=na(n,"weights","absoluteDifference")),M(a.shape,s.shape,"Error in absoluteDifference: ");const i=Fs(Ki(a,s));return Cp(i,o,r)}}),Lp=sa({cosineDistance_:function(e,t,n,r,a=Rp.SUM_BY_NONZERO_WEIGHTS){const s=na(e,"labels","cosineDistance"),o=na(t,"predictions","cosineDistance");let i=null;null!=r&&(i=na(r,"weights","cosineDistance")),M(s.shape,o.shape,"Error in cosineDistance: ");const u=mi(1),l=Ki(u,bi(ho(s,o),n,!0));return Cp(l,i,a)}}),Bp=sa({hingeLoss_:function(e,t,n,r=Rp.SUM_BY_NONZERO_WEIGHTS){let a=na(e,"labels","hingeLoss");const s=na(t,"predictions","hingeLoss");let o=null;null!=n&&(o=na(n,"weights","hingeLoss")),M(a.shape,s.shape,"Error in hingeLoss: ");const i=mi(1);a=Ki(ho(mi(2),a),i);const u=Hu(Ki(i,ho(a,s)));return Cp(u,o,r)}}),Pp=sa({huberLoss_:function(e,t,n,r=1,a=Rp.SUM_BY_NONZERO_WEIGHTS){const s=na(e,"labels","huberLoss"),o=na(t,"predictions","huberLoss");let i=null;null!=n&&(i=na(n,"weights","huberLoss")),M(s.shape,o.shape,"Error in huberLoss: ");const u=mi(r),l=Fs(Ki(o,s)),p=pu(l,u),c=Ki(l,p),d=Cs(ho(mi(.5),yi(p)),ho(u,c));return Cp(d,i,a)}}),Vp=sa({logLoss_:function(e,t,n,r=1e-7,a=Rp.SUM_BY_NONZERO_WEIGHTS){const s=na(e,"labels","logLoss"),o=na(t,"predictions","logLoss");let i=null;null!=n&&(i=na(n,"weights","logLoss")),M(s.shape,o.shape,"Error in logLoss: ");const u=mi(1),l=mi(r),p=Hi(ho(s,Pi(Cs(o,l)))),c=ho(Ki(u,s),Pi(Cs(Ki(u,o),l))),d=Ki(p,c);return Cp(d,i,a)}}),Wp=sa({meanSquaredError_:function(e,t,n,r=Rp.SUM_BY_NONZERO_WEIGHTS){const a=na(e,"labels","meanSquaredError"),s=na(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=na(n,"weights","meanSquaredError")),M(a.shape,s.shape,"Error in meanSquaredError: ");const i=fl(a,s);return Cp(i,o,r)}}),Hp=sa({sigmoidCrossEntropy_:function(e,t,n,r=0,a=Rp.SUM_BY_NONZERO_WEIGHTS){let s=na(e,"multiClassLabels","sigmoidCrossEntropy");const o=na(t,"logits","sigmoidCrossEntropy");let i=null;if(null!=n&&(i=na(n,"weights","sigmoidCrossEntropy")),M(s.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=mi(r),t=mi(1),n=mi(.5);s=Cs(ho(s,Ki(t,e)),ho(n,e))}const u=function(e,t){const n=na(e,"labels","sigmoidCrossEntropyWithLogits"),r=na(t,"logits","sigmoidCrossEntropyWithLogits");M(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const a=Hu(r),s=ho(r,n),o=Vi(xi(Hi(Fs(r))));return Cs(Ki(a,s),o)}(s,o);return Cp(u,i,a)}}),Up=sa({softmaxCrossEntropy_:function(e,t,n,r=0,a=Rp.SUM_BY_NONZERO_WEIGHTS){let s=na(e,"onehotLabels","softmaxCrossEntropy");const o=na(t,"logits","softmaxCrossEntropy");let i=null;if(null!=n&&(i=na(n,"weights","softmaxCrossEntropy")),M(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=mi(r),t=mi(1),n=mi(s.shape[1]);s=Cs(ho(s,Ki(t,e)),Jo(e,n))}const u=function(e,t,n=-1){if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=Wi((e,t,r)=>{const a=Gi(t,[n],!0),s=Ki(is(t,"float32"),a);r([e,s]);const o=Hi(ho(s,e));return{value:bi(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=ii(e.shape,[n]);return[ho(io(e,s),Ki(is(r,"float32"),xi(a))),ho(io(e,s),Ki(xi(a),is(r,"float32")))]}}});return r(e,t)}(s,o);return Cp(u,i,a)}}),qp=sa({sparseFillEmptyRows_:function(e,t,n,r){const a=na(e,"indices","sparseFillEmptyRows","int32"),s=na(t,"values","sparseFillEmptyRows"),o=na(n,"denseShape","sparseFillEmptyRows","int32"),i=na(r,"defaultValue","sparseFillEmptyRows",s.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==s.rank)throw new Error(`Values should be Tensor1D but received shape ${s.shape}`);if(1!==o.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${o.shape}`);if(0!==i.rank)throw new Error(`Default value should be a scalar but received shape ${i.shape}`);const u={indices:a,values:s,denseShape:o,defaultValue:i},l=Jr.runKernel(vn,u);return{outputIndices:l[0],outputValues:l[1],emptyRowIndicator:l[2],reverseIndexMap:l[3]}}}),Kp=sa({sparseReshape_:function(e,t,n){const r=na(e,"inputIndices","sparseReshape","int32"),a=na(t,"inputShape","sparseReshape","int32"),s=na(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==s.rank)throw new Error(`New shape should be Tensor1D but received shape ${s.shape}`);const o={inputIndices:r,inputShape:a,newShape:s},i=Jr.runKernel(Tn,o);return{outputIndices:i[0],outputShape:i[1]}}}),jp=sa({sparseSegmentMean_:function(e,t,n){const r=na(e,"data","sparseSegmentMean"),a=na(t,"indices","sparseSegmentMean","int32"),s=na(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return Jr.runKernel(In,o)}}),Gp=sa({sparseSegmentSum_:function(e,t,n){const r=na(e,"data","sparseSegmentSum"),a=na(t,"indices","sparseSegmentSum","int32"),s=na(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==s.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${s.shape}`);const o={data:r,indices:a,segmentIds:s};return Jr.runKernel(Sn,o)}}),Zp=sa({stringNGrams_:function(e,t,n,r,a,s,o,i){const u=na(e,"data","stringNGrams","string");if("string"!==u.dtype)throw new Error("Data must be of datatype string");if(1!==u.shape.length)throw new Error(`Data must be a vector, saw: ${u.shape}`);const l=na(t,"dataSplits","stringNGrams");if("int32"!==l.dtype)throw new Error("Data splits must be of datatype int32");const p={separator:n,nGramWidths:r,leftPad:a,rightPad:s,padWidth:o,preserveShortSequences:i},c={data:u,dataSplits:l},d=Jr.runKernel($n,c,p);return{nGrams:d[0],nGramsSplits:d[1]}}}),Jp=sa({stringSplit_:function(e,t,n=!0){const r=na(e,"input","stringSplit","string"),a=na(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const s={skipEmpty:n},o={input:r,delimiter:a},i=Jr.runKernel(An,o,s);return{indices:i[0],values:i[1],shape:i[2]}}}),Yp=sa({stringToHashBucketFast_:function(e,t){const n=na(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return Jr.runKernel(Dn,a,r)}}),Qp={fft:ll,ifft:pl,rfft:hl,irfft:cl},Xp={hammingWindow:op,hannWindow:ip,frame:up,stft:lp},ec={flipLeftRight:cp,grayscaleToRGB:dp,resizeNearestNeighbor:_p,resizeBilinear:Ep,rotateWithOffset:hp,cropAndResize:pp,nonMaxSuppression:mp,nonMaxSuppressionAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY){const s=na(e,"boxes","nonMaxSuppressionAsync"),o=na(t,"scores","nonMaxSuppressionAsync"),i=fp(s,o,n,r,a);n=i.maxOutputSize,r=i.iouThreshold,a=i.scoreThreshold;const u=await Promise.all([s.data(),o.data()]),l=u[0],p=u[1],{selectedIndices:c}=bp(l,p,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),wl(c,"int32")},nonMaxSuppressionWithScore:Ip,nonMaxSuppressionWithScoreAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=0){const o=na(e,"boxes","nonMaxSuppressionAsync"),i=na(t,"scores","nonMaxSuppressionAsync"),u=fp(o,i,n,r,a,s);n=u.maxOutputSize,r=u.iouThreshold,a=u.scoreThreshold,s=u.softNmsSigma;const l=await Promise.all([o.data(),i.data()]),p=l[0],c=l[1],{selectedIndices:d,selectedScores:h}=wp(p,c,n,r,a,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:wl(d,"int32"),selectedScores:wl(h)}},nonMaxSuppressionPadded:Sp,nonMaxSuppressionPaddedAsync:async function(e,t,n,r=.5,a=Number.NEGATIVE_INFINITY,s=!1){const o=na(e,"boxes","nonMaxSuppressionAsync"),i=na(t,"scores","nonMaxSuppressionAsync"),u=fp(o,i,n,r,a,null),l=u.maxOutputSize,p=u.iouThreshold,c=u.scoreThreshold,[d,h]=await Promise.all([o.data(),i.data()]),{selectedIndices:f,validOutputs:m}=kp(d,h,l,p,c,s);return o!==e&&o.dispose(),i!==t&&i.dispose(),{selectedIndices:wl(f,"int32"),validOutputs:mi(m,"int32")}},threshold:Mp,transform:$p},tc={bandPart:Ap,gramSchmidt:Dp,qr:Op},nc={absoluteDifference:zp,computeWeightedLoss:Cp,cosineDistance:Lp,hingeLoss:Bp,huberLoss:Pp,logLoss:Vp,meanSquaredError:Wp,sigmoidCrossEntropy:Hp,softmaxCrossEntropy:Up},rc={sparseFillEmptyRows:qp,sparseReshape:Kp,sparseSegmentMean:jp,sparseSegmentSum:Gp},ac={stringNGrams:Zp,stringSplit:Jp,stringToHashBucketFast:Yp};function sc(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var oc;function ic(e,t,n,r=!0){let a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function uc(e,t,n=!0){const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2==1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function lc(e,t,n,r=!0){const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let n=1;n<e.length;++n)n<=t.length?r?a.push(t[n-1]*e[n]):a.push(e[n]/t[n-1]):a.push(e[n]);return a}function pc(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function cc(e,t){return{real:e[2*t],imag:e[2*t+1]}}function dc(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function hc(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}!function(e){e[e.FIRST_DIM_SIZE=0]="FIRST_DIM_SIZE",e[e.VALUE_ROWIDS=1]="VALUE_ROWIDS",e[e.ROW_LENGTHS=2]="ROW_LENGTHS",e[e.ROW_SPLITS=3]="ROW_SPLITS",e[e.ROW_LIMITS=4]="ROW_LIMITS",e[e.ROW_STARTS=5]="ROW_STARTS"}(oc||(oc={}));const fc=/->/g;function mc(e,t){let n=new Array(e);n.fill(-1);for(let e=0;e<t.length;++e)n[t[e]]=e;const r=[];for(let t=0;t<e;++t)-1===n[t]&&r.push(t);return n=n.filter(e=>-1!==e),{permutationIndices:n,expandDims:r}}function gc(e){return e.every((e,t)=>e===t)}function yc(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function bc(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function kc(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function wc(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function Nc(e,t){return`size ${e} must be non-negative, not ${t}`}function xc(){return"segment ids are not increasing"}function vc(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function Tc(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function Ic(e){try{return e.map(e=>Nr(e))}catch(e){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${e}`)}}function Sc(e,t){Array.isArray(e)||(e=[e]),e.forEach(e=>{null!=e&&_("complex64"!==e.dtype,()=>`${t} does not support complex64 tensors in the CPU backend.`)})}const Ec=Fl;class _c extends T{constructor(){super(),this.blockSize=48,this.firstUse=!0,this.data=new v(this,Cl())}nextDataId(){return _c.nextDataId++}write(e,t,n){this.firstUse&&(this.firstUse=!1,re().get("IS_NODE")&&Zn("\n============================\nHi, looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, visit https://github.com/tensorflow/tfjs-node for more details. \n============================"));const r={id:this.nextDataId()};return this.data.set(r,{values:e,dtype:n,refCount:1}),r}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&V(n[0])){const a=n.map(e=>wr(e));r=this.write(a,e,t)}else r=this.write(n,e,t);return{dataId:r,shape:e,dtype:t}}refCount(e){return this.data.has(e)?this.data.get(e).refCount:0}incRef(e){this.data.get(e).refCount++}decRef(e){this.data.has(e)&&this.data.get(e).refCount--}move(e,t,n,r,a){this.data.set(e,{values:t,dtype:r,refCount:a})}numDataIds(){return this.data.numDataIds()}async read(e){return this.readSync(e)}readSync(e){const{dtype:t,complexTensorInfos:n}=this.data.get(e);return"complex64"===t?pc(this.readSync(n.real.dataId),this.readSync(n.imag.dataId)):this.data.get(e).values}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map(e=>Nr(e));return os(e.shape,e.dtype,n)}catch(e){throw new Error("Failed to decode encoded string bytes into utf-8")}return os(e.shape,e.dtype,t)}makeOutput(e,t,n){return Cl().makeTensorFromTensorInfo(this.makeTensorInfo(t,n,e),this)}disposeData(e,t=!1){if(this.data.has(e)){if(this.data.get(e).refCount--,!t&&this.data.get(e).refCount>0)return!1;const{complexTensorInfos:n}=this.data.get(e);null!=n&&(this.disposeData(n.real.dataId,!0),this.disposeData(n.imag.dataId,!0)),this.data.delete(e)}return!0}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}async time(e){const t=kr();return e(),{kernelMs:kr()-t}}memory(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}}where(e){Sc([e],"where");const t=this.readSync(e.dataId);return Ec(e.shape,t)}dispose(){}floatPrecision(){return 32}epsilon(){return super.epsilon()}}function Mc(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:o}=r;if(Sc(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,u=i.data.get(o.dataId).values,l=D(o.shape),p=n||o.dtype,c=L(p,l);for(let e=0;e<l;++e)c[e]=t(u[e],a);return i.makeTensorInfo(o.shape,p,c)}}function $c(e,t,n){return({inputs:r,attrs:a,backend:s})=>{const{x:o}=r;if(Sc(o,e),"string"===o.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const i=s,u=i.data.get(o.dataId).values,l=n||o.dtype,p=t(u,l,a);return i.makeTensorInfo(o.shape,l,p)}}_c.nextDataId=0,function(e,t,n=1){Jr.registerBackend(e,t,n)}("cpu",()=>new _c,1);const Ac=Mc(Qe,e=>e>=0?e:Math.exp(e)-1),Dc={kernelName:Qe,backendName:"cpu",kernelFunc:Ac};function Fc(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const Oc={kernelName:ht,backendName:"cpu",kernelFunc:Fc};function Rc(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{alpha:s}=r;Sc([a],"leakyRelu");const o=D(a.shape),i=n.data.get(a.dataId).values,u=z("float32",o);for(let e=0;e<i.length;e++)u[e]=i[e]<0?s*i[e]:i[e];return n.makeTensorInfo(a.shape,"float32",u)}const Cc={kernelName:kt,backendName:"cpu",kernelFunc:Rc};function zc(e){return(t,n,r,a,s)=>{const o=As(t,n),i=o.length,u=U(o),l=z(s,D(o)),p=t.length,c=n.length,d=U(t),h=U(n),f=$s(t,o),m=$s(n,o);if(f.length+m.length===0)for(let t=0;t<l.length;++t)l[t]=e(r[t%r.length],a[t%a.length]);else for(let t=0;t<l.length;++t){const n=Q(t,i,u),s=n.slice(-p);f.forEach(e=>s[e]=0);const o=Y(s,p,d),g=n.slice(-c);m.forEach(e=>g[e]=0);const y=Y(g,c,h);l[t]=e(r[o],a[y])}return[l,o]}}const Lc=zc((e,t)=>e<0?t*e:e);function Bc(e){const{inputs:t,backend:n}=e,{x:r,alpha:a}=t;Sc([r,a],"prelu");const s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,[i,u]=Lc(r.shape,a.shape,s,o,"float32");return n.makeTensorInfo(u,"float32",i)}const Pc={kernelName:jt,backendName:"cpu",kernelFunc:Bc},Vc=Mc(en,e=>Math.max(0,e)),Wc={kernelName:en,backendName:"cpu",kernelFunc:Vc},Hc=Mc(an,e=>Math.min(Math.max(0,e),6)),Uc={kernelName:an,backendName:"cpu",kernelFunc:Hc};function qc(e){return(t,n,r)=>{const a=z(n,t.length);for(let n=0;n<t.length;++n)a[n]=e(t[n],r);return a}}qc(e=>1/(1+Math.exp(-e)));const Kc=Mc(yn,e=>1/(1+Math.exp(-e))),jc={kernelName:yn,backendName:"cpu",kernelFunc:Kc};function Gc(e,t,n,r,a){if("linear"===n)return Fc({inputs:{x:t},backend:e});if("relu"===n)return Vc({inputs:{x:t},backend:e});if("elu"===n)return Ac({inputs:{x:t},backend:e});if("relu6"===n)return Hc({inputs:{x:t},backend:e});if("prelu"===n)return Bc({inputs:{x:t,alpha:r},backend:e});if("leakyrelu"===n)return Rc({inputs:{x:t},backend:e,attrs:{alpha:a}});if("sigmoid"===n)return Kc({inputs:{x:t},backend:e});throw new Error(`Activation ${n} has not been implemented for the CPU backend.`)}function Zc(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}const Jc={kernelName:_e,backendName:"cpu",kernelFunc:Zc};function Yc(e,t,n="float32"){if("complex64"===n)return Zc({inputs:{real:Yc(e,t,"float32"),imag:Yc(e,t,"float32")},backend:e});const r=G(D(t),n);return e.makeTensorInfo(t,n,r)}function Qc(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}const Xc={kernelName:Qt,backendName:"cpu",kernelFunc:Qc};function ed(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dtype:s}=r;if("complex64"===s){if("complex64"===a.dtype)return Fc({inputs:{x:a},backend:n});const e=Yc(n,a.shape,a.dtype),t=ed({inputs:{x:a},backend:n,attrs:{dtype:"float32"}}),r=Zc({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===a.dtype){const e=Qc({inputs:{input:a},backend:n}),t=ed({inputs:{x:e},backend:n,attrs:{dtype:s}});return n.disposeIntermediateTensorInfo(e),t}if(o=a.dtype,"complex64"===(i=s)||"float32"===i&&"complex64"!==o||"int32"===i&&"float32"!==o&&"complex64"!==o||"bool"===i&&"bool"===o){const e=Fc({inputs:{x:a},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:s}}var o,i;const u=n.data.get(a.dataId).values,[l,p,c]=function(e,t,n,r){if("int32"===r)return[t,"int32",Int32Array.from(e)];if("bool"===r){const r=br([0],n),[a,s]=zc((e,t)=>e!==t?1:0)(t,[],e,r,"bool");return[s,"bool",a]}throw new Error(`Error in Cast: failed to cast ${n} to ${r}`)}(u,a.shape,a.dtype,s);return n.makeTensorInfo(l,p,c)}const td={kernelName:Ie,backendName:"cpu",kernelFunc:ed};function nd(e,t,n,r){return null==n?({inputs:n,backend:a})=>{const{a:s,b:o}=n,i=a;Sc([s,o],e);const u=i.data.get(s.dataId).values,l=i.data.get(o.dataId).values,p="string"===s.dtype?Ic(u):u,c="string"===s.dtype?Ic(l):l,d=r||s.dtype,[h,f]=t(s.shape,o.shape,p,c,d);return i.makeTensorInfo(f,d,h)}:({inputs:e,backend:a})=>{const{a:s,b:o}=e,i=a;if("complex64"===s.dtype||"complex64"===o.dtype){const e=ed({inputs:{x:s},backend:i,attrs:{dtype:"complex64"}}),t=i.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,u=i.data.get(r.dataId).values,l=i.data.get(a.dataId).values,p=ed({inputs:{x:o},backend:i,attrs:{dtype:"complex64"}}),c=i.data.get(p.dataId),d=c.complexTensorInfos.real,h=c.complexTensorInfos.imag,f=i.data.get(d.dataId).values,m=i.data.get(h.dataId).values,[g,y,b]=n(s.shape,o.shape,u,l,f,m),k=i.makeTensorInfo(b,"float32",g),w=i.makeTensorInfo(b,"float32",y),N=Zc({inputs:{real:k,imag:w},backend:i});return i.disposeIntermediateTensorInfo(e),i.disposeIntermediateTensorInfo(p),i.disposeIntermediateTensorInfo(k),i.disposeIntermediateTensorInfo(w),N}{const e=i.data.get(s.dataId).values,n=i.data.get(o.dataId).values,a=r||s.dtype,[u,l]=t(s.shape,o.shape,e,n,a);return i.makeTensorInfo(l,a,u)}}}function rd(e){return(t,n,r,a,s,o)=>{const i=As(t,n),u=D(i),l=i.length,p=U(i),c=z("float32",u),d=z("float32",u),h=$s(t,i),f=$s(n,i),m=pc(r,a),g=pc(s,o),y=t.length,b=U(t),k=n.length,w=U(n);if(h.length+f.length===0)for(let t=0;t<c.length;t++){const n=t%m.length,r=t%g.length,a=e(m[2*n],m[2*n+1],g[2*r],g[2*r+1]);c[t]=a.real,d[t]=a.imag}else for(let t=0;t<c.length;t++){const n=Q(t,l,p),r=n.slice(-y);h.forEach(e=>r[e]=0);const a=Y(r,y,b),s=n.slice(-k);f.forEach(e=>s[e]=0);const o=Y(s,k,w),i=e(m[2*a],m[2*a+1],g[2*o],g[2*o+1]);c[t]=i.real,d[t]=i.imag}return[c,d,i]}}const ad=zc((e,t)=>e+t),sd=rd((e,t,n,r)=>({real:e+n,imag:t+r})),od=nd(pe,ad,sd),id={kernelName:pe,backendName:"cpu",kernelFunc:od};function ud(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{shape:s}=r,o=D(a.shape),i=function(e,t){let n=1,r=-1;for(let t=0;t<e.length;++t)if(e[t]>=0)n*=e[t];else if(-1===e[t]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${t}`);r=t}else if(e[t]<0)throw Error(`Shapes can not be < 0. Found ${e[t]} at dim ${t}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}(s,o),u=D(i);_(o===u,()=>`The new shape (${i}) has ${u} elements and the old shape (${a.shape}) has ${o} elements. The new shape and old shape must have the same number of elements.`),n.incRef(a.dataId);const l=n.data.get(a.dataId);if(null!=l.complexTensorInfos){const e=l.complexTensorInfos.real,t=l.complexTensorInfos.imag;e.shape=i,t.shape=i}return{dataId:a.dataId,shape:i,dtype:a.dtype}}const ld={kernelName:tn,backendName:"cpu",kernelFunc:ud};function pd(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s}=t,{transposeA:o,transposeB:i}=r;Sc([a,s],"matMul");const u=a.shape.length,l=s.shape.length,p=o?a.shape[u-2]:a.shape[u-1],c=i?s.shape[l-1]:s.shape[l-2],d=o?a.shape[u-1]:a.shape[u-2],h=i?s.shape[l-2]:s.shape[l-1],f=a.shape.slice(0,-2),m=s.shape.slice(0,-2),g=D(f),y=D(m),b=As(a.shape.slice(0,-2),s.shape.slice(0,-2)).concat([d,h]);_(p===c,()=>`Error in matMul: inner shapes (${p}) and (${c}) of Tensors with shapes ${a.shape} and ${s.shape} and transposeA=${o} and transposeB=${i} must match.`);const k=i?[y,h,c]:[y,c,h],w=ud({inputs:{x:a},backend:n,attrs:{shape:o?[g,p,d]:[g,d,p]}}),N=ud({inputs:{x:s},backend:n,attrs:{shape:k}}),x=o?w.shape[1]:w.shape[2],v=o?w.shape[2]:w.shape[1],T=i?N.shape[1]:N.shape[2],I=Math.max(g,y),S=n.data.get(w.dataId).values,E=n.data.get(N.dataId).values,M=U(w.shape),$=U(N.shape),[A,F,O]=o?[M[0],1,M[1]]:[M[0],M[1],1],[R,C,z]=i?[1,$[1],$[0]]:[$[1],1,$[0]],L=v*T,B=os([I,v,T],w.dtype),P=B.values,V=n.blockSize;for(let e=0;e<I;e++)for(let t=0;t<v;t+=V)for(let n=0;n<T;n+=V)for(let r=0;r<x;r+=V){const a=Math.min(t+V,v),s=Math.min(n+V,T),o=Math.min(r+V,x);for(let i=t;i<a;i++)for(let t=n;t<s;t++){let n=0;for(let a=r;a<o;a++){const r=Math.min(e,g-1)*A,s=Math.min(e,y-1)*z;n+=S[r+i*F+a*O]*E[a*R+t*C+s]}P[e*L+(i*T+t)]+=n}}return n.disposeIntermediateTensorInfo(w),n.disposeIntermediateTensorInfo(N),n.makeTensorInfo(b,B.dtype,B.values)}const cd={kernelName:Ne,backendName:"cpu",kernelFunc:pd},dd={kernelName:Kn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:p,leakyreluAlpha:c}=r;let d,h,f;const m=[];d=pd({inputs:{a,b:s},attrs:{transposeA:u,transposeB:l},backend:n}),o&&(h=od({inputs:{a:d,b:o},backend:n}),m.push(d),d=h),p&&(f=Gc(n,d,p,i,c),m.push(d),d=f);for(const e of m)n.disposeIntermediateTensorInfo(e);return d}},hd={kernelName:"Abs",backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend;Sc(t,"abs");let r=new Float32Array(D(t.shape));return r=function(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}(n.data.get(t.dataId).values),n.makeOutput(r,t.shape,t.dtype)}},fd=Mc(ue,e=>Math.acos(e)),md={kernelName:ue,backendName:"cpu",kernelFunc:fd},gd=Mc(le,e=>Math.acosh(e)),yd={kernelName:le,backendName:"cpu",kernelFunc:gd},bd={kernelName:ce,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,r=t;Sc(t,"addN");const a=r.map(e=>n.data.get(e.dataId).values),s=os(r[0].shape,r[0].dtype),o=s.values;for(let e=0;e<r.length;e++){const t=a[e];for(let e=0;e<o.length;e++)o[e]+=t[e]}return n.makeTensorInfo(s.shape,s.dtype,s.values)}};function kd(e,t,n,r,a){const s=t.length,o=D(t),i=U(t),u=U(a),l=z(n,D(a));for(let t=0;t<o;++t){const n=Q(t,s,i),a=new Array(n.length);for(let e=0;e<a.length;e++)a[e]=n[r[e]];l[Y(a,s,u)]=e[t]}return l}function wd(e){const{inputs:t,attrs:n,backend:r}=e,{x:a}=t,{perm:s}=n;Sc(a,"transpose");const o=a.shape.length,i=new Array(o);for(let e=0;e<i.length;e++)i[e]=a.shape[s[e]];const u=kd(r.data.get(a.dataId).values,a.shape,a.dtype,s,i);return{dataId:r.write(u,i,a.dtype),shape:i,dtype:a.dtype}}const Nd={kernelName:Bn,backendName:"cpu",kernelFunc:wd},xd={kernelName:"All",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Sc(a,"all");const i=C(s,a.shape);let u=i;const l=li(u,a.shape.length);let p=a;null!=l&&(p=wd({inputs:{x:a},backend:n,attrs:{perm:l}}),u=ci(u.length,a.shape.length)),ui("all",u,p.shape.length);const[c,d]=oi(p.shape,u),h=D(d),f=G(D(c),p.dtype),m=n.data.get(p.dataId).values;for(let e=0;e<f.length;++e){const t=e*h;let n=m[t];for(let e=0;e<h;++e){const r=m[t+e];n=n&&r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(p);const g=n.makeTensorInfo(c,p.dtype,f);if(o){const e=ud({inputs:{x:g},backend:n,attrs:{shape:ii(c,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},vd={kernelName:"Any",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Sc(a,"any");const i=C(s,a.shape);let u=i;const l=li(u,a.shape.length);let p=a;null!=l&&(p=wd({inputs:{x:a},backend:n,attrs:{perm:l}}),u=ci(u.length,a.shape.length)),ui("any",u,p.shape.length);const[c,d]=oi(p.shape,u),h=D(d),f=G(D(c),p.dtype),m=n.data.get(p.dataId).values;for(let e=0;e<f.length;++e){const t=e*h;let n=m[t];for(let e=0;e<h;++e){const r=m[t+e];n=n||r}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(p);const g=n.makeTensorInfo(c,p.dtype,f);if(o){const e=ud({inputs:{x:g},backend:n,attrs:{shape:ii(c,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},Td={kernelName:de,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;Sc(a,"argMax");let o=C(s,a.shape);const i=li(o,a.shape.length);let u=a;const l=[];null!=i&&(u=wd({inputs:{x:a},backend:n,attrs:{perm:i}}),l.push(u),o=ci(o.length,u.shape.length)),o=[o[0]],ui("argMax",o,u.shape.length);const[p,c]=oi(u.shape,o),d=G(D(p),"int32"),h=D(c),f=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*h;let n=f[t],r=0;for(let e=0;e<h;++e){const a=f[t+e];a>n&&(n=a,r=e)}d[e]=r}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(p,"int32",d)}},Id={kernelName:he,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s}=r;Sc(a,"argMin");let o=C(s,a.shape);const i=li(o,a.shape.length);let u=a;const l=[];null!=i&&(u=wd({inputs:{x:a},backend:n,attrs:{perm:i}}),l.push(u),o=ci(o.length,u.shape.length)),o=[o[0]],ui("argMin",o,u.shape.length);const[p,c]=oi(u.shape,o),d=G(D(p),"int32"),h=D(c),f=n.data.get(u.dataId).values;for(let e=0;e<d.length;++e){const t=e*h;let n=f[t],r=0;for(let e=0;e<h;++e){const a=f[t+e];a<n&&(n=a,r=e)}d[e]=r}return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(p,"int32",d)}},Sd=Mc(fe,e=>Math.asin(e)),Ed={kernelName:fe,backendName:"cpu",kernelFunc:Sd},_d=Mc(me,e=>Math.asinh(e)),Md={kernelName:me,backendName:"cpu",kernelFunc:_d},$d=Mc(ge,e=>Math.atan(e)),Ad={kernelName:ge,backendName:"cpu",kernelFunc:$d},Dd=zc((e,t)=>Math.atan2(e,t)),Fd=nd(be,Dd),Od={kernelName:be,backendName:"cpu",kernelFunc:Fd},Rd=Mc(ye,e=>Math.atanh(e)),Cd={kernelName:ye,backendName:"cpu",kernelFunc:Rd};function zd(e,t,n,r,a,s){const o=a.strideHeight,i=a.strideWidth,u=a.dilationHeight,l=a.dilationWidth,p=a.effectiveFilterHeight,c=a.effectiveFilterWidth,d=a.padInfo.top,h=a.padInfo.left,f="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=os(a.outShape,n),g=m.values,y=a.outShape[1]*a.outShape[2]*a.outShape[3],b=a.outShape[2]*a.outShape[3],k=a.outShape[3];for(let t=0;t<a.batchSize;++t){const n=t*y,m=t*r[0];for(let t=0;t<a.inChannels;++t)for(let y=0;y<a.outHeight;++y){const w=y*o-d,N=Math.max(0,w),x=Math.min(a.inHeight,p+w),v=n+y*b;for(let n=0;n<a.outWidth;++n){const o=n*i-h,p=Math.max(0,o),d=Math.min(a.inWidth,c+o);let y=f,b=0,w=0;for(let n=N;n<x;n+=u){const a=m+n*r[1];for(let n=p;n<d;n+=l){const o=e[a+n*r[2]+t];"max"===s&&o>y?y=o:"avg"===s&&(b+=o,w++)}if(isNaN(y))break}g[v+n*k+t]="avg"===s?b/w:y}}}return m}function Ld(e,t,n,r,a=!1,s=!1){const o=os(r.outShape,"int32"),i=r.strideHeight,u=r.strideWidth,l=r.dilationHeight,p=r.dilationWidth,c=r.effectiveFilterHeight,d=r.effectiveFilterWidth,h=r.padInfo.top,f=r.padInfo.left,m=os(t,n,e);for(let e=0;e<r.batchSize;++e)for(let t=0;t<r.inChannels;++t)for(let n=0;n<r.outHeight;++n){const g=n*i-h;let y=g;for(;y<0;)y+=l;const b=Math.min(r.inHeight,c+g);for(let i=0;i<r.outWidth;++i){const c=i*u-f;let h=c;for(;h<0;)h+=p;const k=Math.min(r.inWidth,d+c);let w=Number.NEGATIVE_INFINITY,N=-1;for(let n=y;n<b;n+=l){const o=n-g;for(let i=h;i<k;i+=p){const u=i-c,l=m.get(e,n,i,t);l>w&&(w=l,N=a?s?((e*r.inHeight+n)*r.inWidth+i)*r.inChannels+t:(n*r.inWidth+i)*r.inChannels+t:o*d+u)}}o.set(N,e,n,i,t)}}return o}function Bd(e,t,n,r,a,s){const o=a.strideDepth,i=a.strideHeight,u=a.strideWidth,l=a.dilationDepth,p=a.dilationHeight,c=a.dilationWidth,d=a.effectiveFilterDepth,h=a.effectiveFilterHeight,f=a.effectiveFilterWidth,m=a.padInfo.front,g=a.padInfo.top,y=a.padInfo.left,b="max"===s?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,k=os(a.outShape,n),w=k.values,N=a.outShape[1]*a.outShape[2]*a.outShape[3]*a.outShape[4],x=a.outShape[2]*a.outShape[3]*a.outShape[4],v=a.outShape[3]*a.outShape[4],T=a.outShape[4];for(let t=0;t<a.batchSize;++t){const n=t*N,k=t*r[0];for(let t=0;t<a.inChannels;++t)for(let N=0;N<a.outDepth;++N){const I=N*o-m;let S=I;for(;S<0;)S+=l;const E=Math.min(a.inDepth,d+I),_=n+N*x;for(let n=0;n<a.outHeight;++n){const o=n*i-g;let d=o;for(;d<0;)d+=p;const m=Math.min(a.inHeight,h+o),N=_+n*v;for(let n=0;n<a.outWidth;++n){const o=n*u-y;let i=o;for(;i<0;)i+=c;const h=Math.min(a.inWidth,f+o),g=N+n*T;let x=b,v=0,I=0;for(let n=S;n<E;n+=l){const a=k+n*r[1];for(let n=d;n<m;n+=p){const o=a+n*r[2];for(let n=i;n<h;n+=c){const a=e[o+n*r[3]+t];if("max"===s&&a>x?x=a:"avg"===s&&(v+=a,I++),isNaN(x))break}if(isNaN(x))break}if(isNaN(x))break}w[g+t]="avg"===s?v/I:x}}}}return k}const Pd={kernelName:ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;Sc(a,"avgPool");const{filterSize:s,strides:o,pad:i,dimRoundingMode:u}=r;_(ao(o,1),()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const l=Gs(a.shape,s,o,1,i,u);let p;if(1===l.filterWidth&&1===l.filterHeight&&F(l.inShape,l.outShape))p=Fc({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=U(a.shape),r=zd(e,a.shape,a.dtype,t,l,"avg");p=n.makeTensorInfo(l.outShape,a.dtype,r.values)}return p}},Vd={kernelName:we,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;Sc(a,"avgPool3d");const p=Zs(a.shape,s,o,1,i,u,l),c=Bd(n.data.get(a.dataId).values,a.shape,a.dtype,U(a.shape),p,"avg");return n.makeTensorInfo(c.shape,"float32",c.values)}},Wd={kernelName:"AvgPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;Sc([a,s],"avgPool3DGrad");const p=Zs(s.shape,o,i,1,u,l),c=p.strideDepth,d=p.strideHeight,h=p.strideWidth,f=p.filterDepth,m=p.filterHeight,g=p.filterWidth,y=p.dilationDepth,b=p.dilationHeight,k=p.dilationWidth,w=p.effectiveFilterDepth,N=p.effectiveFilterHeight,x=p.effectiveFilterWidth,v=w-1-p.padInfo.front,T=x-1-p.padInfo.left,I=N-1-p.padInfo.top,S=os(s.shape,"float32"),E=1/(f*m*g),_=n.bufferSync(a);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inDepth;++n)for(let r=0;r<p.inHeight;++r)for(let a=0;a<p.inWidth;++a){const s=n-v,o=r-I,i=a-T;let u=0;for(let n=0;n<w;n+=y){const r=(s+n)/c;if(!(r<0||r>=p.outDepth||Math.floor(r)!==r))for(let n=0;n<N;n+=b){const a=(o+n)/d;if(!(a<0||a>=p.outHeight||Math.floor(a)!==a))for(let n=0;n<x;n+=k){const s=(i+n)/h;s<0||s>=p.outWidth||Math.floor(s)!==s||(u+=_.get(e,r,a,s,t))}}}S.set(u*E,e,n,r,a,t)}return n.makeTensorInfo(S.shape,S.dtype,S.values)}},Hd={kernelName:"AvgPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,o=s;Sc([a,s],"avgPoolGrad");const{filterSize:i,strides:u,pad:l}=r,p=Gs(o.shape,i,u,1,l),c=p.strideHeight,d=p.strideWidth,h=p.filterHeight,f=p.filterWidth,m=p.dilationHeight,g=p.dilationWidth,y=p.effectiveFilterHeight,b=p.effectiveFilterWidth,k=b-1-p.padInfo.left,w=y-1-p.padInfo.top,N=os(o.shape,"float32"),x=1/(h*f),v=n.data.get(a.dataId).values,T=os(a.shape,"float32",v);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inHeight;++n)for(let r=0;r<p.inWidth;++r){const a=n-w,s=r-k;let o=0;for(let n=0;n<y;n+=m){const r=(a+n)/c;if(!(r<0||r>=p.outHeight||Math.floor(r)!==r))for(let n=0;n<b;n+=g){const a=(s+n)/d;a<0||a>=p.outWidth||Math.floor(a)!==a||(o+=T.get(e,r,a,t))}}N.set(o*x,e,n,r,t)}return n.makeTensorInfo(N.shape,N.dtype,N.values)}},Ud={kernelName:ut,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,scale:s,offset:o,mean:i,variance:u}=t;_(i.shape.length===u.shape.length,()=>"Batch normalization gradient requires mean and variance to have equal ranks."),_(null==o||i.shape.length===o.shape.length,()=>"Batch normalization gradient requires mean and offset to have equal ranks."),_(null==s||i.shape.length===s.shape.length,()=>"Batch normalization gradient requires mean and scale to have equal ranks."),Sc([a,i,u,s,o],"batchNorm");let{varianceEpsilon:l}=r;null==l&&(l=.001);const p=n.data.get(a.dataId).values,c=n.data.get(i.dataId).values,d=n.data.get(u.dataId).values,h=s?n.data.get(s.dataId).values:new Float32Array([1]),f=o?n.data.get(o.dataId).values:new Float32Array([0]),m=new Float32Array(p.length),g=f.length,y=h.length,b=d.length,k=c.length;let w=0,N=0,x=0,v=0;for(let e=0;e<p.length;++e)m[e]=f[w++]+(p[e]-c[N++])*h[x++]/Math.sqrt(d[v++]+l),w>=g&&(w=0),N>=k&&(N=0),x>=y&&(x=0),v>=b&&(v=0);return n.makeTensorInfo(a.shape,a.dtype,m)}};function qd(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,size:o}=r;Sc(a,"slice");const[i,u]=function(e,t,n){let r;const a=e.shape.length;let s;return r="number"==typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach(e=>{_(-1!==e,()=>"slice() does not support negative begin indexing.")}),s=null==n?new Array(a).fill(-1):"number"==typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map((t,n)=>t>=0?t:(_(-1===t,()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`),e.shape[n]-r[n])),[r,s]}(a,s,o);!function(e,t,n){const r=e.shape.length;_(r===t.length,()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`),_(r===n.length,()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`);for(let a=0;a<r;++a)_(t[a]+n[a]<=e.shape[a],()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`)}(a,i,u);const l=function(e,t,n,r,a){const s=function(e,t,n){let r=n.length;for(let e=0;e<n.length;e++)if(n[e]>1){r=e;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}(r,t,n),o=D(n),i=U(r);if(s){const n=function(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}(t,i);return"string"===a?e.slice(n,n+o):e.subarray(n,n+o)}const u=os(r,a,"string"===a?Ic(e):e),l=os(n,a);for(let e=0;e<l.size;++e){const n=l.indexToLoc(e),r=n.map((e,n)=>e+t[n]);l.set(u.get(...r),...n)}return"string"===a?l.values.map(e=>wr(e)):l.values}(n.data.get(a.dataId).values,i,u,a.shape,a.dtype);return n.makeTensorInfo(u,a.dtype,l)}const Kd={kernelName:hn,backendName:"cpu",kernelFunc:qd},jd={kernelName:xe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,crops:o}=r;Sc([a],"batchToSpaceND");const i=s.reduce((e,t)=>e*t),u=ic(a.shape,s,i),l=uc(u.length,s.length),p=lc(a.shape,s,i),c=function(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}(o,s.length),d=function(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}(p,o,s.length),h=ud({inputs:{x:a},backend:n,attrs:{shape:u}}),f=wd({inputs:{x:h},backend:n,attrs:{perm:l}}),m=ud({inputs:{x:f},backend:n,attrs:{shape:p}}),g=qd({inputs:{x:m},backend:n,attrs:{begin:c,size:d}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}};function Gd(e,t,n,r,a){const s=D(r),o=G(a,n);for(let n=0;n<e.length;n++){const r=e[n];if(r<0)throw new Error("Input x must be non-negative!");r>=a||(o[r]+=s>0?t[n]:1)}return o}const Zd={kernelName:ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=Gd(n.data.get(a.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,i)}},Jd={kernelName:Te,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=As(Array.from(s),Array.from(o));return n.makeTensorInfo([i.length],"int32",Int32Array.from(i))}},Yd=qc(e=>Math.ceil(e)),Qd=$c(Se,Yd),Xd={kernelName:Se,backendName:"cpu",kernelFunc:Qd},eh=Mc(Ee,(e,t)=>{const n=t;return e>n.clipValueMax?n.clipValueMax:e<n.clipValueMin?n.clipValueMin:e}),th={kernelName:Ee,backendName:"cpu",kernelFunc:eh},nh={kernelName:Me,backendName:"cpu",kernelFunc:e=>{const{x:t}=e.inputs,n=e.backend,r=new Float32Array(D(t.shape)),a=n.data.get(t.dataId),s=a.complexTensorInfos.real,o=a.complexTensorInfos.imag,i=n.data.get(s.dataId).values,u=n.data.get(o.dataId).values;for(let e=0;e<i.length;e++){const t=i[e],n=u[e];r[e]=Math.hypot(t,n)}return n.makeOutput(r,t.shape,"float32")}};function rh(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.imag,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}const ah={kernelName:mt,backendName:"cpu",kernelFunc:rh};function sh(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r,s=C(a,t[0].shape)[0];!function(e,t){const n=e[0].length;e.forEach((e,t)=>{_(e.length===n,()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`)}),_(t>=0&&t<n,()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`);const r=e[0];e.forEach((e,a)=>{for(let s=0;s<n;s++)_(s===t||e[s]===r[s],()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`)})}(t.map(e=>e.shape),s);let o=sc(t.map(e=>e.shape),s);if(0===D(o))return n.makeTensorInfo(o,t[0].dtype,[]);const i=t.filter(e=>D(e.shape)>0);if(1===i.length)return Fc({inputs:{x:i[0]},backend:n});if("complex64"===i[0].dtype){const e=i.map(e=>Qc({inputs:{input:e},backend:n})),t=i.map(e=>rh({inputs:{input:e},backend:n})),r=sh({inputs:e,backend:n,attrs:{axis:s}}),a=sh({inputs:t,backend:n,attrs:{axis:s}}),o=Zc({inputs:{real:r,imag:a},backend:n});return e.forEach(e=>n.disposeIntermediateTensorInfo(e)),t.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),o}const u=i.map(e=>{const t=D(e.shape.slice(s));return ud({inputs:{x:e},backend:n,attrs:{shape:[-1,t]}})}),l=u.map(e=>({vals:n.data.get(e.dataId).values,shape:e.shape}));o=sc(u.map(e=>e.shape),1);const p=1===u[0].shape[0],c=function(e,t,n,r){const a=L(n,D(t));if(r&&"string"!==n){let t=0;e.forEach(e=>{const n=D(e.shape);a.set(e.vals,t),t+=n})}else{let r=0;e.forEach(e=>{const s="string"===n?Ic(e.vals):e.vals;let o=0;for(let n=0;n<e.shape[0];++n){const i=n*t[1]+r;for(let t=0;t<e.shape[1];++t)a[i+t]=s[o++]}r+=e.shape[1]})}return a}(l,o,t[0].dtype,p),d=sc(i.map(e=>e.shape),s),h=n.makeTensorInfo(d,t[0].dtype,c);return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}const oh={kernelName:$e,backendName:"cpu",kernelFunc:sh};function ih(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dataFormat:u,dilations:l,dimRoundingMode:p}=r;Sc([a,s],"conv2d");const c=so(u),d=Js(a.shape,s.shape,o,l,i,p,!1,c),h=d.filterHeight,f=d.filterWidth,m=d.dilationHeight,g=d.dilationWidth,y=d.padInfo.left,b=d.padInfo.top,k="channelsLast"===d.dataFormat,w=new $r(d.outShape,a.dtype),N=U(a.shape),x=U(s.shape),v=N[0],T=k?N[1]:N[2],I=k?N[2]:1,S=k?1:N[1],E=w.strides[0],_=k?w.strides[1]:w.strides[2],M=k?w.strides[2]:1,$=k?1:w.strides[1],A=n.data.get(a.dataId).values,D=n.data.get(s.dataId).values,F=w.values;for(let e=0;e<d.batchSize;++e){const t=e*v,n=e*E;for(let e=0;e<d.outHeight;++e){const r=n+e*_,a=e*d.strideHeight-b;for(let e=0;e<h;++e){const n=a+e*m;if(n<0||n>=d.inHeight)continue;const s=e*x[0],o=t+n*T;for(let e=0;e<d.outWidth;++e){const t=r+e*M,n=e*d.strideWidth-y;for(let e=0;e<f;++e){const r=n+e*g;if(r<0||r>=d.inWidth)continue;const a=o+r*I;let i=s+e*x[1];for(let e=0;e<d.inChannels;++e){const n=A[a+e*S];for(let e=0;e<d.outChannels;++e)F[t+e*$]+=n*D[i+e];i+=d.outChannels}}}}}}return n.makeTensorInfo(w.shape,w.dtype,F)}const uh={kernelName:Ae,backendName:"cpu",kernelFunc:ih},lh={kernelName:De,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,pad:i,dataFormat:u,dimRoundingMode:l,filterShape:p}=r;Sc([a,s],"conv2dBackpropFilter");const c=so(u),d=Js(a.shape,p,o,1,i,l,!1,c),{strideHeight:h,strideWidth:f,filterHeight:m,filterWidth:g}=d,y="channelsLast"===d.dataFormat,b=new $r(d.filterShape,"float32"),k=d.padInfo.left,w=d.padInfo.top,N=n.data.get(a.dataId).values,x=n.data.get(s.dataId).values,v=new $r(a.shape,a.dtype,N),T=new $r(s.shape,s.dtype,x);for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((w-e)/h)),n=Math.min(d.outHeight,(d.inHeight+w-e)/h);for(let r=0;r<g;++r){const a=Math.max(0,Math.ceil((k-r)/f)),s=Math.min(d.outWidth,(d.inWidth+k-r)/f);for(let o=0;o<d.inChannels;++o)for(let i=0;i<d.outChannels;++i){let u=0;for(let l=0;l<d.batchSize;++l)for(let p=t;p<n;++p){const t=e+p*h-w;for(let e=a;e<s;++e){const n=r+e*f-k;u+=y?v.get(l,t,n,o)*T.get(l,p,e,i):v.get(l,o,t,n)*T.get(l,i,p,e)}}b.set(u,e,r,o,i)}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},ph={kernelName:Fe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{inputShape:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:p}=r;Sc([a,s],"conv2dBackpropInput");const c=U(s.shape),d=U(a.shape);let h=so(l);const f=Js(o,s.shape,i,1,u,p,!1,h),m=new $r(f.inShape,"float32"),g=m.values,y=n.data.get(a.dataId).values,b=n.data.get(s.dataId).values,[k,w,N]=c,{batchSize:x,filterHeight:v,filterWidth:T,inChannels:I,inHeight:S,inWidth:E,outChannels:_,outHeight:M,outWidth:$,strideHeight:A,strideWidth:D}=f;h=f.dataFormat;const F=v-1-f.padInfo.top,O=T-1-f.padInfo.left,R="channelsLast"===h,C=m.strides[0],z=R?m.strides[1]:m.strides[2],L=R?m.strides[2]:1,B=R?1:m.strides[1],P=d[0],V=R?d[1]:d[2],W=R?d[2]:1,H=R?1:d[1];for(let e=0;e<x;++e)for(let t=0;t<I;++t)for(let n=0;n<S;++n){const r=n-F,a=Math.max(0,Math.ceil(r/A)),s=Math.min(M,(v+r)/A);for(let o=0;o<E;++o){const i=o-O,u=Math.max(0,Math.ceil(i/D)),l=Math.min($,(T+i)/D);let p=0;for(let n=a;n<s;++n){const a=n*A-r;for(let r=u;r<l;++r){const s=P*e+V*n+W*r,o=k*(v-1-a)+w*(T-1-(r*D-i))+N*t;for(let e=0;e<_;++e)p+=y[s+H*e]*b[o+e]}}g[C*e+z*n+L*o+B*t]=p}}return n.makeTensorInfo(m.shape,m.dtype,m.values)}},ch={kernelName:Oe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dilations:u}=r;Sc([a,s],"conv3d");const l=Ys(a.shape,s.shape,o,u,i),{filterDepth:p,filterHeight:c,filterWidth:d,dilationDepth:h,dilationHeight:f,dilationWidth:m,padInfo:g}=l,y=g.front,b=g.left,k=g.top,w=new $r(l.outShape,a.dtype),N=n.data.get(a.dataId).values,x=n.data.get(s.dataId).values,v=w.values,T=U(a.shape),I=U(s.shape);for(let e=0;e<l.batchSize;++e){const t=e*T[0],n=e*w.strides[0];for(let e=0;e<l.outDepth;++e){const r=n+e*w.strides[1],a=e*l.strideDepth-y;for(let e=0;e<p;++e){const n=a+e*h;if(n<0||n>=l.inDepth)continue;const s=e*I[0],o=t+n*T[1];for(let e=0;e<l.outHeight;++e){const t=r+e*w.strides[2],n=e*l.strideHeight-k;for(let e=0;e<c;++e){const r=n+e*f;if(r<0||r>=l.inHeight)continue;const a=s+e*I[1],i=o+r*T[2];for(let e=0;e<l.outWidth;++e){const n=t+e*l.outChannels,r=e*l.strideWidth-b;for(let e=0;e<d;++e){const t=r+e*m;if(t<0||t>=l.inWidth)continue;const s=a+e*I[2],o=i+t*l.inChannels;let u=s;for(let e=0;e<l.inChannels;++e){const t=N[o+e];for(let e=0;e<l.outChannels;++e)v[n+e]+=t*x[u+e];u+=l.outChannels}}}}}}}}return n.makeTensorInfo(w.shape,w.dtype,w.values)}},dh={kernelName:"Conv3DBackpropFilterV2",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,pad:i,filterShape:u}=r;Sc([a,s],"conv3dBackpropFilterV2");const l=U(a.shape),p=U(s.shape),c=Ys(a.shape,u,o,1,i),d=c.strideDepth,h=c.strideHeight,f=c.strideWidth,m=c.filterDepth,g=c.filterHeight,y=c.filterWidth,b=new $r(c.filterShape,"float32"),k=b.values,[w,N,x,v]=b.strides,T=n.data.get(s.dataId).values,[I,S,E,_]=p,M=n.data.get(a.dataId).values,[$,A,D,F]=l,O=c.padInfo.front,R=c.padInfo.left,C=c.padInfo.top;for(let e=0;e<m;++e){const t=Math.max(0,Math.ceil((O-e)/d)),n=Math.min(c.outDepth,(c.inDepth+O-e)/d),r=e*w;for(let a=0;a<g;++a){const s=Math.max(0,Math.ceil((C-a)/h)),o=Math.min(c.outHeight,(c.inHeight+C-a)/h),i=a*N+r;for(let r=0;r<y;++r){const u=Math.max(0,Math.ceil((R-r)/f)),l=Math.min(c.outWidth,(c.inWidth+R-r)/f),p=r*x+i;for(let i=0;i<c.inChannels;++i){const m=i*v+p;for(let p=0;p<c.outChannels;++p){let g=0;for(let m=0;m<c.batchSize;++m){const c=m*$,y=m*I;for(let m=t;m<n;++m){const t=(e+m*d-O)*A+c,n=m*S+y;for(let e=s;e<o;++e){const s=(a+e*h-C)*D+t,o=e*E+n;for(let e=u;e<l;++e){const t=e*_+o;g+=M[(r+e*f-R)*F+s+i]*T[t+p]}}}}k[m+p]=g}}}}}return n.makeTensorInfo(b.shape,b.dtype,b.values)}},hh={kernelName:Re,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{pad:o,strides:i,inputShape:u}=r;Sc([a],"conv3dBackpropInputV2");const l=U(a.shape),p=U(s.shape),c=Ys(u,s.shape,i,1,o),d=new $r(c.inShape,"float32"),h=d.values,[f,m,g,y]=d.strides,b=n.data.get(a.dataId).values,[k,w,N,x]=l,v=n.data.get(s.dataId).values,[T,I,S,E]=p,{batchSize:_,filterDepth:M,filterHeight:$,filterWidth:A,inChannels:D,inDepth:F,inHeight:O,inWidth:R,outChannels:C,outDepth:z,outHeight:L,outWidth:B,strideDepth:P,strideHeight:V,strideWidth:W}=c,H=M-1-c.padInfo.front,q=$-1-c.padInfo.top,K=A-1-c.padInfo.left;for(let e=0;e<_;++e)for(let t=0;t<D;++t)for(let n=0;n<F;++n){const r=n-H,a=Math.max(0,Math.ceil(r/P)),s=Math.min(z,(M+r)/P);for(let o=0;o<O;++o){const i=o-q,u=Math.max(0,Math.ceil(i/V)),l=Math.min(L,($+i)/V);for(let p=0;p<R;++p){const c=p-K,d=Math.max(0,Math.ceil(c/W)),_=Math.min(B,(A+c)/W);let D=0;for(let n=a;n<s;++n){const a=n*P-r;for(let r=u;r<l;++r){const s=r*V-i;for(let o=d;o<_;++o){const i=k*e+w*n+N*r+x*o,u=T*(M-1-a)+I*($-1-s)+S*(A-1-(o*W-c))+E*t;for(let e=0;e<C;++e)D+=b[i+e]*v[u+e]}}}h[f*e+m*n+g*o+y*p+t]=D}}}return n.makeTensorInfo(d.shape,d.dtype,d.values)}},fh=Mc(Ce,e=>Math.cos(e)),mh={kernelName:Ce,backendName:"cpu",kernelFunc:fh},gh=Mc(ze,e=>Math.cosh(e)),yh={kernelName:ze,backendName:"cpu",kernelFunc:gh},bh={kernelName:Pe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,[p,c,d,h]=a.shape,f=s.shape[0],[m,g]=i,y=os([f,m,g,h],"float32"),b=n.data.get(s.dataId).values,k=n.data.get(o.dataId).values,w=n.data.get(a.dataId).values,N=U(a.shape),x=U(y.shape);for(let e=0;e<f;e++){const t=4*e,n=b[t],r=b[t+1],a=b[t+2],s=b[t+3],o=k[e];if(o>=p)continue;const i=m>1?(a-n)*(c-1)/(m-1):0,f=g>1?(s-r)*(d-1)/(g-1):0;for(let t=0;t<m;t++){const p=m>1?n*(c-1)+t*i:.5*(n+a)*(c-1);if(p<0||p>c-1)for(let n=0;n<g;n++)for(let r=0;r<h;r++){const a=r+n*x[2]+t*x[1]+e*x[0];y.values[a]=l}else if("bilinear"===u){const n=Math.floor(p),a=Math.ceil(p),i=p-n;for(let u=0;u<g;u++){const p=g>1?r*(d-1)+u*f:.5*(r+s)*(d-1);if(p<0||p>d-1){for(let n=0;n<h;n++){const r=n+u*x[2]+t*x[1]+e*x[0];y.values[r]=l}continue}const c=Math.floor(p),m=Math.ceil(p),b=p-c;for(let r=0;r<h;r++){let s=r+c*N[2]+n*N[1]+o*N[0];const l=w[s];s=r+m*N[2]+n*N[1]+o*N[0];const p=w[s];s=r+c*N[2]+a*N[1]+o*N[0];const d=w[s];s=r+m*N[2]+a*N[1]+o*N[0];const h=l+(p-l)*b,f=d+(w[s]-d)*b;s=r+u*x[2]+t*x[1]+e*x[0],y.values[s]=h+(f-h)*i}}}else for(let n=0;n<g;++n){const a=g>1?r*(d-1)+n*f:.5*(r+s)*(d-1);if(a<0||a>d-1){for(let r=0;r<h;r++){const a=r+n*x[2]+t*x[1]+e*x[0];y.values[a]=l}continue}const i=Math.round(a),u=Math.round(p);for(let r=0;r<h;r++){const a=r+i*N[2]+u*N[1]+o*N[0],s=r+n*x[2]+t*x[1]+e*x[0];y.values[s]=w[a]}}}}return n.makeTensorInfo(y.shape,y.dtype,y.values)}},kh={kernelName:Le,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r;Sc(a,"cumprod");const u=li([s],a.shape.length);let l=a;null!=u&&(l=wd({inputs:{x:a},backend:n,attrs:{perm:u}}));const p=ci(1,a.shape.length)[0];if(p!==l.shape.length-1)throw new Error(`backend.cumprod in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${p}`);const c=Wr(l.dtype,"int32"),d=j(D(l.shape),c),h=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<h.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?1:h[n];else{const r=m(e,t-1);d[n]=o?h[r]*d[r]:h[n]*d[r]}}const g=n.makeTensorInfo(l.shape,c,d);if(null!=u){const e=wd({inputs:{x:g},backend:n,attrs:{perm:pi(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}},wh={kernelName:Be,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r;Sc(a,"cumsum");const u=li([s],a.shape.length);let l=a;null!=u&&(l=wd({inputs:{x:a},backend:n,attrs:{perm:u}}));const p=ci(1,a.shape.length)[0];if(p!==l.shape.length-1)throw new Error(`backend.cumsum in CPU expects an inner-most axis=${l.shape.length-1} but got axis=${p}`);const c=Wr(l.dtype,"int32"),d=G(D(l.shape),c),h=n.data.get(l.dataId).values,f=l.shape[l.shape.length-1],m=i?(e,t)=>e+f-t-1:(e,t)=>e+t;for(let e=0;e<h.length;e+=f)for(let t=0;t<f;t++){const n=m(e,t);if(0===t)d[n]=o?0:h[n];else{const r=m(e,t-1);d[n]=o?h[r]+d[r]:h[n]+d[r]}}const g=n.makeTensorInfo(l.shape,c,d);if(null!=u){const e=wd({inputs:{x:g},backend:n,attrs:{perm:pi(u)}});return n.disposeIntermediateTensorInfo(g),n.disposeIntermediateTensorInfo(l),e}return g}},Nh={kernelName:Ve,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=Gd(n.data.get(a.dataId).values,n.data.get(s.dataId).values,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,e)}if(2===a.shape.length){const e=function(e,t,n,r=!1){const a=e.shape[0],s=e.shape[1],o=os([a,n],t.dtype);for(let i=0;i<a;i++)for(let a=0;a<s;a++){const s=e.get(i,a);if(s<0)throw new Error("Input x must be non-negative!");s>=n||(r?o.set(1,i,s):t.size>0?o.set(o.get(i,s)+t.get(i,a),i,s):o.set(o.get(i,s)+1,i,s))}return o}(n.bufferSync(a),n.bufferSync(s),o,i);return n.makeTensorInfo(e.shape,s.dtype,e.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}},xh={kernelName:We,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:o}=r;_("NHWC"===o,()=>`Only NHWC dataFormat supported on CPU for depthToSpace. Got ${o}`);const i=a.shape[0],u=a.shape[1],l=a.shape[2],p=a.shape[3],c=u*s,d=l*s,h=p/(s*s),f=n.data.get(a.dataId).values,m=new Float32Array(i*c*d*h);let g=0;for(let e=0;e<i;++e)for(let t=0;t<c;++t){const n=Math.floor(t/s),r=t%s;for(let t=0;t<d;++t){const a=Math.floor(t/s),o=(r*s+t%s)*h;for(let t=0;t<h;++t){const r=t+o+p*(a+l*(n+u*e));m[g++]=f[r]}}}return n.makeTensorInfo([i,c,d,h],a.dtype,m)}};function vh(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s}=t,{strides:o,pad:i,dilations:u,dimRoundingMode:l}=r;Sc([a,s],"depthwiseConv2DNative");const p=U(a.shape),c=U(s.shape);let d=u;null==d&&(d=[1,1]),_(ao(o,d),()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${o} and dilations '${d}'`);const h=Js(a.shape,s.shape,o,d,i,l,!0),{filterHeight:f,filterWidth:m,dilationHeight:g,dilationWidth:y,padInfo:b}=h,k=b.left,w=b.top,N=h.outChannels/h.inChannels,x=new $r(h.outShape,a.dtype),v=n.data.get(a.dataId).values,T=n.data.get(s.dataId).values,I=x.values;for(let e=0;e<h.batchSize;++e){const t=e*p[0],n=e*x.strides[0];for(let e=0;e<h.outHeight;++e){const r=n+e*x.strides[1],a=e*h.strideHeight-w;for(let e=0;e<f;++e){const n=a+e*g;if(n<0||n>=h.inHeight)continue;const s=e*c[0],o=t+n*p[1];for(let e=0;e<h.outWidth;++e){const t=r+e*x.strides[2],n=e*h.strideWidth-k;for(let e=0;e<m;++e){const r=n+e*y;if(r<0||r>=h.inWidth)continue;const a=s+e*c[1],i=o+r*h.inChannels;let u=t,l=a;for(let e=0;e<h.inChannels;++e){const t=v[i+e];for(let e=0;e<N;++e)I[u+e]+=t*T[l+e];u+=N,l+=N}}}}}}return n.makeTensorInfo(x.shape,x.dtype,x.values)}const Th={kernelName:He,backendName:"cpu",kernelFunc:vh},Ih={kernelName:Ue,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,dy:s}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,filterShape:p}=r;Sc([a,s],"depthwiseConv2dNativeBackpropFilter");const c=Js(a.shape,p,o,i,u,l,!0),{strideHeight:d,strideWidth:h,filterHeight:f,filterWidth:m}=c,g=new $r(c.filterShape,"float32"),y=c.padInfo.left,b=c.padInfo.top,k=c.outChannels/c.inChannels,w=n.data.get(a.dataId).values,N=new $r(a.shape,a.dtype,w),x=n.data.get(s.dataId).values,v=new $r(s.shape,s.dtype,x);for(let e=0;e<f;++e){const t=Math.max(0,Math.ceil((b-e)/d)),n=Math.min(c.outHeight,(c.inHeight+b-e)/d);for(let r=0;r<m;++r){const a=Math.max(0,Math.ceil((y-r)/h)),s=Math.min(c.outWidth,(c.inWidth+y-r)/h);for(let o=0;o<c.outChannels;++o){const i=Math.trunc(o/k),u=o%k;let l=0;for(let u=0;u<c.batchSize;++u)for(let p=t;p<n;++p){const t=e+p*d-b;for(let e=a;e<s;++e){const n=r+e*h-y;l+=N.get(u,t,n,i)*v.get(u,p,e,o)}}g.set(l,e,r,i,u)}}}return n.makeTensorInfo(g.shape,g.dtype,g.values)}},Sh={kernelName:qe,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,filter:s}=t,{strides:o,dilations:i,pad:u,dimRoundingMode:l,inputShape:p}=r;Sc([a,s],"depthwiseConv2DNativeBackpropInput");const c=U(a.shape),d=U(s.shape),h=Js(p,s.shape,o,i,u,l,!0),f=new $r(h.inShape,"float32"),m=f.values,[g,y,b]=f.strides,k=n.data.get(a.dataId).values,[w,N,x]=c,v=n.data.get(s.dataId).values,[T,I,S]=d,{batchSize:E,filterHeight:_,filterWidth:M,inChannels:$,inHeight:A,inWidth:D,outChannels:F,outHeight:O,outWidth:R,strideHeight:C,strideWidth:z}=h,L=_-1-h.padInfo.top,B=M-1-h.padInfo.left,P=F/$;for(let e=0;e<E;++e)for(let t=0;t<$;++t)for(let n=0;n<A;++n){const r=n-L,a=Math.max(0,Math.ceil(r/C)),s=Math.min(O,(_+r)/C);for(let o=0;o<D;++o){const i=o-B,u=Math.max(0,Math.ceil(i/z)),l=Math.min(R,(M+i)/z);let p=0;for(let n=a;n<s;++n){const a=n*C-r;for(let r=u;r<l;++r){const s=w*e+N*n+x*r,o=T*(_-1-a)+I*(M-1-(r*z-i))+S*t;for(let e=0;e<P;++e)p+=k[s+(t*P+e)]*v[o+e]}}m[g*e+y*n+b*o+t]=p}}return n.makeTensorInfo(f.shape,f.dtype,f.values)}},Eh={kernelName:Ke,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=D(r.shape),s=n.data.get(r.dataId).values,o=os([a,a],r.dtype),i=o.values;for(let e=0;e<s.length;e++)i[e*a+e]=s[e];const u=[...r.shape,...r.shape];return n.makeTensorInfo(u,o.dtype,o.values)}},_h={kernelName:je,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a}=e,{strides:s,pad:o,dilations:i}=n,u=t,l=u.data.get(r.dataId).values,p=r.shape.length,c=u.data.get(a.dataId).values,d=a.shape.length,{batchSize:h,inHeight:f,inWidth:m,inChannels:g,outHeight:y,outWidth:b,padInfo:k,strideHeight:w,strideWidth:N,filterHeight:x,filterWidth:v,dilationHeight:T,dilationWidth:I,outShape:S}=js(r.shape,a.shape,s,o,"NHWC",i),E=D(S),_=S.length,M=L(r.dtype,E);for(let e=0;e<h;++e)for(let t=0;t<y;++t){const n=t*w-k.top;for(let s=0;s<b;++s){const o=s*N-k.left;for(let i=0;i<g;++i){let u=Number.MIN_SAFE_INTEGER;for(let t=0;t<x;++t){const s=n+t*T;if(s>=0&&s<f)for(let n=0;n<v;++n){const h=o+n*I;if(h>=0&&h<m){const o=Y([e,s,h,i],p,U(r.shape)),f=Y([t,n,i],d,U(a.shape)),m=l[o]+c[f];m>u&&(u=m)}}}M[Y([e,t,s,i],_,U(S))]=u}}}return{dataId:u.write(br(M,r.dtype),S,r.dtype),shape:S,dtype:r.dtype}}},Mh={kernelName:Ze,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:s}=e,{strides:o,pad:i,dilations:u}=n,l=t,p=K(r.shape,l.data.get(r.dataId).values),c=K(a.shape,l.data.get(a.dataId).values),{batchSize:d,inHeight:h,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:k,strideWidth:w,filterHeight:N,filterWidth:x,dilationHeight:v,dilationWidth:T,outShape:I}=js(r.shape,a.shape,o,i,"NHWC",u);_(s.rank===I.length,()=>`Error in ${Ze}, dy must have the same rank as output ${I.length}, but got ${s.rank}`);const S=K(I,l.data.get(s.dataId).values),E=Z(a.shape,a.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*k-b.top;for(let r=0;r<y;++r){const a=r*w-b.left;for(let s=0;s<m;++s){let o=Number.MIN_SAFE_INTEGER,i=0,u=0;for(let t=0;t<N;++t){const r=n+t*v;if(r>=0&&r<h)for(let n=0;n<x;++n){const l=a+n*T;if(l>=0&&l<f){const a=p[e][r][l][s]+c[t][n][s];a>o&&(o=a,i=t,u=n)}}}E[i][u][s]+=S[e][t][r][s]}}}return{dataId:l.write(br(E,r.dtype),a.shape,a.dtype),shape:a.shape,dtype:a.dtype}}},$h={kernelName:Ge,backendName:"cpu",kernelFunc:({inputs:e,backend:t,attrs:n})=>{const{x:r,filter:a,dy:s}=e,{strides:o,pad:i,dilations:u}=n,l=t,p=K(r.shape,l.data.get(r.dataId).values),c=K(a.shape,l.data.get(a.dataId).values),{batchSize:d,inHeight:h,inWidth:f,inChannels:m,outHeight:g,outWidth:y,padInfo:b,strideHeight:k,strideWidth:w,filterHeight:N,filterWidth:x,dilationHeight:v,dilationWidth:T,outShape:I}=js(r.shape,a.shape,o,i,"NHWC",u);_(s.rank===I.length,()=>`Error in ${Ge}, dy must have the same rank as output ${I.length}, but got ${s.rank}`);const S=K(I,l.data.get(s.dataId).values),E=Z(r.shape,r.dtype);for(let e=0;e<d;++e)for(let t=0;t<g;++t){const n=t*k-b.top;for(let r=0;r<y;++r){const a=r*w-b.left;for(let s=0;s<m;++s){let o=Number.MIN_SAFE_INTEGER,i=n<0?0:n,u=a<0?0:a;for(let t=0;t<N;++t){const r=n+t*v;if(r>=0&&r<h)for(let n=0;n<x;++n){const l=a+n*T;if(l>=0&&l<f){const a=p[e][r][l][s]+c[t][n][s];a>o&&(o=a,i=r,u=l)}}}E[e][i][u][s]+=S[e][t][r][s]}}}return{dataId:l.write(br(E,r.dtype),r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},Ah=zc((e,t)=>e*t),Dh=rd((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})),Fh=nd(zt,Ah,Dh),Oh={kernelName:zt,backendName:"cpu",kernelFunc:Fh};function Rh(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;let i;Sc(a,"sum"),i="bool"===a.dtype?ed({inputs:{x:a},backend:n,attrs:{dtype:"int32"}}):Fc({inputs:{x:a},backend:n});const u=i.shape.length,l=C(s,i.shape),p=li(l,u);let c=l,d=i;null!=p&&(d=wd({inputs:{x:i},backend:n,attrs:{perm:p}}),c=ci(c.length,u)),ui("sum",c,d.shape.length);const[h,f]=oi(d.shape,c);let m=Yc(n,h,Wr(d.dtype,"int32"));const g=D(f),y=n.data.get(m.dataId).values,b=n.data.get(d.dataId).values;for(let e=0;e<y.length;++e){const t=e*g;let n=0;for(let e=0;e<g;++e)n+=b[t+e];y[e]=n}if(o){const e=m;m=ud({inputs:{x:m},backend:n,attrs:{shape:ii(m.shape,l)}}),n.disposeIntermediateTensorInfo(e)}return n.disposeIntermediateTensorInfo(i),null!=p&&n.disposeIntermediateTensorInfo(d),m}const Ch={kernelName:"Sum",backendName:"cpu",kernelFunc:Rh},zh={kernelName:Ye,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:a}=r,s=t,{allDims:o,summedDims:i,idDims:u}=function(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(fc,"").length)/2;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split("->");_(-1===r.indexOf("..."),()=>'The ellipsis notation ("...") is not supported yet.');const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let e=0;e<a.length;++e){const t=a[e];if(!s.some(e=>-1!==e.indexOf(t)))throw new Error(`Output subscripts contain the label ${t} not present in the input subscripts.`);-1===i.indexOf(t)&&i.push(t)}for(let e=0;e<r.length;++e){const t=r[e];-1===i.indexOf(t)&&","!==t&&i.push(t)}const u=new Array(s.length);for(let e=0;e<o;++e){if(new Set(s[e].split("")).size!==s[e].length)throw new Error(`Found duplicate axes in input component ${s[e]}. Support for duplicate axes in input is not implemented yet.`);u[e]=[];for(let t=0;t<s[e].length;++t)u[e].push(i.indexOf(s[e][t]))}const l=i.length,p=[];for(let e=a.length;e<l;++e)p.push(e);return{allDims:i,summedDims:p,idDims:u}}(a,s.length);!function(e,t,n){const r=new Array(e);for(let e=0;e<n.length;++e){const a=n[e].shape;for(let n=0;n<t[e].length;++n)void 0===r[t[e][n]]?r[t[e][n]]=a[n]:_(r[t[e][n]]===a[n],()=>`Expected dimension ${r[t[e][n]]} at axis ${n} of input shaped ${JSON.stringify(a)}, but got dimension ${a[n]}`)}}(o.length,u,s);const{path:l,steps:p}=function(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let e=0;e<a;++e)r.push([]);const s=[];for(let e=0;e<n.length;++e){const a=yc(t,n[e]);for(const t of a)-1===s.indexOf(t)&&(r[e].push(t),s.push(t))}return{path:n,steps:r}}(i,u),c=p.length;let d=null,h=o.length;const f=[];for(let e=0;e<c;++e){for(const t of p[e]){const{permutationIndices:e,expandDims:r}=mc(h,u[t]);let a;gc(e)?a=s[t]:(a=wd({inputs:{x:s[t]},backend:n,attrs:{perm:e}}),f.push(a));const o=a.shape.slice();for(let e=0;e<r.length;++e)o.splice(r[e],0,1);F(a.shape,o)||(a=ud({inputs:{x:a},backend:n,attrs:{shape:o}}),f.push(a)),null===d?d=a:(d=Fh({inputs:{a,b:d},backend:n}),f.push(d))}e<c-1&&(l[e]>=0&&(d=Rh({inputs:{x:d},backend:n,attrs:{axis:l[e]-(o.length-h),keepDims:!1}}),f.push(d)),h--)}for(const e of f)e!==d&&n.disposeIntermediateTensorInfo(e);return d}},Lh={kernelName:"EluGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{dy:r,y:a}=t;Sc([r,a],"eluGrad");const s=new Float32Array(D(a.shape)),o=n.data.get(a.dataId).values,i=n.data.get(r.dataId).values;for(let e=0;e<o.length;++e){const t=o[e];s[e]=t>=1?i[e]:i[e]*(t+1)}return n.makeTensorInfo(a.shape,"float32",s)}},Bh=zc((e,t)=>e===t?1:0),Ph=nd(et,Bh,null,"bool"),Vh={kernelName:et,backendName:"cpu",kernelFunc:Ph},Wh=Mc(Xe,e=>{const t=Math.sign(e),n=Math.abs(e),r=1/(1+.3275911*n);return t*(1-((((1.061405429*r-1.453152027)*r+1.421413741)*r-.284496736)*r+.254829592)*r*Math.exp(-n*n))}),Hh={kernelName:Xe,backendName:"cpu",kernelFunc:Wh},Uh=qc(e=>Math.exp(e)),qh=$c(tt,Uh,"float32"),Kh={kernelName:tt,backendName:"cpu",kernelFunc:qh};function jh(e){const{inputs:t,backend:n,attrs:r}=e,{input:a}=t,{dim:s}=r,o=a.shape.length,i=a.shape.slice();let u=s;return s<0&&(_(-(o+1)<=s,()=>`Axis must be in the interval [${-(o+1)}, ${o}]`),u=o+s+1),i.splice(u,0,1),ud({inputs:{x:a},backend:n,attrs:{shape:i}})}const Gh={kernelName:nt,backendName:"cpu",kernelFunc:jh},Zh=qc(e=>Math.expm1(e)),Jh=$c(rt,Zh),Yh={kernelName:rt,backendName:"cpu",kernelFunc:Jh},Qh=zc((e,t)=>e/t),Xh=nd(Je,Qh),ef={kernelName:Je,backendName:"cpu",kernelFunc:Xh},tf=zc((e,t)=>e-t),nf=rd((e,t,n,r)=>({real:e-n,imag:t-r})),rf=nd(Fn,tf,nf),af={kernelName:Fn,backendName:"cpu",kernelFunc:rf};function sf(e,t,n){const r=e.shape,a=r[0],s=r[1],o=n.data.get(e.dataId),i=o.complexTensorInfos.real,u=o.complexTensorInfos.imag,l=[a,s],p=D(l),c=z("float32",p),d=z("float32",p);for(let e=0;e<a;e++){const r=qd({inputs:{x:i},backend:n,attrs:{begin:[e,0],size:[1,s]}}),a=qd({inputs:{x:u},backend:n,attrs:{begin:[e,0],size:[1,s]}}),o=Zc({inputs:{real:r,imag:a},backend:n}),{real:l,imag:p}=of(o,t,n),h=pc(l,p);for(let t=0;t<s;t++){const n=cc(h,t);c[e*s+t]=n.real,d[e*s+t]=n.imag}n.disposeIntermediateTensorInfo(r),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(o)}const h=n.makeTensorInfo(l,"float32",c),f=n.makeTensorInfo(l,"float32",d),m=Zc({inputs:{real:h,imag:f},backend:n});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}function of(e,t,n){const r=D(e.shape),a=n.data.get(e.dataId),s=n.data.get(a.complexTensorInfos.real.dataId).values,o=n.data.get(a.complexTensorInfos.imag.dataId).values;if((i=r)&i-1){const e=function(e,t,n){const r=new Float32Array(2*t);for(let a=0;a<t;a++){let s=0,o=0;for(let r=0;r<t;r++){const i=hc(a*r,t,n),u=cc(e,r);s+=u.real*i.real-u.imag*i.imag,o+=u.real*i.imag+u.imag*i.real}n&&(s/=t,o/=t),dc(r,s,o,a)}return r}(pc(s,o),r,t);return function(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}(e)}{const a=uf(s,o,r,t,n),i=[e.shape[0],e.shape[1]];if(t){const e=n.makeTensorInfo(i,"float32",a.real),t=n.makeTensorInfo(i,"float32",a.imag),s=n.makeTensorInfo([],"float32",yr(r,"float32")),o=Fc({inputs:{x:s},backend:n}),u=ef.kernelFunc({inputs:{a:e,b:s},backend:n}),l=ef.kernelFunc({inputs:{a:t,b:o},backend:n}),p=n.data.get(u.dataId).values,c=n.data.get(l.dataId).values;return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),{real:p,imag:c}}return a}var i}function uf(e,t,n,r,a){if(1===n)return{real:e,imag:t};const s=pc(e,t),o=n/2,i=function(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=0;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}(s),u=i.real,l=i.imag,p=[u.length],c=a.makeTensorInfo(p,"float32",u),d=a.makeTensorInfo(p,"float32",l),h=Zc({inputs:{real:c,imag:d},backend:a}),f=function(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let t=2;t<e.length;t+=4)n[Math.floor(t/4)]=e[t],r[Math.floor(t/4)]=e[t+1];return{real:n,imag:r}}(s),m=f.real,g=f.imag,y=[m.length],b=a.makeTensorInfo(y,"float32",m),k=a.makeTensorInfo(y,"float32",g),w=Zc({inputs:{real:b,imag:k},backend:a}),N=uf(u,l,o,r,a),x=N.real,v=N.imag,T=[x.length],I=a.makeTensorInfo(T,"float32",x),S=a.makeTensorInfo(T,"float32",v),E=Zc({inputs:{real:I,imag:S},backend:a}),_=uf(m,g,o,r,a),M=_.real,$=_.imag,A=[M.length],D=a.makeTensorInfo(A,"float32",M),F=a.makeTensorInfo(A,"float32",$),O=Zc({inputs:{real:D,imag:F},backend:a}),R=function(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}(n,r),C=[R.real.length],z=a.makeTensorInfo(C,"float32",R.real),L=a.makeTensorInfo(C,"float32",R.imag),B=Zc({inputs:{real:z,imag:L},backend:a}),P=Fh({inputs:{a:B,b:O},backend:a}),V=od({inputs:{a:E,b:P},backend:a}),W=rf({inputs:{a:E,b:P},backend:a}),H=Qc({inputs:{input:V},backend:a}),U=Qc({inputs:{input:W},backend:a}),q=rh({inputs:{input:V},backend:a}),K=rh({inputs:{input:W},backend:a}),j=sh({inputs:[H,U],backend:a,attrs:{axis:0}}),G=sh({inputs:[q,K],backend:a,attrs:{axis:0}}),Z=a.data.get(j.dataId).values,J=a.data.get(G.dataId).values;return a.disposeIntermediateTensorInfo(c),a.disposeIntermediateTensorInfo(d),a.disposeIntermediateTensorInfo(h),a.disposeIntermediateTensorInfo(b),a.disposeIntermediateTensorInfo(k),a.disposeIntermediateTensorInfo(w),a.disposeIntermediateTensorInfo(I),a.disposeIntermediateTensorInfo(S),a.disposeIntermediateTensorInfo(E),a.disposeIntermediateTensorInfo(D),a.disposeIntermediateTensorInfo(F),a.disposeIntermediateTensorInfo(O),a.disposeIntermediateTensorInfo(z),a.disposeIntermediateTensorInfo(L),a.disposeIntermediateTensorInfo(B),a.disposeIntermediateTensorInfo(P),a.disposeIntermediateTensorInfo(V),a.disposeIntermediateTensorInfo(W),a.disposeIntermediateTensorInfo(H),a.disposeIntermediateTensorInfo(q),a.disposeIntermediateTensorInfo(U),a.disposeIntermediateTensorInfo(K),a.disposeIntermediateTensorInfo(j),a.disposeIntermediateTensorInfo(G),{real:Z,imag:J}}const lf={kernelName:"FFT",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=D(r.shape),s=r.shape[r.shape.length-1],o=ud({inputs:{x:r},backend:n,attrs:{shape:[a/s,s]}}),i=sf(o,!1,n),u=ud({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}};function pf(e){const{backend:t,attrs:n}=e,{shape:r,value:a,dtype:s}=n,o=s||W(a),i=L(o,D(r));return function(e,t){e.fill(t)}(i,a),t.makeTensorInfo(r,o,i)}const cf={kernelName:at,backendName:"cpu",kernelFunc:pf},df={kernelName:st,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,a=n,s=z(r.dtype,D(r.shape)),[o,i,u,l]=r.shape,p=a.data.get(r.dataId).values;for(let e=0;e<o;e++){const t=e*u*i*l;for(let e=0;e<i;e++){const n=e*(u*l);for(let e=0;e<u;e++){const r=e*l;for(let a=0;a<l;a++){const o=Math.round(u-e-1),i=t+n+r+a;let c=p[i];o>=0&&o<u&&(c=p[t+n+o*l+a]),s[i]=c}}}}return{dataId:a.write(s,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},hf=qc(e=>Math.floor(e)),ff=$c(ot,hf),mf={kernelName:ot,backendName:"cpu",kernelFunc:ff},gf=zc((e,t)=>Math.floor(e/t)),yf=nd(it,gf,null,"int32"),bf={kernelName:it,backendName:"cpu",kernelFunc:yf},kf={kernelName:jn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:p,dilations:c,dimRoundingMode:d,activation:h,leakyreluAlpha:f}=r;let m=ih({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:p,dilations:c,dimRoundingMode:d}});if(o){const e=m;if("NCHW"===p&&1===o.shape.length&&1!==o.shape[0]){const e=ud({inputs:{x:o},backend:n,attrs:{shape:[o.shape[0],1,1]}});m=od({inputs:{a:m,b:e},backend:n}),n.disposeIntermediateTensorInfo(e)}else m=od({inputs:{a:m,b:o},backend:n});n.disposeIntermediateTensorInfo(e)}if(h){const e=m;if("NCHW"===p&&"prelu"===h&&1===i.shape.length&&1!==i.shape[0]){const e=ud({inputs:{x:i},backend:n,attrs:{shape:[i.shape[0],1,1]}});m=Gc(n,m,h,e,f),n.disposeIntermediateTensorInfo(e)}else m=Gc(n,m,h,i,f);n.disposeIntermediateTensorInfo(e)}return m}},wf={kernelName:Gn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,filter:s,bias:o,preluActivationWeights:i}=t,{strides:u,pad:l,dataFormat:p,dilations:c,dimRoundingMode:d,activation:h,leakyreluAlpha:f}=r;let m=vh({inputs:{x:a,filter:s},backend:n,attrs:{strides:u,pad:l,dataFormat:p,dilations:c,dimRoundingMode:d}});if(o){const e=m;m=od({inputs:{a:m,b:o},backend:n}),n.disposeIntermediateTensorInfo(e)}if(h){const e=m;m=Gc(n,m,h,i,f),n.disposeIntermediateTensorInfo(e)}return m}},Nf={kernelName:pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:a}=t,s=D(r.shape),o=a.shape,i=o[o.length-1],[u,l,p,c]=function(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===D(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let e=0;e<a.length-1;++e)o*=a[e];const i=e.shape,u=a.slice();u.pop();let l=1;for(let e=s;e<n;++e)l*=i[e],u.push(i[e]);const p=[...U(e.shape).map(e=>e/l),1].slice(0,s);return[u,o,l,p]}(r,a);if(0===l)return n.makeTensorInfo(u,r.dtype,[]);const d=function(e,t,n,r,a,s,o,i,u){const l=os([r,s],n);for(let n=0;n<r;n++){const r=[];let p=0;for(let t=0;t<a;t++){const s=e[n*a+t];p+=s*o[t],r.push(s)}if(p<0||p>=u/s)throw new Error(`Invalid indices: ${r} does not index into ${i}`);for(let e=0;e<s;e++)l.values[n*s+e]=t.get(...t.indexToLoc(p*s+e))}return l}(n.data.get(a.dataId).values,n.bufferSync(r),r.dtype,l,i,p,c,r.shape,s);return n.makeTensorInfo(u,r.dtype,d.values)}},xf={kernelName:lt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,indices:s}=t,{axis:o,batchDims:i}=r;Sc([a,s],"gatherV2");const u=C(o,a.shape)[0],l=n.data.get(s.dataId).values,p=a.shape[u];for(let e=0;e<l.length;++e){const t=l[e];_(t<=p-1&&t>=0,()=>`GatherV2: the index value ${t} is not in [0, ${p-1}]`)}let c=i;null==i&&(c=0);const d=D(s.shape),h=function(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let n=0;n<r;++n)if(e.shape[n]!==t.shape[n])throw new Error(`x.shape[${n}]: ${e.shape[n]} should be equal to indices.shape[${n}]: ${t.shape[n]}.`);const o=e.shape[n],i=[];let u=1,l=1,p=1;for(let t=0;t<r;++t)i.push(e.shape[t]),u*=e.shape[t];for(let t=r;t<n;t++)i.push(e.shape[t]),l*=e.shape[t];for(let e=r;e<a;e++)i.push(t.shape[e]);for(let t=n+1;t<s;t++)i.push(e.shape[t]),p*=e.shape[t];return{batchSize:u,sliceSize:p,outerSize:l,dimSize:o,outputShape:i}}(a,s,u,c),f=ud({inputs:{x:a},backend:n,attrs:{shape:[h.batchSize,h.outerSize,h.dimSize,h.sliceSize]}}),m=ud({inputs:{x:s},backend:n,attrs:{shape:[h.batchSize,d/h.batchSize]}}),g=[h.batchSize,h.outerSize,d/h.batchSize,h.sliceSize],y=n.bufferSync(m),b=function(e,t,n){const r=os(n,e.dtype);for(let n=0;n<r.size;++n){const a=r.indexToLoc(n).slice(),s=a[0],o=a[2],i=t.locToIndex([s,o]);a[2]=t.values[i];const u=e.locToIndex(a);0<=u&&u<e.values.length&&(r.values[n]=e.values[u])}return r}(n.bufferSync(f),y,g);return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.makeTensorInfo(h.outputShape,b.dtype,b.values)}},vf=zc((e,t)=>e>t?1:0),Tf=nd(ct,vf,null,"bool"),If={kernelName:ct,backendName:"cpu",kernelFunc:Tf},Sf=zc((e,t)=>e>=t?1:0),Ef=nd(dt,Sf,null,"bool"),_f={kernelName:dt,backendName:"cpu",kernelFunc:Ef},Mf={kernelName:ft,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t,a=D(r.shape),s=r.shape[r.shape.length-1],o=ud({inputs:{x:r},backend:n,attrs:{shape:[a/s,s]}}),i=sf(o,!0,n),u=ud({inputs:{x:i},backend:n,attrs:{shape:r.shape}});return n.disposeIntermediateTensorInfo(o),n.disposeIntermediateTensorInfo(i),u}},$f=Mc(gt,e=>Number.isFinite(e)?1:0,"bool"),Af={kernelName:gt,backendName:"cpu",kernelFunc:$f},Df=Mc(yt,e=>Math.abs(e)===1/0?1:0,"bool"),Ff={kernelName:yt,backendName:"cpu",kernelFunc:Df},Of=Mc(bt,e=>Number.isNaN(e)?1:0,"bool"),Rf={kernelName:bt,backendName:"cpu",kernelFunc:Of},Cf=zc((e,t)=>e<t?1:0),zf=nd(wt,Cf,null,"bool"),Lf={kernelName:wt,backendName:"cpu",kernelFunc:zf},Bf=zc((e,t)=>e<=t?1:0),Pf=nd(Nt,Bf,null,"bool"),Vf={kernelName:Nt,backendName:"cpu",kernelFunc:Pf},Wf={kernelName:xt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=function(e,t,n){const r=(t-e)/(n-1),a=G(n,"float32");a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+r;return a}(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}},Hf=qc(e=>Math.log(e)),Uf=$c(vt,Hf),qf={kernelName:vt,backendName:"cpu",kernelFunc:Uf},Kf=Mc(Tt,e=>Math.log1p(e)),jf={kernelName:Tt,backendName:"cpu",kernelFunc:Kf},Gf=zc((e,t)=>e&&t),Zf=nd(It,Gf,null,"bool"),Jf={kernelName:It,backendName:"cpu",kernelFunc:Zf},Yf=Mc(St,e=>e?0:1,"bool"),Qf={kernelName:St,backendName:"cpu",kernelFunc:Yf},Xf=zc((e,t)=>e||t),em=nd(Et,Xf,null,"bool"),tm={kernelName:Et,backendName:"cpu",kernelFunc:em},nm={kernelName:"LRN",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{depthRadius:s,bias:o,alpha:i,beta:u}=r;Sc(a,"LRN");const l=a.shape[3],p=l-1,c=n.data.get(a.dataId).values,d=D(a.shape),h=new Float32Array(d);function f(e){const t=e%l;let n=e-t+Math.max(0,t-s);const r=e-t+Math.min(t+s,p);let a=0;for(;n<=r;n++){const e=c[n];a+=e*e}return a}for(let e=0;e<d;e++){const t=f(e),n=c[e]*Math.pow(o+i*t,-u);h[e]=n}return n.makeTensorInfo(a.shape,a.dtype,h)}},rm={kernelName:"LRNGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:p}=r;Sc(o,"LRNGrad");const c=D(o.shape),d=o.shape[3],h=n.data.get(o.dataId).values,f=n.data.get(a.dataId).values,m=n.data.get(s.dataId).values,g=new Float32Array(c),y=c;for(let e=0;e<y;e++){const t=e%d,n=e-t+Math.max(0,t-i),r=e-t+Math.min(d,t+i+1);let a=0;for(let e=n;e<r;e++)a+=Math.pow(f[e],2);a=l*a+u;for(let t=n;t<r;t++){let n=-2*l*p*f[t]*m[e]/a;e===t&&(n+=Math.pow(a,-p)),n*=h[e],g[t]+=n}}return n.makeTensorInfo(o.shape,a.dtype,g)}};function am(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reductionIndices:s,keepDims:o}=r,i=n;let u=a.shape;const l=u.length,p=C(s,u);let c=p;const d=li(c,l);let h=i.data.get(a.dataId).values;if(null!=d){const e=new Array(l);for(let t=0;t<e.length;t++)e[t]=u[d[t]];h=kd(h,u,a.dtype,d,e),c=ci(c.length,l),u=e}Sc(a,"max"),ui("max",c,l);const[f,m]=oi(u,c),g=function(e,t,n,r){const a=z(r,D(n));for(let n=0;n<a.length;++n){const r=n*t;let s=e[r];for(let n=0;n<t;++n){const t=e[r+n];(Number.isNaN(t)||t>s)&&(s=t)}a[n]=s}return a}(h,D(m),f,a.dtype),y=i.write(g,f,a.dtype);let b=f;return o&&(b=ii(f,p)),{dataId:y,shape:b,dtype:a.dtype}}const sm={kernelName:"Max",backendName:"cpu",kernelFunc:am},om=zc((e,t)=>Math.max(e,t)),im=nd(_t,om),um={kernelName:_t,backendName:"cpu",kernelFunc:im},lm={kernelName:Mt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t;Sc(a,"maxPool");const{filterSize:s,strides:o,pad:i,dimRoundingMode:u}=r;_(ao(o,1),()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${o} and dilations '1'`);const l=Gs(a.shape,s,o,1,i,u);let p;if(1===l.filterWidth&&1===l.filterHeight&&F(l.inShape,l.outShape))p=Fc({inputs:{x:a},backend:n});else{const e=n.data.get(a.dataId).values,t=U(a.shape),r=zd(e,a.shape,a.dtype,t,l,"max");p=n.makeTensorInfo(l.outShape,a.dtype,r.values)}return p}},pm={kernelName:$t,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{filterSize:s,strides:o,pad:i,dimRoundingMode:u,dataFormat:l}=r;Sc(a,"maxPool3d");const p=Zs(a.shape,s,o,1,i,u,l),c=Bd(n.data.get(a.dataId).values,a.shape,a.dtype,U(a.shape),p,"max");return n.makeTensorInfo(c.shape,"float32",c.values)}},cm={kernelName:"MaxPool3DGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;Sc([a,s],"maxPool3DGrad");const p=Zs(s.shape,o,i,1,u,l),c=function(e,t){const n=os(t.outShape,"int32"),r=t.strideDepth,a=t.strideHeight,s=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,u=t.dilationWidth,l=t.effectiveFilterDepth,p=t.effectiveFilterHeight,c=t.effectiveFilterWidth,d=t.padInfo.front,h=t.padInfo.top,f=t.padInfo.left;for(let m=0;m<t.batchSize;++m)for(let g=0;g<t.inChannels;++g)for(let y=0;y<t.outDepth;++y){const b=y*r-d;let k=b;for(;k<0;)k+=o;const w=Math.min(t.inDepth,l+b);for(let r=0;r<t.outHeight;++r){const l=r*a-h;let d=l;for(;d<0;)d+=i;const N=Math.min(t.inHeight,p+l);for(let a=0;a<t.outWidth;++a){const h=a*s-f;let x=h;for(;x<0;)x+=u;const v=Math.min(t.inWidth,c+h);let T=Number.NEGATIVE_INFINITY,I=-1;for(let t=k;t<w;t+=o){const n=t-b;for(let r=d;r<N;r+=i){const a=r-l;for(let s=x;s<v;s+=u){const o=s-h,i=e.get(m,t,r,s,g);i>=T&&(T=i,I=n*p*c+a*p+o)}}}n.set(I,m,y,r,a,g)}}}return n}(n.bufferSync(s),p),d=p.strideDepth,h=p.strideHeight,f=p.strideWidth,m=p.dilationDepth,g=p.dilationHeight,y=p.dilationWidth,b=p.effectiveFilterDepth,k=p.effectiveFilterHeight,w=p.effectiveFilterWidth,N=b-1-p.padInfo.front,x=w-1-p.padInfo.left,v=k-1-p.padInfo.top,T=os(s.shape,"float32"),I=n.bufferSync(a);for(let e=0;e<p.batchSize;++e)for(let t=0;t<p.inChannels;++t)for(let n=0;n<p.inDepth;++n)for(let r=0;r<p.inHeight;++r)for(let a=0;a<p.inWidth;++a){const s=n-N,o=r-v,i=a-x;let u=0;for(let n=0;n<b;n+=m){const r=(s+n)/d;if(!(r<0||r>=p.outDepth||Math.floor(r)!==r))for(let a=0;a<k;a+=g){const s=(o+a)/h;if(!(s<0||s>=p.outHeight||Math.floor(s)!==s))for(let o=0;o<w;o+=y){const l=(i+o)/f;if(l<0||l>=p.outWidth||Math.floor(l)!==l)continue;const d=b*k*w-1-c.get(e,r,s,l,t)===n*k*w+a*w+o?1:0;0!==d&&(u+=I.get(e,r,s,l,t)*d)}}}T.set(u,e,n,r,a,t)}return n.makeTensorInfo(T.shape,T.dtype,T.values)}},dm={kernelName:"MaxPoolGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:a,input:s,output:o}=t,i=s;Sc([s,o],"maxPoolGrad");const{filterSize:u,strides:l,pad:p,dimRoundingMode:c}=r,d=Gs(i.shape,u,l,1,p,c),h=n.data.get(i.dataId).values,f=os(d.outShape,i.dtype,Ld(h,i.shape,i.dtype,d).values),m=d.strideHeight,g=d.strideWidth,y=d.dilationHeight,b=d.dilationWidth,k=d.effectiveFilterHeight,w=d.effectiveFilterWidth,N=w-1-d.padInfo.left,x=k-1-d.padInfo.top,v=os(i.shape,"float32"),T=n.data.get(a.dataId).values,I=os(a.shape,"float32",T);for(let e=0;e<d.batchSize;++e)for(let t=0;t<d.inChannels;++t)for(let n=0;n<d.inHeight;++n)for(let r=0;r<d.inWidth;++r){const a=n-x,s=r-N;let o=0;for(let n=0;n<k;n+=y){const r=(a+n)/m;if(!(r<0||r>=d.outHeight||Math.floor(r)!==r))for(let a=0;a<w;a+=b){const i=(s+a)/g;if(i<0||i>=d.outWidth||Math.floor(i)!==i)continue;const u=k*w-1-f.get(e,r,i,t)===n*w+a?1:0;0!==u&&(o+=I.get(e,r,i,t)*u)}}v.set(o,e,n,r,t)}return n.makeTensorInfo(v.shape,v.dtype,v.values)}},hm={kernelName:At,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{x:r}=e,{filterSize:a,strides:s,pad:o,includeBatchInIndex:i}=t,u=n;Sc(r,"MaxPoolWithArgmax");const l=u.data.get(r.dataId).values,p=Gs(r.shape,a,s,[1,1],o),[c,d]=function(e,t,n,r,a){const s=zd(e,0,n,U(t),a,"max"),o=Ld(e,t,n,a,!0,r);return[s.values,o.values]}(l,r.shape,r.dtype,i,p),h=u.write(c,p.outShape,r.dtype),f=u.write(d,p.outShape,r.dtype);return[{dataId:h,shape:p.outShape,dtype:r.dtype},{dataId:f,shape:p.outShape,dtype:"int32"}]}},fm={kernelName:Dt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r,i=C(s,a.shape),u=D(oi(a.shape,i)[1]),l=[],p=n.makeTensorInfo([],"float32",new Float32Array([u]));l.push(p);const c=ed({inputs:{x:a},backend:n,attrs:{dtype:"float32"}});l.push(c);const d=Xh({inputs:{a:c,b:p},backend:n});l.push(d);const h=Rh({inputs:{x:d},backend:n,attrs:{axis:s,keepDims:o}});return l.forEach(e=>n.disposeIntermediateTensorInfo(e)),h}},mm={kernelName:"Min",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Sc(a,"min");const i=C(s,a.shape);let u=i;const l=li(u,a.shape.length);let p=a;null!=l&&(p=wd({inputs:{x:a},backend:n,attrs:{perm:l}}),u=ci(u.length,a.shape.length)),ui("min",u,p.shape.length);const[c,d]=oi(p.shape,u),h=D(d),f=G(D(c),p.dtype),m=n.data.get(p.dataId).values;for(let e=0;e<f.length;++e){const t=e*h;let n=m[t];for(let e=0;e<h;++e){const r=m[t+e];(Number.isNaN(r)||r<n)&&(n=r)}f[e]=n}null!=l&&n.disposeIntermediateTensorInfo(p);const g=n.makeTensorInfo(c,p.dtype,f);if(o){const e=ud({inputs:{x:g},backend:n,attrs:{shape:ii(c,i)}});return n.disposeIntermediateTensorInfo(g),e}return g}},gm=zc((e,t)=>Math.min(e,t)),ym=nd(Ft,gm),bm={kernelName:Ft,backendName:"cpu",kernelFunc:ym},km={kernelName:Ot,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,mode:o}=r;Sc(a,"mirrorPad");const i=s.map((e,t)=>e[0]+a.shape[t]+e[1]),u=s.map(e=>e[0]),l=s.map((e,t)=>e[0]+a.shape[t]),p="reflect"===o?0:1,c=n.data.get(a.dataId).values,d=a.shape.length,h=U(a.shape),f=D(i),m=i.length,g=U(i),y=z(a.dtype,f);for(let e=0;e<f;e++){let t=Q(e,m,g);for(let e=0;e<m;e++)t[e]<u[e]?t[e]=2*u[e]-t[e]-p:t[e]>=l[e]&&(t[e]=2*(l[e]-1)-t[e]+p);t=t.map((e,t)=>e-u[t]);const n=Y(t,d,h);y[e]=c[n]}return{dataId:n.write(y,i,a.dtype),shape:i,dtype:a.dtype}}},wm=zc((e,t)=>{const n=e%t;return e<0&&t<0||e>=0&&t>=0?n:(n+t)%t}),Nm=nd(Rt,wm),xm={kernelName:Rt,backendName:"cpu",kernelFunc:Nm};function vm(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{dim:s}=r,o=a.shape.length;let i=s;if(-1===i&&(i=o-1),i!==o-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${o} and dim was ${i}`);const u=C([i],a.shape),l=am({inputs:{x:a},backend:n,attrs:{reductionIndices:u,keepDims:!1}}),p=ii(l.shape,u),c=ud({inputs:{x:l},backend:n,attrs:{shape:p}}),d=rf({inputs:{a,b:c},backend:n}),h=qh({inputs:{x:d},backend:n}),f=Rh({inputs:{x:h},backend:n,attrs:{axis:u,keepDims:!1}}),m=ud({inputs:{x:f},backend:n,attrs:{shape:p}}),g=Xh({inputs:{a:h,b:m},backend:n});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),g}const Tm={kernelName:xn,backendName:"cpu",kernelFunc:vm},Im={kernelName:Ct,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:o,normalized:i}=r;Sc(a,"multinomial");const u=i?a:vm({inputs:{logits:a},backend:n,attrs:{dim:-1}}),l=u.shape[0],p=u.shape[1],c=n.data.get(u.dataId).values,d=[l,s],h=G(D(d),"int32");for(let e=0;e<l;++e){const t=e*p,n=new Float32Array(p-1);n[0]=c[t];for(let e=1;e<n.length;++e)n[e]=n[e-1]+c[t+e];const r=Du.alea(o.toString()),a=e*s;for(let e=0;e<s;++e){const t=r();h[a+e]=n.length;for(let r=0;r<n.length;r++)if(t<n[r]){h[a+e]=r;break}}}return i||n.disposeIntermediateTensorInfo(u),n.makeTensorInfo(d,"int32",h)}},Sm={kernelName:"Neg",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;Sc(r,"neg");const a=n.data.get(r.dataId).values,[s,o]=function(e,t,n){const r=yr(-1,n);return Ah([],t,r,e,n)}(a,r.shape,r.dtype);return n.makeTensorInfo(o,r.dtype,s)}},Em=bp,_m={kernelName:Bt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=r;Sc(a,"NonMaxSuppression");const l=n.data.get(a.dataId).values,p=n.data.get(s.dataId).values,{selectedIndices:c}=Em(l,p,o,i,u);return n.makeTensorInfo([c.length],"int32",new Int32Array(c))}},Mm=kp,$m={kernelName:Pt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,padToMaxOutputSize:l}=r;Sc(a,"NonMaxSuppressionPadded");const p=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,{selectedIndices:d,validOutputs:h}=Mm(p,c,o,i,u,l);return[n.makeTensorInfo([d.length],"int32",new Int32Array(d)),n.makeTensorInfo([],"int32",new Int32Array([h]))]}},Am=wp,Dm={kernelName:Vt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{boxes:a,scores:s}=t,{maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=r;Sc(a,"NonMaxSuppressionWithScore");const p=n.data.get(a.dataId).values,c=n.data.get(s.dataId).values,d=o,h=i,f=u,m=l,{selectedIndices:g,selectedScores:y}=Am(p,c,d,h,f,m);return[n.makeTensorInfo([g.length],"int32",new Int32Array(g)),n.makeTensorInfo([y.length],"float32",new Float32Array(y))]}},Fm=zc((e,t)=>e!==t?1:0),Om=nd(Lt,Fm,null,"bool"),Rm={kernelName:Lt,backendName:"cpu",kernelFunc:Om},Cm={kernelName:Ht,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a}=t,{dtype:s,depth:o,onValue:i,offValue:u}=r;Sc(a,"oneHot");const l=D(a.shape),p=new Float32Array(l*o);p.fill(u);const c=n.data.get(a.dataId).values;for(let e=0;e<l;++e)c[e]>=0&&c[e]<o&&(p[e*o+c[e]]=i);return n.makeTensorInfo([...a.shape,o],s,p)}};function zm(e){const{inputs:t,backend:n}=e,{x:r}=t;if("string"===r.dtype)throw new Error("zerosLike is not supported for string tensors");if("complex64"===r.dtype){const e=Qc({inputs:{input:r},backend:n}),t=zm({inputs:{x:e},backend:n}),a=rh({inputs:{input:r},backend:n}),s=zm({inputs:{x:a},backend:n}),o=Zc({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return pf({backend:n,attrs:{shape:r.shape,value:0,dtype:r.dtype}})}const Lm={kernelName:Hn,backendName:"cpu",kernelFunc:zm},Bm={kernelName:Wt,backendName:"cpu",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported for string tensors");if("complex64"===a.dtype){const t=Qc({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=rh({inputs:{input:a},backend:r}),o=zm({inputs:{x:s},backend:r}),i=Zc({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return pf({backend:r,attrs:{shape:a.shape,value:1,dtype:a.dtype}})}};function Pm(e){const{inputs:t,backend:n,attrs:r}=e,{axis:a}=r;if(1===t.length)return jh({inputs:{input:t[0]},backend:n,attrs:{dim:a}});const s=t[0].shape,o=t[0].dtype;t.forEach(e=>{M(s,e.shape,"All tensors passed to stack must have matching shapes"),_(o===e.dtype,()=>"All tensors passed to stack must have matching dtypes")});const i=[],u=sh({inputs:t.map(e=>{const t=jh({inputs:{input:e},backend:n,attrs:{dim:a}});return i.push(t),t}),backend:n,attrs:{axis:a}});return i.forEach(e=>n.disposeIntermediateTensorInfo(e)),u}const Vm={kernelName:Ut,backendName:"cpu",kernelFunc:Pm},Wm={kernelName:qt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{paddings:s,constantValue:o}=r;Sc(a,"pad");const i=s.map((e,t)=>e[0]+a.shape[t]+e[1]),u=s.map(e=>e[0]),l=n.data.get(a.dataId).values,p=D(a.shape),c=a.shape.length,d=U(a.shape),h=D(i),f=i.length,m=U(i),g=z(a.dtype,h);0!==o&&g.fill(o);for(let e=0;e<p;e++)g[Y(Q(e,c,d).map((e,t)=>e+u[t]),f,m)]=l[e];return{dataId:n.write(g,i,a.dtype),shape:i,dtype:a.dtype}}},Hm=zc((e,t)=>Math.pow(e,t)),Um=nd(Kt,Hm),qm={kernelName:Kt,backendName:"cpu",kernelFunc:Um},Km={kernelName:Gt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,keepDims:o}=r;Sc(a,"prod");const i=a.shape.length,u=C(s,a.shape),l=li(u,i);let p=u,c=a;const d=[];null!=l&&(c=wd({inputs:{x:a},backend:n,attrs:{perm:l}}),d.push(c),p=ci(p.length,i));const h=n.data.get(c.dataId).values,{outVals:f,outShape:m,outDtype:g}=function(e,t,n,r){const[a,s]=oi(e,r),o=Wr(t,"int32"),i=G(D(a),o),u=D(s);for(let e=0;e<i.length;++e){const t=e*u;let r=1;for(let e=0;e<u;++e)r*=n[t+e];i[e]=r}return{outVals:i,outShape:a,outDtype:o}}(c.shape,c.dtype,h,p);let y=m;return o&&(y=ii(m,u)),d.forEach(e=>n.disposeIntermediateTensorInfo(e)),n.makeTensorInfo(y,g,f)}};function jm(e,t){const n=e.slice(0,t);for(;n.length<t;)n.push(1);for(let r=t;r<e.length;r++)n[t-1]*=e[r];return n}function Gm(e,t,n,r,a,s,o,i){if(0===e.length)throw new Error("paramsNestedSplits must be non empty");if(0===t[0].length)throw new Error("Split tensors must not be scalars");if(function(e,t,n){e.forEach((e,r)=>{if(e<0||e>=n){const a=Q(r,t.length,U(t)).join(",");throw new Error(`indices[${a}] = ${e} is not in [0, ${n})`)}})}(s,o,t[0][0]-1),0===r.length)throw new Error("params.rank must be nonzero");const u=r[0],{outSplits:l,valueSlices:p,numValues:c}=function(e,t,n,r){const a=[];let s=0;const o=t.length-1+n.length,i=new Array(o).fill(null).map(()=>[0]);!function(e,t){for(let n=0;n<e.length;++n){const r=e[n],a=n===e.length-1?t:e[n+1].length;if(0===r.length)throw new Error("Ragged splits may not be empty");if(r[0]<0)throw new Error("Ragged splits must be non-negative");if(r[r.length-1]>a)throw new Error("Ragged splits must not point past values");for(let e=1;e<r.length;++e)if(r[e-1]>r[e])throw new Error("Ragged splits must be sorted in ascending order")}}(n,r);let u=1;for(let e=0;e<t.length-1;++e){u*=t[e];const n=t[e+1];for(let t=1;t<u+1;++t)i[e].push(t*n)}for(let r=0;r<e.length;++r){let o=e[r],u=e[r]+1;for(let e=0;e<n.length;++e){const r=n[e],a=e+t.length-1;if(a>=0){const e=i[a],t=e[e.length-1]-r[o];for(let e=o;e<u;++e)i[a].push(r[e+1]+t)}o=r[o],u=r[u]}u!==o&&(a.push([o,u]),s+=u-o)}return{outSplits:i,valueSlices:a,numValues:s}}(s,o,e,u),d=function(e){const t=[];for(let n=0;n<e.length;++n){const r=L("int32",e[n].length);t.push(r),e[n].forEach((e,t)=>r[t]=e)}return t}(l),h=function(e,t,n,r,a){const s=t.slice();s[0]=a;const o=L(n,D(s)),i=e.length;return function(e,t,n,r,a,s){const o=jm(t,2)[1],i=jm(s,2)[1];let u=0;for(const t of n)for(let n=t[0];n<t[1];++n){for(let t=0;t<r;++t)a[u*i+t]=e[n*o+t];++u}}(e,t,r,0===i?0:i/t[0],o,s),[o,s]}(n,r,a,p,c);return[d,h[0],h[1]]}const Zm={kernelName:Zt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{paramsNestedSplits:a,paramsDenseValues:s,indices:o}=t,{outputRaggedRank:i}=r,u=a.map(e=>n.data.get(e.dataId).values),l=a.map(e=>e.shape),p=n.data.get(s.dataId).values,c=n.data.get(o.dataId).values,[d,h,f]=Gm(u,l,p,s.shape,s.dtype,c,o.shape),m=d.map(e=>n.makeTensorInfo([e.length],"int32",e)),g=n.makeTensorInfo(f,s.dtype,h);return m.concat([g])}};var Jm=oc;class Ym{constructor(e,t,n,r,a,s,o,i,u,l){var p;this.shape=e,this.shapeShape=t,this.values=n,this.valuesShape=r,this.valuesDType=a,this.defaultValue=s,this.defaultValueShape=o,this.rowPartitionValues=i,this.rowPartitionValuesShapes=u,this.rowPartitionTypes=function(e){const t={FIRST_DIM_SIZE:oc.FIRST_DIM_SIZE,VALUE_ROWIDS:oc.VALUE_ROWIDS,ROW_LENGTHS:oc.ROW_LENGTHS,ROW_SPLITS:oc.ROW_SPLITS,ROW_LIMITS:oc.ROW_LIMITS,ROW_STARTS:oc.ROW_STARTS},n=[];for(const r of e){if(!(r in t))break;n.push(t[r])}return n}(l),this.raggedRank=0===(p=this.rowPartitionTypes).length?0:p[0]===oc.FIRST_DIM_SIZE?p.length-1:p.length}getRowPartitionTypeByDimension(e){return this.rowPartitionTypes[0]===Jm.FIRST_DIM_SIZE?this.rowPartitionTypes[e+1]:this.rowPartitionTypes[e]}getRowPartitionTensor(e){return this.rowPartitionTypes[0]===Jm.FIRST_DIM_SIZE?this.rowPartitionValues[e+1]:this.rowPartitionValues[e]}getMaxWidth(e){const t=this.getRowPartitionTensor(e-1);switch(this.getRowPartitionTypeByDimension(e-1)){case Jm.VALUE_ROWIDS:return Ym.getMaxWidthValueRowID(t);case Jm.ROW_SPLITS:return Ym.getMaxWidthRowSplit(t);default:throw new Error(`Cannot handle partition type ${Jm[this.getRowPartitionTypeByDimension(e-1)]}`)}}static getMaxWidthRowSplit(e){const t=e.length;if(0===t||1===t)return 0;let n=0;for(let r=0;r<t-1;++r){const t=e[r+1]-e[r];t>n&&(n=t)}return n}static getMaxWidthValueRowID(e){const t=e.length;if(0===t)return 0;let n=0,r=e[0],a=0;for(let s=1;s<t;++s){const t=e[s];t!==r&&(r=t,a=Math.max(s-n,a),n=s)}return Math.max(t-n,a)}tensorShapeFromTensor(e,t,n=!0){if(0===t.length){if(-1===e[0])return[];throw new Error("The only valid scalar shape tensor is the fully unknown shape specified as -1.")}return Xm(e,n)}calculateOutputSize(e){const t=this.valuesShape;!function(e,t){if(null==e||null==t)return;const n=e.length,r=t.length;if(n>=r)throw new Error(`defaultValue.shape=${e} and ragged tensor flatValues.shape=${t}, are incompatible: defaultValue.rank = ${n} must be less than ragged tensor input flatValues.rank = ${r})`);for(let a=0;a<Math.min(n,r-1);++a){const n=e[a],r=t[a+1];if(n>=0&&r>=0&&1!==n&&n!==r)throw new Error(`defaultValue.shape=${e}, and ragged tensor input flatValues.shape=${t} are incompatible: defaultValue.shape[${a-e.length}] = ${n} but ragged tensor input.flatValues.shape[${a-e.length}] = ${r}`)}}(this.defaultValueShape,t);const n=this.tensorShapeFromTensor(this.shape,this.shapeShape),r=function(e,t,n){let r=new Array;if(null==n&&null==t)return r;if(null==t)for(;r.length<e+n.length;)r.push(-1);else r=t.slice();if(null==n)return r;if(e+n.length!==r.length)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.rank = ${e+n.length}, but shape.rank = ${r.length}`);for(let a=1;a<n.length;++a){const s=n[a],o=r[r.length-n.length+a],i=r[o];if(s>=0)if(i>=0){if(i!==s)throw new Error(`rt input.shape and shape=${t} are incompatible: rt input.shape[${a+e}] = ${s} but shape[${a+e}] = ${i}`)}else r[o]=s}return r}(this.raggedRank,n,t),a=r;a[0]<0&&(a[0]=e);for(let e=1;e<=this.raggedRank;++e)a[e]<0&&(a[e]=this.getMaxWidth(e));return a}calculateFirstParentOutputIndex(e,t,n){const r=Math.min(e,n),a=[];let s=0;for(let e=0;e<r;++e,s+=t)a.push(s);for(let t=r;t<e;++t)a.push(-1);return _(a.length===e,()=>"Final length of result must be equal to firstDimension."),a}calculateOutputIndexRowSplit(e,t,n,r){const a=e.length,s=[];for(let o=0;o<a-1;++o){const a=e[o+1]-e[o];let i=Math.min(r,a),u=t[o];-1===u&&(i=0);for(let e=0;e<i;++e)s.push(u),u+=n;for(let e=0;e<a-i;++e)s.push(-1)}if(a>0&&s.length!==e[a-1])throw new Error("Invalid row split size.");return s}calculateOutputIndexValueRowID(e,t,n,r){const a=e.length,s=[];if(0===a)return[];let o=0,i=e[0];if(i>=t.length)throw new Error(`Got currentValueRowId=${i}, which is not less than ${t.length}`);let u=t[i];s.push(u);for(let l=1;l<a;++l){const a=e[l];if(a===i)u>=0&&(++o,o<r?u+=n:u=-1);else{if(o=0,i=a,a>=t.length)throw new Error(`Got nextValueRowId=${a} which is not less than ${t.length}`);u=t[a]}s.push(u)}if(s.length!==e.length)throw new Error("Invalid row ids.");return s}calculateOutputIndex(e,t,n,r){const a=this.getRowPartitionTensor(e),s=this.getRowPartitionTypeByDimension(e);switch(s){case Jm.VALUE_ROWIDS:return this.calculateOutputIndexValueRowID(a,t,n,r);case Jm.ROW_SPLITS:if(a.length-1>t.length)throw new Error(`Row partition size is greater than output size: ${a.length-1} > ${t.length}`);return this.calculateOutputIndexRowSplit(a,t,n,r);default:throw new Error(`Unsupported partition type: ${Jm[s]}`)}}getFirstDimensionSize(){const e=this.rowPartitionValues[0];if(0===this.rowPartitionTypes.length)throw new Error("No row_partition_types given.");const t=this.rowPartitionTypes[0];switch(t){case Jm.FIRST_DIM_SIZE:return e[0];case Jm.VALUE_ROWIDS:throw new Error("Cannot handle VALUE_ROWIDS in first dimension.");case Jm.ROW_SPLITS:return this.rowPartitionValuesShapes[0][0]-1;default:throw new Error(`Cannot handle type ${Jm[t]}`)}}compute(){if(this.rowPartitionValues[0].length<=0)throw new Error("Invalid first partition input. Tensor requires at least one element.");const e=this.getFirstDimensionSize(),t=this.calculateOutputSize(e),n=new Array(this.raggedRank+1);n[n.length-1]=1;for(let e=n.length-2;e>=0;--e)n[e]=n[e+1]*t[e+1];const r=Xm(t,!1),a=L(this.valuesDType,D(r));if(n[0]*t[0]>0){let s=this.calculateFirstParentOutputIndex(e,n[0],t[0]);for(let e=1;e<=this.raggedRank;++e)s=this.calculateOutputIndex(e-1,s,n[e],t[e]);this.setOutput(this.raggedRank,s,a,r)}return[r,a]}setOutput(e,t,n,r){if(0===n.length)return;const a=this.values,s=n;let o=r.slice();o=o.slice(e+1);const i=D(o),u=t.length;let l=this.defaultValue;if(l.length!==i&&1!==l.length){const e=this.defaultValueShape;zl(()=>{const t=io(l,e),n=Io(t,o);l=n.dataSync()})}let p=0,c=0,d=0;for(let e=0;e<=u;++e){let r=e<u?t[e]:-1;if(r!==d){if(c<d){const e=a.subarray(p*i);Qm(s.subarray(c*i),e,(d-c)*i)}if(e>=u){const e=n.length;r=Math.floor(e/i)}if(r>d)if(1===this.defaultValue.length)s.subarray(d*i,r*i).fill(this.defaultValue[0]),d=r;else for(;r>d;)Qm(s.slice(d*i),l,i),++d;r<0?(p=e+1,c=d):(p=e,c=d,d=c+1)}else++d}}}function Qm(e,t,n){for(let r=0;r<n;r++)e[r]=t[r]}function Xm(e,t){const n=[];for(let r of e){if(r<0){if(!t)throw new Error(`Dimension ${r} must be >= 0`);if(r<-1)throw new Error(`Dimension ${r} must be >= -1`);r=-1}n.push(r)}return n}const eg={kernelName:Jt,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{shape:a,values:s,defaultValue:o,rowPartitionTensors:i}=t,{rowPartitionTypes:u}=r,l=n.data.get(a.dataId).values,p=n.data.get(s.dataId).values,c=n.data.get(o.dataId).values,d=i.map(e=>n.data.get(e.dataId).values),h=i.map(e=>e.shape),[f,m]=function(e,t,n,r,a,s,o,i,u,l){return new Ym(e,t,n,r,a,s,o,i,u,l).compute()}(l,a.shape,p,s.shape,s.dtype,c,o.shape,d,h,u);return n.makeTensorInfo(f,s.dtype,m)}},tg={kernelName:Yt,backendName:"cpu",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,dtype:s,step:o}=n,i=function(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return G(0,r);const a=G(Math.abs(Math.ceil((t-e)/n)),r);t<e&&1===n&&(n=-1),a[0]=e;for(let e=1;e<a.length;e++)a[e]=a[e-1]+n;return a}(r,a,o,s);return t.makeTensorInfo([i.length],s,i)}},ng=Mc(Xt,e=>1/e),rg={kernelName:Xt,backendName:"cpu",kernelFunc:ng},ag={kernelName:rn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r;Sc(a,"resizeBilinear");const u=U(a.shape),[l,p]=i,[c,d,h,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(D([c,l,p,f])),y=[s&&l>1?d-1:d,s&&p>1?h-1:h],b=[s&&l>1?l-1:l,s&&p>1?p-1:p];let k=0;const w=y[0]/b[0],N=y[1]/b[1];for(let e=0;e<c;e++)for(let t=0;t<l;t++){let n;n=o?w*(t+.5)-.5:w*t;const r=Math.max(0,Math.floor(n)),a=n-r,s=Math.min(d-1,Math.ceil(n)),i=e*u[0]+r*u[1],l=e*u[0]+s*u[1];for(let e=0;e<p;e++){let t;t=o?N*(e+.5)-.5:N*e;const n=Math.max(0,Math.floor(t)),r=t-n,s=Math.min(h-1,Math.ceil(t)),p=i+n*u[2],c=l+n*u[2],d=i+s*u[2],y=l+s*u[2];for(let e=0;e<f;e++){const t=m[p+e],n=m[c+e],s=t+(m[d+e]-t)*r,o=s+(n+(m[y+e]-n)*r-s)*a;g[k++]=o}}}return n.makeTensorInfo([c,l,p,f],"float32",g)}},sg={kernelName:"ResizeBilinearGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r;Sc([s,a],"resizeBilinearGrad");const i=U(a.shape),[u,l,p,c]=a.shape,[,d,h]=s.shape,f=new Float32Array(u*l*p*c),m=[o&&d>1?l-1:l,o&&h>1?p-1:p],g=[o&&d>1?d-1:d,o&&h>1?h-1:h],y=m[0]/g[0],b=m[1]/g[1],k=n.data.get(s.dataId).values;let w=0;for(let e=0;e<u;e++){const t=e*i[0];for(let e=0;e<d;e++){const n=e*y,r=Math.floor(n),a=Math.min(Math.ceil(n),l-1),s=t+r*i[1],o=t+a*i[1],u=n-r,d=1-u;for(let e=0;e<h;e++){const t=e*b,n=Math.floor(t),r=Math.min(Math.ceil(t),p-1),a=t-n,l=1-a,h=s+n*i[2],m=s+r*i[2],g=o+n*i[2],y=o+r*i[2],N=d*l,x=d*a,v=u*l,T=u*a;for(let e=0;e<c;e++){const t=k[w++];f[h+e]+=t*N,f[m+e]+=t*x,f[g+e]+=t*v,f[y+e]+=t*T}}}}return n.makeTensorInfo([u,p,l,c],"float32",f)}},og={kernelName:nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a}=t,{alignCorners:s,halfPixelCenters:o,size:i}=r;Sc(a,"resizeNearestNeighbor");const u=U(a.shape),[l,p]=i,[c,d,h,f]=a.shape,m=n.data.get(a.dataId).values,g=new Float32Array(c*l*p*f),y=[s&&l>1?d-1:d,s&&p>1?h-1:h],b=[s&&l>1?l-1:l,s&&p>1?p-1:p],k=y[0]/b[0],w=y[1]/b[1];let N=0;for(let e=0;e<c;e++){const t=e*u[0];for(let e=0;e<l;e++){const n=o?k*(e+.5):k*e;let r=Math.min(d-1,s?Math.round(n):Math.floor(n));o&&(r=Math.max(0,r));const a=t+r*u[1];for(let e=0;e<p;e++){const t=o?w*(e+.5):w*e;let n=Math.min(h-1,s?Math.round(t):Math.floor(t));o&&(n=Math.max(0,n));const r=a+n*u[2];for(let e=0;e<f;e++){const t=m[r+e];g[N++]=t}}}}return n.makeTensorInfo([c,l,p,f],a.dtype,g)}},ig={kernelName:"ResizeNearestNeighborGrad",backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r;Sc([s,a],"resizeNearestNeighborGrad");const i=U(a.shape),u=U(s.shape),[l,p,c,d]=a.shape,[,h,f]=s.shape,m=new Float32Array(l*p*c*d),g=n.data.get(s.dataId).values,y=[o&&h>1?p-1:p,o&&f>1?c-1:c],b=[o&&h>1?h-1:h,o&&f>1?f-1:f],k=y[0]/b[0],w=y[1]/b[1],N=1/k,x=1/w,v=2*Math.ceil(N)+2,T=2*Math.ceil(x)+2;for(let e=0;e<l;e++){const t=e*i[0];for(let e=0;e<p;e++){const n=t+e*i[1],r=Math.floor(e*N),a=Math.floor(r-v/2);for(let r=0;r<c;r++){const s=n+r*i[2],l=Math.floor(r*x),y=Math.floor(l-T/2);for(let n=0;n<d;n++){let i=0;for(let s=0;s<v;s++){const l=s+a;if(l<0||l>=h)continue;const d=t+l*u[1],m=l*k;if(e===Math.min(p-1,o?Math.round(m):Math.floor(m)))for(let e=0;e<T;e++){const t=e+y;if(t<0||t>=f)continue;const a=d+t*u[2],s=t*w;r===Math.min(c-1,o?Math.round(s):Math.floor(s))&&(i+=g[a+n])}}m[s+n]=i}}}}return n.makeTensorInfo(a.shape,a.dtype,m)}},ug={kernelName:sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{dims:s}=r;Sc(a,"reverse");const o=a.shape.length,i=C(s,a.shape);if(0===o)return Fc({inputs:{x:a},backend:n});const u=new $r(a.shape,a.dtype),l=n.bufferSync(a);for(let e=0;e<u.size;e++){const t=u.indexToLoc(e),n=t.slice();i.forEach(e=>n[e]=a.shape[e]-1-n[e]),u.set(l.get(...n),...t)}return n.makeTensorInfo(u.shape,u.dtype,u.values)}},lg={kernelName:qn,backendName:"cpu",kernelFunc:({inputs:e,attrs:t,backend:n})=>{const{image:r}=e,{radians:a,fillValue:s,center:o}=t,i=n,u=z(r.dtype,D(r.shape)),[l,p,c,d]=r.shape,[h,f]=function(e,t,n){return[n*("number"==typeof e?e:e[0]),t*("number"==typeof e?e:e[1])]}(o,p,c),m=Math.sin(a),g=Math.cos(a),y=i.data.get(r.dataId).values;for(let e=0;e<l;e++){const t=e*c*p*d;for(let e=0;e<p;e++){const n=e*(c*d);for(let r=0;r<c;r++){const a=r*d;for(let o=0;o<d;o++){const i=[l,e,r,o],b=i[2],k=i[1];let w=(b-h)*g-(k-f)*m,N=(b-h)*m+(k-f)*g;w=Math.round(w+h),N=Math.round(N+f);let x=s;"number"!=typeof s&&(x=3===o?255:s[o]),w>=0&&w<c&&N>=0&&N<p&&(x=y[t+N*(c*d)+w*d+o]),u[t+n+a+o]=x}}}}return{dataId:i.write(u,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},pg=Mc(on,e=>{const t=Math.floor(e);return e-t<.5?Math.floor(e):e-t>.5?Math.ceil(e):t%2==0?t:t+1}),cg={kernelName:on,backendName:"cpu",kernelFunc:pg},dg=qc(e=>1/Math.sqrt(e)),hg=$c(un,dg),fg={kernelName:un,backendName:"cpu",kernelFunc:hg};function mg(e,t,n,r,a,s,o,i,u,l){const p=[r/a,a],c=e.values,d=t.values;if(0===r)return os(n,t.dtype);const h=os(p,t.dtype);"string"==typeof u||"number"==typeof u?h.values.fill(u):"boolean"==typeof u&&h.values.fill(+u);for(let e=0;e<s;e++){const s=[];let u=0;for(let t=0;t<o;t++){const n=c[e*o+t];s.push(n),u+=n*i[t]}if(u<0||u>=r/a)throw new Error(`Invalid indices: ${s} does not index into ${n}`);for(let n=0;n<a;n++)l?h.values[u*a+n]+=d[e*a+n]:h.values[u*a+n]=0===t.rank?d[0]:d[e*a+n]}return h}const gg={kernelName:ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:a,updates:s}=t,{shape:o}=r,{sliceRank:i,numUpdates:u,sliceSize:l,strides:p,outputSize:c}=Wl(0,a,o),d=mg(n.bufferSync(a),n.bufferSync(s),o,c,l,u,i,p,0,!0);return n.makeTensorInfo(o,d.dtype,d.values)}};function yg(e,t){let n=0,r=e.length,a=0;for(;n<r;)a=Math.floor((n+r)/2),e[a]<t?n=a+1:r=a;return r}function bg(e,t){let n=0,r=e.length,a=0;for(;n<r;)a=Math.floor((n+r)/2),e[a]<=t?n=a+1:r=a;return r}const kg={kernelName:pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:s}=t,{side:o}=r,i=function(e,t,n,r,a,s){const o=L("int32",n*a);for(let i=0;i<n;++i){const n=e.slice(i*r,(i+1)*r),u=i*a;for(let e=0;e<a;++e)o[u+e]="left"===s?yg(n,t[e+u]):bg(n,t[e+u])}return o}(n.data.get(a.dataId).values,n.data.get(s.dataId).values,a.shape[0],a.shape[1],s.shape[1],o);return n.makeTensorInfo(s.shape,"int32",i)}},wg={kernelName:cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:a,e:s}=t;Sc([r,a,s],"select");const o=r.shape.length,i=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,p=Wr(a.dtype,s.dtype),c=G(D(a.shape),p);let d=0;const h=0===o||o>1||1===a.shape.length?1:D(a.shape.slice(1));for(let e=0;e<i.length;e++)for(let t=0;t<h;t++)1===i[e]?c[d++]=u[e]:c[d++]=l[e];return n.makeTensorInfo(a.shape,p,c)}},Ng=Mc(dn,e=>e>=0?1.0507009873554805*e:1.7580993408473768*(Math.exp(e)-1)),xg={kernelName:dn,backendName:"cpu",kernelFunc:Ng},vg=Mc(gn,e=>e<0?-1:e>0?1:0),Tg={kernelName:gn,backendName:"cpu",kernelFunc:vg},Ig=Mc(fn,e=>Math.sin(e)),Sg={kernelName:fn,backendName:"cpu",kernelFunc:Ig},Eg=Mc(mn,e=>Math.sinh(e)),_g={kernelName:mn,backendName:"cpu",kernelFunc:Eg},Mg=Math.log(1.1920928955078125e-7)+2,$g=Mc(bn,e=>{const t=e>-Mg,n=e<Mg,r=Math.exp(e);let a;return a=n?r:t?e:Math.log(1+r),a}),Ag={kernelName:bn,backendName:"cpu",kernelFunc:$g},Dg={kernelName:wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockShape:s,paddings:o}=r;Sc([a],"spaceToBatchND");const i=D(s),u=[[0,0]];u.push(...o);for(let e=1+s.length;e<a.shape.length;++e)u.push([0,0]);const l=Wm.kernelFunc({inputs:{x:a},backend:n,attrs:{paddings:u,constantValue:0}}),p=ic(l.shape,s,i,!1),c=uc(p.length,s.length,!1),d=lc(l.shape,s,i,!1),h=ud({inputs:{x:l},backend:n,attrs:{shape:p}}),f=wd({inputs:{x:h},backend:n,attrs:{perm:c}}),m=ud({inputs:{x:f},backend:n,attrs:{shape:d}});return n.disposeIntermediateTensorInfo(l),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}},Fg={kernelName:vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n        ${s.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n        ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.data.get(r.dataId).values,u=n.data.get(a.dataId).values,l=n.data.get(s.dataId).values,p=n.data.get(o.dataId).values[0],[c,d,h,f,m]=function(e,t,n,r,a,s,o){const i=t[0],u=s[0],l=new Array(u),p=new Array(i),c=t[1];if(0===u){if(0!==i)throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${i}`);return[L(n,0),[0,c],L(a,0),l,p]}let d=!0,h=0;const f=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*c];if(n<0)throw new Error(bc(t,n));if(n>=u)throw new Error(kc(t,n,u));++f[n],d=d&&n>=h,h=n}let m=!0;for(let e=0;e<u;++e){const t=0===f[e];l[e]=t,m=m&&!t,f[e]=Math.max(f[e],1),e>0&&(f[e]+=f[e-1])}if(m&&d){const t=e,n=r;for(let e=0;e<i;++e)p[e]=e;return[t,[i,c],n,l,p]}{const t=f[u-1],s=L(n,t*c),d=L(a,t),h=new Array(u).fill(0);for(let t=0;t<i;++t){const n=e[t*c],a=h[n],o=(0===n?0:f[n-1])+a;h[n]++;for(let n=0;n<c;++n)s[o*c+n]=e[t*c+n];d[o]=r[t],p[t]=o}for(let e=0;e<u;++e)if(0===h[e]){const t=0===e?0:f[e-1];s[t*c+0]=e;for(let e=1;e<c;++e)s[t*c+e]=0;d[t]=o}return[s,[t,c],d,l,p]}}(i,r.shape,r.dtype,u,a.dtype,l,p);return[n.makeTensorInfo(d,r.dtype,c),n.makeTensorInfo([d[0]],a.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map(e=>Number(e)))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const Og={kernelName:Tn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape\n        ${r.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape\n        ${a.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.data.get(a.dataId).values),i=n.data.get(r.dataId).values,u=Array.from(n.data.get(s.dataId).values),[l,p,c]=function(e,t,n,r,a){const s=D(r),o=t[0],i=a.length,u=[];let l=1,p=-1;for(let e=0;e<i;++e){const t=a[e];if(-1===t){if(-1!==p)throw new Error(wc(p,e));p=e,u.push(1)}else{if(t<0)throw new Error(Nc(e,t));l*=t,u.push(t)}}if(-1!==p){if(l<=0)throw new Error("reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero");const e=Math.trunc(s/l);if(l*e!==s)throw new Error(function(e,t){return`Input to reshape is a SparseTensor with ${D(e)}\n  dense values, but the requested shape requires a multiple of ${D(t)}. inputShape=${e} outputShape= ${t}`}(r,u));u[p]=e}if(D(u)!==s)throw new Error(function(e,t){return`Input to reshape is a tensor with ${D(e)} dense values, but the requested shape has ${D(t)}. inputShape=${e} outputShape=${t}`}(r,u));const c=r.length,d=[];if(c>0){d[c-1]=1;for(let e=c-2;e>=0;--e)d[e]=d[e+1]*r[e+1]}const h=[];if(i>0){h[i-1]=1;for(let e=i-2;e>=0;--e)h[e]=h[e+1]*u[e+1]}const f=L(n,o*i);for(let t=0;t<o;++t){let n=0;for(let r=0;r<c;++r)n+=e[t*c+r]*d[r];for(let e=0;e<i;++e)f[t*i+e]=Math.trunc(n/h[e]),n%=h[e]}return[f,[o,i],u]}(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(p,r.dtype,l),n.makeTensorInfo([c.length],s.dtype,new Int32Array(c))]}};function Rg(e,t,n,r,a,s=!1,o=0){const i=r.length,u=[t[0],e.length/t[0]],l=u[1],p=i>0?a[i-1]+1:0;if(p<0)throw new Error("segment ids must be >= 0");const c=t.slice();c[0]=p;const d=L(n,c.reduce((e,t)=>e*t,1));if(0===i)return p>0&&d.fill(o),[d,c];if(p<=0)throw new Error("segment ids must be >= 0");let h=0,f=1,m=0,g=a[h];for(;;){let t=0;if(f<i){if(t=a[f],g===t){++f;continue}if(g>=t)throw new Error(xc())}if(g<0||g>=p)throw new Error(vc(g,p));g>m&&d.fill(o,m*l,g*l);for(let t=h;t<f;++t){const n=r[t];if(n<0||n>=u[0])throw new Error(Tc(t,r[t],u[0]));for(let t=0;t<l;t++)d[g*l+t]+=e[n*l+t]}if(s)for(let e=0;e<l;e++)d[g*l+e]/=f-h;if(h=f,++f,m=g+1,g=t,f>i)break}return m<p&&d.fill(o,m*l,p*l),[d,c]}const Cg={kernelName:In,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n          ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n          ${s.shape}`);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,[l,p]=Rg(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(p,r.dtype,l)}},zg={kernelName:Sn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n         ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n         ${s.shape}`);if(a.shape[0]!==s.shape[0])throw new Error("segmentIds and indices should have same size.");const o=n.data.get(r.dataId).values,i=n.data.get(a.dataId).values,u=n.data.get(s.dataId).values,[l,p]=Rg(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(p,r.dtype,l)}},Lg={kernelName:En,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:a,sparseValues:s,defaultValue:o}=t,{outputShape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:p,strides:c,outputSize:d}=Wl(0,a,i),h=!1,f=n.bufferSync(a);let m;switch(s.dtype){case"bool":m=mg(f,n.bufferSync(s),i,d,p,l,u,c,Boolean(n.data.get(o.dataId).values[0]),h);break;case"float32":case"int32":m=mg(f,n.bufferSync(s),i,d,p,l,u,c,n.data.get(o.dataId).values[0],h);break;case"string":m=mg(f,n.bufferSync(s),i,d,p,l,u,c,Nr(n.data.get(o.dataId).values[0]),h);break;default:throw new Error(`Unsupported type ${s.dtype}`)}return n.makeTensorInfo(i,m.dtype,m.values)}},Bg={kernelName:Nn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{numOrSizeSplits:s,axis:o}=r,i=C(o,a.shape)[0],u=function(e,t,n=0){let r=[];if("number"==typeof t)_(e.shape[n]%t===0,()=>"Number of splits must evenly divide the axis."),r=new Array(t).fill(e.shape[n]/t);else{_(t.reduce((e,t)=>(-1===t&&(e+=1),e),0)<=1,()=>"There should be only one negative value in split array.");const a=t.indexOf(-1);if(-1!==a){const r=t.reduce((e,t)=>t>0?e+t:e);t[a]=e.shape[n]-r}_(e.shape[n]===t.reduce((e,t)=>e+t),()=>"The sum of sizes must match the size of the axis dimension."),r=t}return r}(a,s,i),l=new Array(a.shape.length).fill(0),p=a.shape.slice();return u.map(e=>{const t=[...p];t[i]=e;const r=qd({inputs:{x:a},backend:n,attrs:{begin:l,size:t}});return l[i]+=e,r})}},Pg=(qc(e=>Math.sqrt(e)),Mc(kn,e=>Math.sqrt(e))),Vg={kernelName:kn,backendName:"cpu",kernelFunc:Pg},Wg={kernelName:"Square",backendName:"cpu",kernelFunc:({inputs:e,backend:t})=>{const{x:n}=e,r=t;Sc(n,"square");const a=r.data.get(n.dataId).values,s=new Float32Array(a.length);for(let e=0;e<a.length;++e){const t=a[e];s[e]=t*t}return{dataId:r.write(s,n.shape,n.dtype),shape:n.shape,dtype:n.dtype}}},Hg=zc((e,t)=>{const n=e-t;return n*n}),Ug=nd(_n,Hg),qg={kernelName:_n,backendName:"cpu",kernelFunc:Ug},Kg=Mc(Un,(e,t)=>{const n=t;return isNaN(e)?NaN:e>0?1:n.alpha}),jg={kernelName:Un,backendName:"cpu",kernelFunc:Kg},Gg={kernelName:Mn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{begin:s,end:o,strides:i,beginMask:u,endMask:l,ellipsisMask:p,newAxisMask:c,shrinkAxisMask:d}=r;Sc(a,"stridedSlice");const{finalShapeSparse:h,finalShape:f,isIdentity:m,sliceDim0:g,isSimpleSlice:y,begin:b,end:k,strides:w}=function(e,t,n,r,a,s,o,i,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&o&o-1)throw new Error("Multiple ellipses in slice is not allowed.");let p=!1;const c={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let e=0;e<c.dims;e++)p&&1<<e&i&&c.numAddAxisAfterEllipsis++,1<<e&o&&(p=!0);p||(c.ellipsisMask|=1<<c.dims,c.dims++);const d={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(c,d);let h=!0,f=!0,m=!0;const g=[],y=[];for(let t=0;t<e.length;++t){if(0===d.strides[t])throw Error(`strides[${t}] must be non-zero`);const n=!!(d.shrinkAxisMask&1<<t),r=e[t];if(-1===r){g.push(n?1:-1);continue}const a=[d.beginMask&1<<t,d.endMask&1<<t],s=[d.strides[t]>0?0:-1,d.strides[t]>0?r:r-1];if(n&&d.strides[t]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===d.strides[t];const o=!!(d.beginMask&1<<t&&d.endMask&1<<t);if(d.beginValid&&d.endValid){if(n){const e=d.begin[t]<0?r+d.begin[t]:d.begin[t];if(d.begin[t]=e,d.end[t]=d.begin[t]+1,e<0||e>=r)throw Error(`slice index ${d.begin[t]} of dimension ${t} out of bounds.`)}else d.begin[t]=Ds(d.begin[t],0,d.strides[t],r,a,s),d.end[t]=Ds(d.end[t],1,d.strides[t],r,a,s);const e=1===d.strides[t]&&0===d.begin[t]&&d.end[t]===r;h=h&&e,f=f&&(0===t&&1===d.strides[t]||e)}else h=h&&1===d.strides[t]&&o,f=f&&(0===t&&1===d.strides[t]||o);let i,u=!1;if(d.beginValid&&d.endValid?(i=d.end[t]-d.begin[t],u=!0):n?(i=1,u=!0):o&&r>=0&&(i=d.strides[t]<0?-r:r,u=!0),u){let e;e=0===i||i<0!=d.strides[t]<0?0:Math.trunc(i/d.strides[t])+(i%d.strides[t]!==0?1:0),g.push(e)}else g.push(-1)}for(let e=0;e<d.finalShapeGatherIndices.length;++e){const t=d.finalShapeGatherIndices[e];t>=0?y.push(g[t]):-2===t&&y.push(1)}return{finalShapeSparse:y.filter((e,t)=>-2!==d.finalShapeGatherIndices[t]),finalShape:y,isIdentity:h,sliceDim0:f,isSimpleSlice:m,begin:d.begin,end:d.end,strides:d.strides}}(a.shape,s,o,i,u,l,p,c,d);let N;if(m)N=ud({inputs:{x:a},backend:n,attrs:{shape:f}});else if(g||y){_(a.shape.length>=1,()=>`Input must have rank at least 1, got: ${a.shape.length}`);const e=function(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}(b,k,w),t=qd({inputs:{x:a},backend:n,attrs:{begin:b,size:e}});N=ud({inputs:{x:t},backend:n,attrs:{shape:f}}),n.disposeIntermediateTensorInfo(t)}else{const e=function(e,t,n,r){const a=os(e,t.dtype);for(let e=0;e<a.size;e++){const s=a.indexToLoc(e),o=new Array(s.length);for(let e=0;e<o.length;e++)o[e]=s[e]*n[e]+r[e];a.set(t.get(...o),...s)}return a}(h,n.bufferSync(a),w,b);N=n.makeTensorInfo(f,e.dtype,e.values)}return N}};class Zg{constructor(e,t,n,r,a,s){this.separator=wr(e),this.nGramWidths=t,this.leftPad=wr(n),this.rightPad=wr(r),this.padWidth=a,this.preserveShort=s}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let o=0;o<a;++o){const i=this.getPadWidth(s),u=Math.max(0,i-o),l=Math.max(0,i-(a-(o+1))),p=s-(u+l),c=t+(u>0?0:o-i);let d=0;d+=u*this.leftPad.length;for(let t=0;t<p;++t)d+=e[c+t].length;d+=l*this.rightPad.length,d+=(u+l+p-1)*this.separator.length,n[r+o]=new Uint8Array(d);const h=n[r+o];let f=0;const m=e=>e.forEach(e=>h[f++]=e);for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<p-1;++t)m(e[c+t]),m(this.separator);if(p>0){m(e[c+p-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<r;++a){let r=t[a]>=e;if(r=r&&t[a]<=n,!r)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const a=r-1,s=L("int32",r);if(0===n||0===r){const e=new Array(n);for(let e=0;e<=a;++e)s[e]=0;return[e,s]}s[0]=0;for(let e=1;e<=a;++e){const n=t[e]-t[e-1];let r=0;this.nGramWidths.forEach(e=>{r+=this.getNumNGrams(n,e)}),this.preserveShort&&n>0&&0===r&&(r=1),s[e]=s[e-1]+r}const o=new Array(s[a]);for(let n=0;n<a;++n){const r=t[n];let a=s[n];if(this.nGramWidths.forEach(s=>{const i=t[n+1]-t[n],u=this.getNumNGrams(i,s);this.createNGrams(e,r,o,a,u,s),a+=u}),this.preserveShort&&a===s[n]){const s=t[n+1]-t[n];if(0===s)continue;const i=s+2*this.padWidth,u=1;this.createNGrams(e,r,o,a,u,i)}}return[o,s]}}const Jg={kernelName:$n,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:p,dataSplits:c}=t,d=n.data.get(p.dataId).values,h=n.data.get(c.dataId).values,[f,m]=function(e,t,n,r,a,s,o,i){return new Zg(n,r,a,s,o,i).compute(e,t)}(d,h,a,s,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(c.shape,"int32",m)]}};function Yg(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let s=e.indexOf(a);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}return void(n&&0===e.length||r.push(e))}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}const Qg={kernelName:An,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.data.get(s.dataId).values,u=n.data.get(o.dataId).values[0],[l,p,c]=function(e,t,n){const r=e.length,a=[];let s=0,o=0;const i=new Array(r);for(let u=0;u<r;++u){const r=a.length;Yg(e[u],t,n,a);const l=a.length-r;i[u]=l,s+=l,o=Math.max(o,l)}const u=L("int32",2*s),l=new Array(s),p=[r,o];let c=0;for(let e=0;e<r;++e)for(let t=0;t<i[e];++t)u[2*c]=e,u[2*c+1]=t,l[c]=a[c],++c;return[u,l,p]}(i,u,a),d=p.length;return[n.makeTensorInfo([d,2],"int32",l),n.makeTensorInfo([d],"string",p),n.makeTensorInfo([2],"int32",new Int32Array(c))]}},Xg={kernelName:Dn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=function(e,t){const n=L("int32",e.length);for(let r=0;r<e.length;++r)n[r]=gr(e[r]).modulo(t).getLowBitsUnsigned();return n}(n.data.get(s.dataId).values,a);return n.makeTensorInfo(s.shape,"int32",o)}},ey=Mc(On,e=>Math.tan(e)),ty={kernelName:On,backendName:"cpu",kernelFunc:ey},ny=Mc(Rn,e=>Math.tanh(e)),ry=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function ay(e,t,n=0,r=e.length-1){for(;r>n;){if(r-n>600){const a=r-n+1,s=t-n+1,o=Math.log(a),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(a-i)/a)*Math.sign(s-a/2);ay(e,t,Math.max(n,Math.floor(t-s*i/a+u)),Math.min(r,Math.floor(t+(a-s)*i/a+u)))}const a=e[t];let s=n,o=r;for(E(e,n,t),ry(e[r],a)>0&&E(e,n,r);s<o;){for(E(e,s,o),s++,o--;ry(e[s],a)<0;)s+=1;for(;ry(e[o],a)>0;)o-=1}0===ry(e[n],a)?E(e,n,o):(o+=1,E(e,o,r)),o<=t&&(n=o+1),t<=o&&(r=o-1)}}const sy={kernelName:Ln,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{image:a,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=n,[p,c,d,h]=a.shape,[f,m]=null!=l?l:[c,d],g=[p,f,m,h],y=U(a.shape),b=y[0],k=y[1],w=y[2],N=U(g),x=N[0],v=N[1],T=N[2],I=z(a.dtype,D(g));I.fill(u);const S=r.data.get(a.dataId).values,E=r.data.get(s.dataId).values;for(let e=0;e<p;++e){const t=1===s.shape[0]?E:E.subarray(8*e,8*e+8);for(let n=0;n<f;++n)for(let r=0;r<m;++r)for(let a=0;a<h;++a){let s;const l=t[6]*r+t[7]*n+1;if(0===l)continue;const p=(t[0]*r+t[1]*n+t[2])/l,h=(t[3]*r+t[4]*n+t[5])/l,f=oy(p,d,i),m=oy(h,c,i);switch(o){case"nearest":s=uy(S,c,d,b,k,w,e,m,f,a,u);break;case"bilinear":s=ly(S,c,d,b,k,w,e,m,f,a,u);break;default:throw new Error(`Error in Transform: Expect 'nearest' or 'bilinear', but got ${o}`)}I[e*x+n*v+r*T+a]=s}return r.makeTensorInfo(g,a.dtype,I)}return{dataId:r.write(I,g,a.dtype),shape:a.shape,dtype:a.dtype}}};function oy(e,t,n){switch(n){case"reflect":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=2*t;n<e&&(n=e*Math.trunc(-n/e)+n),n=n<-t?n+e:-n-1}else if(n>t-1)if(t<=1)n=0;else{const e=2*t;n-=e*Math.trunc(n/e),n>=t&&(n=e-n-1)}return S(0,n,t-1)}(e,t);case"wrap":return function(e,t){let n=e;if(n<0)if(t<=1)n=0;else{const e=t-1;n+=t*(Math.trunc(-n/e)+1)}else if(n>t-1)if(t<=1)n=0;else{const e=t-1;n-=t*Math.trunc(n/e)}return S(0,n,t-1)}(e,t);case"nearest":return function(e,t){return S(0,e,t-1)}(e,t);default:return e}}function iy(e,t,n,r,a,s,o,i,u,l,p){return 0<=i&&i<t&&0<=u&&u<n?e[o*r+i*a+u*s+l]:p}function uy(e,t,n,r,a,s,o,i,u,l,p){return iy(e,t,n,r,a,s,o,Math.round(i),Math.round(u),l,p)}function ly(e,t,n,r,a,s,o,i,u,l,p){const c=Math.floor(i),d=Math.floor(u),h=c+1,f=d+1;return(h-i)*((f-u)*iy(e,t,n,r,a,s,o,c,d,l,p)+(u-d)*iy(e,t,n,r,a,s,o,c,f,l,p))+(i-c)*((f-u)*iy(e,t,n,r,a,s,o,h,d,l,p)+(u-d)*iy(e,t,n,r,a,s,o,h,f,l,p))}const py={kernelName:Wn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,segmentIds:s}=t,{numSegments:o}=r;Sc(a,"unsortedSegmentSum");const i=[],u=[],l=a.shape.length-s.shape.length;let p=s;for(let e=0;e<l;++e){const t=jh({inputs:{input:p},backend:n,attrs:{dim:e+1}});p=t,u.push(t)}for(let e=0;e<o;++e){const t=yr(e,"int32"),r=n.makeTensorInfo([],"int32",t),s=Ph({inputs:{a:r,b:p},backend:n}),o=ed({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),l=Fh({inputs:{a:o,b:a},backend:n}),c=Rh({inputs:{x:l},backend:n,attrs:{axis:0,keepDims:!1}});i.push(c),u.push(r),u.push(s),u.push(o),u.push(l),u.push(c)}const c=Pm({inputs:i,backend:n,attrs:{axis:0}});return u.forEach(e=>n.disposeIntermediateTensorInfo(e)),c}},cy=[dd,hd,md,yd,id,bd,xd,vd,Td,Id,Ed,Md,Ad,Od,Cd,Pd,Vd,Wd,Hd,cd,Ud,jd,Zd,Jd,td,Xd,th,Jc,nh,oh,uh,lh,ph,ch,dh,hh,mh,yh,bh,kh,wh,Nh,xh,Th,Ih,Sh,Eh,_h,Mh,$h,zh,Dc,Lh,Vh,Hh,Kh,Gh,Yh,lf,cf,df,mf,bf,kf,wf,Nf,xf,If,_f,Oc,Mf,ah,Af,Ff,Rf,Cc,Lf,Vf,Wf,qf,jf,Jf,Qf,tm,nm,rm,sm,um,lm,pm,cm,dm,hm,fm,mm,bm,km,xm,Im,Oh,Sm,_m,$m,Dm,Rm,Cm,Bm,Vm,Wm,qm,Pc,Km,Zm,eg,tg,Xc,ef,rg,Wc,Uc,ld,ag,sg,og,ig,ug,lg,cg,fg,gg,kg,wg,xg,jc,Tg,Sg,_g,Kd,Tm,Ag,Dg,Fg,Og,Cg,zg,Lg,Bg,Vg,Wg,qg,jg,Gg,Jg,Qg,Xg,af,Ch,ty,{kernelName:Rn,backendName:"cpu",kernelFunc:ny},{kernelName:Cn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{reps:s}=r;Sc(a,"tile");const o=function(e,t){const n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=e.shape[r]*t[r];const r=os(n,e.dtype);for(let t=0;t<r.values.length;++t){const n=r.indexToLoc(t),a=new Array(e.rank);for(let t=0;t<a.length;t++)a[t]=n[t]%e.shape[t];const s=e.locToIndex(a);r.values[t]=e.values[s]}return r}(n.bufferSync(a),s);return n.makeTensorInfo(o.shape,o.dtype,o.values)}},{kernelName:zn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{k:s,sorted:o}=r;Sc(a,"topk");const i=n.data.get(a.dataId).values,[u,l]=function(e,t,n,r,a){const s=t[t.length-1],[o,i]=[e.length/s,s],u=z(n,o*r),l=z("int32",o*r);for(let t=0;t<o;t++){const n=t*i,s=e.subarray(n,n+i);let o=new Array(s.length);s.forEach((e,t)=>o[t]={value:e,index:t}),r<o.length&&(ay(o,r),o=o.slice(0,r)),a&&o.sort(ry);const p=t*r,c=u.subarray(p,p+r),d=l.subarray(p,p+r);for(let e=0;e<r;e++)c[e]=o[e].value,d[e]=o[e].index}const p=t.slice();return p[p.length-1]=r,[os(p,n,u),os(p,"int32",l)]}(i,a.shape,a.dtype,s,o);return[n.makeTensorInfo(u.shape,u.dtype,u.values),n.makeTensorInfo(l.shape,l.dtype,l.values)]}},sy,Nd,{kernelName:Pn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;Sc(s,"unique");const o=r.data.get(s.dataId).values,{outputValues:i,outputShape:u,indices:l}=function(e,t,n,r){const a=C(t,n)[0],s=[1,n[0],1];for(let e=0;e<a;e++)s[0]*=n[e];s[1]=n[a];for(let e=a+1;e<n.length;e++)s[2]*=n[e];const o={},i=new Int32Array(n[a]),u=new $r(s,r,e),l=[],p=1===s[0]&&1===s[2];for(let t=0;t<n[a];t++){let n;if(p)n=e[t].toString();else{const e=[];for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)e.push(u.get(n,t,r));n=e.join(",")}if(void 0!==o[n])i[t]=o[n];else{const e=Object.keys(o).length;o[n]=e,i[t]=e,l.push(t)}}const c=s.slice();c[1]=Object.keys(o).length;const d=new $r(c,r);l.forEach((e,t)=>{for(let n=0;n<s[0];n++)for(let r=0;r<s[2];r++)d.set(u.get(n,e,r),n,t,r)});const h=n.slice();return h[a]=c[1],{outputValues:d.values,outputShape:h,indices:i}}(o,a,s.shape,s.dtype);return[r.makeTensorInfo(u,s.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}},{kernelName:Vn,backendName:"cpu",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a.shape.length,i=a.shape[s],u=new Array(o-1);let l=0;for(let e=0;e<o;e++)e!==s&&(u[l++]=a.shape[e]);const p=new Array(o).fill(0),c=a.shape.slice();c[s]=1;const d=new Array(i);for(let e=0;e<d.length;e++){p[s]=e;const t=qd({inputs:{x:a},backend:n,attrs:{begin:p,size:c}});d[e]=ud({inputs:{x:t},backend:n,attrs:{shape:u}}),n.disposeIntermediateTensorInfo(t)}return d}},py,Lm];for(const e of cy)tr(e);var dy,hy;re().registerFlag("KEEP_INTERMEDIATE_TENSORS",()=>!1,e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")}),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(dy||(dy={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(hy||(hy={}));const fy={};function my(e){return fy[e]}function gy(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return yy(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type)return t.inputNames.slice(e,o).map(e=>yy(e,n,r,a));const i=yy(t.inputNames.slice(e)[0],n,r,a),u=i.dataSync();return"number"===s.type?u[0]:K(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function yy(e,t,n,r){const[a,s]=wy(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find(e=>!!t[ky(a,e)]);return void 0!==o?t[ky(a,o)][s]:void 0}function by(e,t){const[n,r,a]=wy(e);return[ky(n,t&&t.currentContextId),r,a]}function ky(e,t){return t?`${e}-${t}`:e}function wy(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function Ny(e,t,n){let r=gy("pad",e,t,n);if("explicit"===r){r=gy("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function xy(e){return e.kept?e:us(e)}const vy=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Ty=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Iy=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],Sy=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],Ey=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],_y=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],My=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],$y=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],Ay=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],Dy=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],Fy=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],Oy=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],Ry=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],Cy=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],zy=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Ly=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],By=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Py=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],Vy=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class Wy{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,a,s,o,i,u,l,p,c,d,h,f,m,g,y,b,k,w,N].map(e=>e.json));this.opMappers=e.reduce((e,t)=>(e[t.tfOpName]=t,e),{})}transformGraph(e,t={}){const n=e.node,r=[],a=[],s=[],o=n.reduce((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e),{});let i=[];const u=[];let l={},p={};null!=t&&(l=this.mapSignatureEntries(t.inputs),p=this.mapSignatureEntries(t.outputs));const c=Object.keys(o);c.forEach(e=>{const t=o[e];t.inputNames.forEach((e,n)=>{const[r,,a]=by(e),s=o[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)})}),0===Object.keys(p).length?c.forEach(e=>{const t=o[e];0===t.children.length&&u.push(t)}):Object.keys(p).forEach(e=>{const[t]=by(e),n=o[t];null!=n&&(n.signatureKey=p[e],u.push(n))}),Object.keys(l).length>0?Object.keys(l).forEach(e=>{const[t]=by(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))}):i=r;let d={};null!=e.library&&null!=e.library.function&&(d=e.library.function.reduce((e,t)=>(e[t.signature.name]=this.mapFunction(t),e),{}));const h={nodes:o,inputs:i,outputs:u,weights:a,placeholders:r,signature:t,functions:d};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce((t,n)=>(t[e[n].name]=n,t),{})}mapNode(e){const t=my(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map(e=>e.startsWith("^")?e.slice(1):e),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce((t,n)=>{const r=n.type;let a;switch(n.type){case"string":a=Uy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Uy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=eb(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=eb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=Ky(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=Ky(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=Xy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Xy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=qy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=qy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=nb(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=nb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=Qy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Qy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=tb(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=tb(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=Zy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Zy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=Jy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Jy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=Gy(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=Gy(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t},{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e),{}));const a=[],s=[];e.signature.inputArg.forEach(e=>{const[t]=by(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:jy(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n}),Object.keys(r).forEach(e=>{const t=r[e];t.inputNames.forEach((e,n)=>{const[a,,s]=by(e),o=r[a];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)})});const o=e.ret;e.signature.outputArg.forEach(e=>{const[t,n]=by(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))});const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e),{}),outputs:e.signature.outputArg.reduce((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function Hy(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=re().global;if(void 0!==t.atob)return t.atob(e);if("undefined"!=typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function Uy(e,t,n,r=!1){const a=e[t];return null!=a?Hy(a.s,r):n}function qy(e,t,n){const r=e[t];return r?r.b:n}function Ky(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"==typeof a?a:parseInt(a,10)}function jy(e){switch("string"==typeof e&&(e=dy[e]),e){case dy.DT_FLOAT:case dy.DT_HALF:return"float32";case dy.DT_INT32:case dy.DT_INT64:case dy.DT_INT8:case dy.DT_UINT8:return"int32";case dy.DT_BOOL:return"bool";case dy.DT_DOUBLE:return"float32";case dy.DT_STRING:return"string";default:return null}}function Gy(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function Zy(e,t,n){const r=e[t];return r&&r.type?jy(r.type):n}function Jy(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map(e=>jy(e)):n}function Yy(e){if(!e.unknownRank)return null!=e.dim?e.dim.map(e=>"number"==typeof e.size?e.size:parseInt(e.size,10)):[]}function Qy(e,t,n){const r=e[t];return r&&r.shape?Yy(r.shape):n}function Xy(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map(e=>"number"==typeof e?e:parseInt(e,10)):n}function eb(e,t,n,r=!1){const a=e[t];return a&&a.list&&a.list.s?a.list.s.map(e=>Hy(e,r)):n}function tb(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map(e=>Yy(e)):n}function nb(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class rb{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map(e=>this.getInput(e)),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce((e,t)=>(e[t]=this.getAttr(t),e),{}))}getInput(e){return yy(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return yy(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return Ky(this.node.rawAttrs,e,t);if(null!=n.s)return Uy(this.node.rawAttrs,e,t);if(null!=n.b)return qy(this.node.rawAttrs,e,t);if(null!=n.shape)return Qy(this.node.rawAttrs,e,t);if(null!=n.type)return Zy(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return Xy(this.node.rawAttrs,e,t);if(null!=n.list.s)return eb(this.node.rawAttrs,e,t);if(null!=n.list.shape)return tb(this.node.rawAttrs,e,t);if(null!=n.list.b)return nb(this.node.rawAttrs,e,t);if(null!=n.list.type)return Jy(this.node.rawAttrs,e,t)}return t}}function ab(e,t,n=""){if("number"!=typeof e&&"number"!=typeof t){_(e.length===t.length,()=>n+` Shapes ${e} and ${t} must match`);for(let r=0;r<e.length;r++){const a=e[r],s=t[r];_(a<0||s<0||a===s,()=>n+` Shapes ${e} and ${t} must match`)}}}function sb(e){return"number"!=typeof e&&!e.some(e=>e<0)}function ob(e,t,n){let r=ib(e,n);const a=!sb(r);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&t.forEach(e=>{r=ib(e.shape,r)}),!sb(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function ib(e,t){if("number"==typeof e)return t;if("number"==typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class ub{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=mi(0),Bl(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()}),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map(e=>this.read(e))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),ab(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,Bl(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach((e,n)=>this.write(e,t[n]))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return ua([],[0].concat(this.elementShape));const n=this.readMany(e);return ab(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),gl(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return ua([],[0].concat(this.elementShape));const t=[];for(let e=0;e<this.size();e++)t.push(e);const n=this.readMany(t);return ab(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),po(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,$l(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map(e=>(n+=e,n));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,s=[];zl(()=>{t=io(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=io(mo(t,o,i),this.elementShape)}return s});const o=[];for(let t=0;t<e.length;t++)o[t]=t;this.writeMany(o,s)}}class lb{constructor(e,t,n,r=-1){this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach(e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);ab(t,e.shape,"TensorList shape mismatch: "),Bl(e)}),this.idTensor=mi(0),this.maxNumElements=r,Bl(this.idTensor)}get id(){return this.idTensor.id}copy(){return new lb([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach(t=>{null!=e&&e.has(t.id)||t.dispose()}),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t,n=-1){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);ab(e,this.elementShape,"TensorList shape mismatch: ");const r=ob(this.elementShape,this.tensors,e);return zl(()=>{const e=this.tensors.map(e=>io(e,r));return gl(e,0)})}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=ob(this.elementShape,this.tensors,e),r=this.tensors.pop();return r.kept=!1,ab(r.shape,e,"TensorList shape mismatch: "),io(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(ab(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");Bl(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new lb([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);ab(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=ob(this.elementShape,this.tensors,t);return io(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);ab(this.elementShape,t.shape,"TensorList shape mismatch: "),Bl(t),null!=this.tensors[e]&&(this.tensors[e].kept=!1),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);ab(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=ob(this.elementShape,this.tensors,n);return 0===e.length?ua([],[0].concat(r)):zl(()=>{const t=e.map(e=>io(this.tensors[e],r));return gl(t,0)})}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);ab(this.elementShape,t,"TensorList shape mismatch: ");const n=ob(this.elementShape,this.tensors,t);return 0===this.size()?ua([],[0].concat(n)):zl(()=>{const e=this.tensors.map(e=>io(e,n));return po(e,0)})}}function pb(e,t,n){const[r,a]=gy("fusedOps",e,t,n),s="biasadd"===r,o=!s,i="prelu"===a,u="fusedbatchnorm"===r,l=gy("numArgs",e,t,n);if(s){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const p=gy("strides",e,t,n),c=Ny(e,t,n),d=gy("dataFormat",e,t,n).toUpperCase(),h=gy("dilations",e,t,n);let[f,m]=gy("args",e,t,n);return o&&(m=f,f=void 0),{stride:p,pad:c,dataFormat:d,dilations:h,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:gy("leakyreluAlpha",e,t,n)}}function cb(e,t,n){return{boxes:gy("boxes",e,t,n),scores:gy("scores",e,t,n),maxOutputSize:gy("maxOutputSize",e,t,n),iouThreshold:gy("iouThreshold",e,t,n),scoreThreshold:gy("scoreThreshold",e,t,n),softNmsSigma:gy("softNmsSigma",e,t,n)}}class db{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=mi(0),this.tensorMap=new Map,Bl(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return mi(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach(e=>e.dispose()),this.tensorMap.clear(),zl(()=>{const e=$l(t),r=n.length,a=e.length;_(r===a,()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`);for(let t=0;t<r;t++){const r=n[t],a=e[t];Bl(a),this.tensorMap.set(r,a)}return this.handle})}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return zl(()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return gl(e)})}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}function hb(e,t,n,r,a=zl){const s=((e,t,n)=>{switch(e.category){case"arithmetic":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(gy("a",e,t,n),gy("b",e,t,n))];case"AddN":return[r.addN(gy("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(gy("a",e,t,n),gy("b",e,t,n))];case"Mul":return[r.mul(gy("a",e,t,n),gy("b",e,t,n))];case"RealDiv":case"Div":return[r.div(gy("a",e,t,n),gy("b",e,t,n))];case"DivNoNan":return[r.divNoNan(gy("a",e,t,n),gy("b",e,t,n))];case"FloorDiv":return[r.floorDiv(gy("a",e,t,n),gy("b",e,t,n))];case"Sub":return[r.sub(gy("a",e,t,n),gy("b",e,t,n))];case"Minimum":return[r.minimum(gy("a",e,t,n),gy("b",e,t,n))];case"Maximum":return[r.maximum(gy("a",e,t,n),gy("b",e,t,n))];case"Pow":return[r.pow(gy("a",e,t,n),gy("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(gy("a",e,t,n),gy("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"basic_math":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(gy("x",e,t,n))];case"Acos":return[r.acos(gy("x",e,t,n))];case"Acosh":return[r.acosh(gy("x",e,t,n))];case"Asin":return[r.asin(gy("x",e,t,n))];case"Asinh":return[r.asinh(gy("x",e,t,n))];case"Atan":return[r.atan(gy("x",e,t,n))];case"Atan2":return[r.atan2(gy("x",e,t,n),gy("y",e,t,n))];case"Atanh":return[r.atanh(gy("x",e,t,n))];case"Ceil":return[r.ceil(gy("x",e,t,n))];case"Complex":return[r.complex(gy("real",e,t,n),gy("imag",e,t,n))];case"Cos":return[r.cos(gy("x",e,t,n))];case"Cosh":return[r.cosh(gy("x",e,t,n))];case"Elu":return[r.elu(gy("x",e,t,n))];case"Erf":return[r.erf(gy("x",e,t,n))];case"Exp":return[r.exp(gy("x",e,t,n))];case"Expm1":return[r.expm1(gy("x",e,t,n))];case"Floor":return[r.floor(gy("x",e,t,n))];case"Log":return[r.log(gy("x",e,t,n))];case"Log1p":return[r.log1p(gy("x",e,t,n))];case"Imag":return[r.imag(gy("x",e,t,n))];case"Neg":return[r.neg(gy("x",e,t,n))];case"Reciprocal":return[r.reciprocal(gy("x",e,t,n))];case"Real":return[r.real(gy("x",e,t,n))];case"Relu":return[r.relu(gy("x",e,t,n))];case"Round":return[r.round(gy("x",e,t,n))];case"Selu":return[r.selu(gy("x",e,t,n))];case"Sigmoid":return[r.sigmoid(gy("x",e,t,n))];case"Sin":return[r.sin(gy("x",e,t,n))];case"Sign":return[r.sign(gy("x",e,t,n))];case"Sinh":return[r.sinh(gy("x",e,t,n))];case"Softplus":return[r.softplus(gy("x",e,t,n))];case"Sqrt":return[r.sqrt(gy("x",e,t,n))];case"Square":return[r.square(gy("x",e,t,n))];case"Tanh":return[r.tanh(gy("x",e,t,n))];case"Tan":return[r.tan(gy("x",e,t,n))];case"ClipByValue":return[r.clipByValue(gy("x",e,t,n),gy("clipValueMin",e,t,n),gy("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(gy("x",e,t,n))];case"Rsqrt":return[r.rsqrt(yy(e.inputNames[0],t,n))];case"Prod":return[r.prod(gy("x",e,t,n),gy("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(gy("x",e,t,n),gy("alpha",e,t,n))];case"Prelu":return[r.prelu(gy("x",e,t,n),gy("alpha",e,t,n))];case"IsNan":return[r.isNaN(yy(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"control":return(async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=gy("thenBranch",e,t,n),a=gy("elseBranch",e,t,n),s=gy("cond",e,t,n),o=gy("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=gy("body",e,t,n),a=gy("cond",e,t,n),s=gy("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map(e=>e.id);let u=await o[0].data();o.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()});let l=s;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map(e=>e.id);e.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()});const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach(e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()})}return l}case"LoopCond":return[xy(gy("pred",e,t,n))];case"Switch":{const r=gy("pred",e,t,n);let a=gy("data",e,t,n);return a.kept||(a=xy(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find(e=>void 0!==yy(e,t,n));return r?[xy(yy(r,t,n))]:void 0}case"Enter":{const r=gy("frameName",e,t,n),a=gy("tensor",e,t,n);return n.enterFrame(r),[xy(a)]}case"Exit":{const r=gy("tensor",e,t,n);return n.exitFrame(),[xy(r)]}case"NextIteration":{const r=gy("tensor",e,t,n);return n.nextIteration(),[xy(r)]}case"TensorArrayV3":{const r=gy("size",e,t,n),a=gy("dtype",e,t,n),s=gy("elementShape",e,t,n),o=gy("dynamicSize",e,t,n),i=gy("clearAfterRead",e,t,n),u=gy("identicalElementShapes",e,t,n),l=gy("name",e,t,n),p=new ub(l,a,r,s,u,o,i);return n.addTensorArray(p),[p.idTensor,mi(1)]}case"TensorArrayWriteV3":{const r=gy("tensorArrayId",e,t,n),a=gy("index",e,t,n),s=gy("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=gy("tensorArrayId",e,t,n),a=gy("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=gy("tensorArrayId",e,t,n),a=gy("indices",e,t,n),s=gy("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=gy("tensorArrayId",e,t,n),a=gy("indices",e,t,n),s=gy("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=gy("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=gy("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=gy("tensorArrayId",e,t,n),a=gy("tensor",e,t,n),s=gy("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=gy("tensorArrayId",e,t,n);return[mi(n.getTensorArray(r.id).size(),"int32")]}case"TensorArrayCloseV3":{const r=gy("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=gy("tensorListId",e,t,n),a=gy("index",e,t,n),s=gy("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=gy("tensorListId",e,t,n),a=gy("index",e,t,n),s=gy("elementShape",e,t,n),o=gy("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=gy("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new lb([],n,e.dtype,r),o=$l(e,0);return t.forEach((e,t)=>{s.setItem(e,o[t])}),s}(gy("tensor",e,t,n),r,gy("elementShape",e,t,n),gy("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=gy("elementShape",e,t,n),a=gy("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=gy(s,e,t,n),i=function(e,t,n,r){return new lb([],e,t,r)}(r,a,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=gy("tensorListId",e,t,n),a=gy("indices",e,t,n),s=gy("elementShape",e,t,n),o=gy("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=gy("tensorListId",e,t,n),a=gy("elementShape",e,t,n),s=gy("elementDType",e,t,n),o=gy("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);ab(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=$l(e);return new lb(a,t,r)}(gy("tensor",e,t,n),gy("elementShape",e,t,n),gy("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=gy("tensorListId",e,t,n),a=n.getTensorList(r.id),s=gy("dtype",e,t,n),o=gy("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=gy("tensorListId",e,t,n),a=gy("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=gy("tensorListId",e,t,n),a=gy("elementShape",e,t,n),s=gy("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=gy("tensor",e,t,n),a=gy("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map(e=>(r+=e,r));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const s=ib(e.shape.slice(1),n),o=0===r?0:e.size/r,i=zl(()=>{const n=[];e=io(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],u=[1,t[r],o];n[r]=io(mo(e,i,u),s)}return e.dispose(),n}),u=new lb([],n,e.dtype,t.length);for(let e=0;e<i.length;e++)u.setItem(e,i[e]);return u}(r,gy("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{const r=gy("tensorListId",e,t,n);return[mi(n.getTensorList(r.id).size(),"int32")]}case"TensorListResize":{const r=gy("tensorListId",e,t,n),a=gy("size",e,t,n),s=n.getTensorList(r.id).resize(a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"convolution":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"Conv1D":{const a=gy("stride",e,t,n),s=gy("pad",e,t,n),o=gy("dataFormat",e,t,n).toUpperCase(),i=gy("dilation",e,t,n);return[r.conv1d(gy("x",e,t,n),gy("filter",e,t,n),a,s,o,i)]}case"Conv2D":{const a=gy("strides",e,t,n),s=Ny(e,t,n),o=gy("dataFormat",e,t,n).toUpperCase(),i=gy("dilations",e,t,n);return[r.conv2d(gy("x",e,t,n),gy("filter",e,t,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:p,leakyreluAlpha:c}=pb(e,t,n);return[r.fused.conv2d({x:gy("x",e,t,n),filter:gy("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:p,preluActivationWeights:l,leakyreluAlpha:c})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:p,leakyreluAlpha:c}=pb(e,t,n);return[r.fused.depthwiseConv2d({x:gy("x",e,t,n),filter:gy("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:p,preluActivationWeights:l,leakyreluAlpha:c})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=gy("outputShape",e,t,n),s=gy("strides",e,t,n),o=Ny(e,t,n);return[r.conv2dTranspose(gy("x",e,t,n),gy("filter",e,t,n),a,[s[1],s[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=gy("strides",e,t,n),s=Ny(e,t,n),o=gy("dilations",e,t,n),i=gy("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(gy("input",e,t,n),gy("filter",e,t,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"Conv3D":{const a=gy("strides",e,t,n),s=gy("pad",e,t,n),o=gy("dataFormat",e,t,n).toUpperCase(),i=gy("dilations",e,t,n);return[r.conv3d(gy("x",e,t,n),gy("filter",e,t,n),[a[1],a[2],a[3]],s,o,[i[1],i[2],i[3]])]}case"AvgPool":{const a=gy("strides",e,t,n),s=gy("pad",e,t,n),o=gy("kernelSize",e,t,n);return[r.avgPool(gy("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPool":{const a=gy("strides",e,t,n),s=gy("pad",e,t,n),o=gy("kernelSize",e,t,n);return[r.maxPool(gy("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{const a=gy("strides",e,t,n),s=gy("pad",e,t,n),o=gy("kernelSize",e,t,n),i=gy("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(gy("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s,i);return[u,l]}case"AvgPool3D":{const a=gy("strides",e,t,n),s=gy("pad",e,t,n),o=gy("kernelSize",e,t,n);return[r.avgPool3d(gy("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{const a=gy("strides",e,t,n),s=gy("pad",e,t,n),o=gy("kernelSize",e,t,n);return[r.maxPool3d(gy("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{const a=gy("strides",e,t,n),s=gy("pad",e,t,n),o=gy("dilations",e,t,n),i=a[1],u=a[2],l=o[1],p=o[2];return[r.dilation2d(gy("x",e,t,n),gy("filter",e,t,n),[i,u],s,[l,p],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"creation":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"Fill":{const a=gy("shape",e,t,n),s=gy("dtype",e,t,n),o=gy("value",e,t,n);return[r.fill(a,o,s)]}case"LinSpace":{const a=gy("start",e,t,n),s=gy("stop",e,t,n),o=gy("num",e,t,n);return[r.linspace(a,s,o)]}case"Multinomial":{const a=gy("logits",e,t,n),s=gy("numSamples",e,t,n),o=gy("seed",e,t,n);return[r.multinomial(a,s,o)]}case"OneHot":{const a=gy("indices",e,t,n),s=gy("depth",e,t,n),o=gy("onValue",e,t,n),i=gy("offValue",e,t,n),u=gy("dtype",e,t,n);return[r.oneHot(a,s,o,i,u)]}case"Ones":return[r.ones(gy("shape",e,t,n),gy("dtype",e,t,n))];case"OnesLike":return[r.onesLike(gy("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(gy("shape",e,t,n),gy("dtype",e,t,n),gy("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(gy("shape",e,t,n),gy("minval",e,t,n),gy("maxval",e,t,n),gy("dtype",e,t,n))];case"Range":{const a=gy("start",e,t,n),s=gy("stop",e,t,n),o=gy("step",e,t,n);return[r.range(a,s,o,gy("dtype",e,t,n))]}case"TruncatedNormal":{const a=gy("shape",e,t,n),s=gy("mean",e,t,n),o=gy("stdDev",e,t,n),i=gy("seed",e,t,n);return[r.truncatedNormal(a,s,o,gy("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(gy("shape",e,t,n),gy("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(gy("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"dynamic":return(async(e,t,n,r,a=x)=>{switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=cb(e,t,n),p=await a.image.nonMaxSuppressionWithScoreAsync(r,s,o,i,u,l);return[p.selectedIndices,p.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=cb(e,t,n),l=gy("padToMaxOutputSize",e,t,n),p=await a.image.nonMaxSuppressionPaddedAsync(r,s,o,i,u,l);return[p.selectedIndices,p.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=cb(e,t,n);return[await a.image.nonMaxSuppressionAsync(r,s,o,i,u)]}case"Where":{const r=a.cast(gy("condition",e,t,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(gy("x",e,t,n),gy("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n);case"evaluation":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"LowerBound":{const a=gy("sortedSequence",e,t,n),s=gy("values",e,t,n);return[r.lowerBound(a,s)]}case"TopKV2":{const a=gy("x",e,t,n),s=gy("k",e,t,n),o=gy("sorted",e,t,n),i=r.topk(a,s,o);return[i.values,i.indices]}case"UpperBound":{const a=gy("sortedSequence",e,t,n),s=gy("values",e,t,n);return[r.upperBound(a,s)]}case"Unique":{const a=gy("x",e,t,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{const a=gy("x",e,t,n),s=gy("axis",e,t,n),o=r.unique(a,s);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"image":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"ResizeBilinear":{const a=gy("images",e,t,n),s=gy("size",e,t,n),o=gy("alignCorners",e,t,n),i=gy("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(a,[s[0],s[1]],o,i)]}case"ResizeNearestNeighbor":{const a=gy("images",e,t,n),s=gy("size",e,t,n),o=gy("alignCorners",e,t,n),i=gy("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],o,i)]}case"CropAndResize":{const a=gy("image",e,t,n),s=gy("boxes",e,t,n),o=gy("boxInd",e,t,n),i=gy("cropSize",e,t,n),u=gy("method",e,t,n),l=gy("extrapolationValue",e,t,n);return[r.image.cropAndResize(a,s,o,i,u,l)]}case"ImageProjectiveTransformV3":{const a=gy("images",e,t,n),s=gy("transforms",e,t,n),o=gy("outputShape",e,t,n),i=gy("fillValue",e,t,n),u=gy("interpolation",e,t,n),l=gy("fillMode",e,t,n);return[r.image.transform(a,s,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"graph":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=gy("default",e,t,n);return[yy(e.name,t,n)||a];case"Placeholder":return[yy(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":case"Snapshot":return[xy(gy("x",e,t,n))];case"IdentityN":return gy("x",e,t,n).map(e=>xy(e));case"Shape":return[r.tensor1d(gy("x",e,t,n).shape,"int32")];case"ShapeN":return gy("x",e,t,n).map(e=>r.tensor1d(e.shape));case"Size":return[r.scalar(gy("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(gy("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const s=gy("x",e,t,n),o=gy("data",e,t,n),i=gy("message",e,t,n),u=gy("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"logical":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"Equal":return[r.equal(gy("a",e,t,n),gy("b",e,t,n))];case"NotEqual":return[r.notEqual(gy("a",e,t,n),gy("b",e,t,n))];case"Greater":return[r.greater(gy("a",e,t,n),gy("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(gy("a",e,t,n),gy("b",e,t,n))];case"Less":return[r.less(gy("a",e,t,n),gy("b",e,t,n))];case"LessEqual":return[r.lessEqual(gy("a",e,t,n),gy("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(gy("a",e,t,n),gy("b",e,t,n))];case"LogicalNot":return[r.logicalNot(gy("a",e,t,n))];case"LogicalOr":return[r.logicalOr(gy("a",e,t,n),gy("b",e,t,n))];case"Select":case"SelectV2":return[r.where(gy("condition",e,t,n),gy("a",e,t,n),gy("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"matrices":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(gy("a",e,t,n),gy("b",e,t,n),gy("transposeA",e,t,n),gy("transposeB",e,t,n))];case"Einsum":return[r.einsum(gy("equation",e,t,n),...gy("tensors",e,t,n))];case"Transpose":return[r.transpose(gy("x",e,t,n),gy("perm",e,t,n))];case"_FusedMatMul":const[a,s]=gy("fusedOps",e,t,n),o="biasadd"===a,i="prelu"===s,u=gy("numArgs",e,t,n),l=gy("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[p,c]=gy("args",e,t,n);return[r.fused.matMul({a:gy("a",e,t,n),b:gy("b",e,t,n),transposeA:gy("transposeA",e,t,n),transposeB:gy("transposeB",e,t,n),bias:p,activation:s,preluActivationWeights:c,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"normalization":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(gy("x",e,t,n),gy("axis",e,t,n),gy("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(gy("x",e,t,n),gy("mean",e,t,n),gy("variance",e,t,n),gy("offset",e,t,n),gy("scale",e,t,n),gy("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(gy("x",e,t,n),gy("radius",e,t,n),gy("bias",e,t,n),gy("alpha",e,t,n),gy("beta",e,t,n))];case"Softmax":return[r.softmax(gy("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(gy("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(gy("sparseIndices",e,t,n),gy("outputShape",e,t,n),gy("sparseValues",e,t,n),gy("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"reduction":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"Max":{const a=gy("axis",e,t,n),s=gy("keepDims",e,t,n);return[r.max(gy("x",e,t,n),a,s)]}case"Mean":{const a=gy("axis",e,t,n),s=gy("keepDims",e,t,n);return[r.mean(gy("x",e,t,n),a,s)]}case"Min":{const a=gy("axis",e,t,n),s=gy("keepDims",e,t,n);return[r.min(gy("x",e,t,n),a,s)]}case"Sum":{const a=gy("axis",e,t,n),s=gy("keepDims",e,t,n);return[r.sum(gy("x",e,t,n),a,s)]}case"All":{const a=gy("axis",e,t,n),s=gy("keepDims",e,t,n);return[r.all(gy("x",e,t,n),a,s)]}case"Any":{const a=gy("axis",e,t,n),s=gy("keepDims",e,t,n);return[r.any(gy("x",e,t,n),a,s)]}case"ArgMax":{const a=gy("axis",e,t,n);return[r.argMax(gy("x",e,t,n),a)]}case"ArgMin":{const a=gy("axis",e,t,n);return[r.argMin(gy("x",e,t,n),a)]}case"Prod":{const a=gy("axis",e,t,n),s=gy("keepDims",e,t,n);return[r.prod(gy("x",e,t,n),a,s)]}case"Cumprod":{const a=gy("axis",e,t,n),s=gy("exclusive",e,t,n),o=gy("reverse",e,t,n);return[r.cumprod(gy("x",e,t,n),a,s,o)]}case"Cumsum":{const a=gy("axis",e,t,n),s=gy("exclusive",e,t,n),o=gy("reverse",e,t,n);return[r.cumsum(gy("x",e,t,n),a,s,o)]}case"Bincount":const a=gy("x",e,t,n),s=gy("weights",e,t,n),o=gy("size",e,t,n);return[r.bincount(a,s,o)];case"DenseBincount":{const a=gy("x",e,t,n),s=gy("weights",e,t,n),o=gy("size",e,t,n),i=gy("binaryOutput",e,t,n);return[r.denseBincount(a,s,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"slice_join":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"ConcatV2":case"Concat":{const a=gy("n",e,t,n),s=gy("axis",e,t,n);let o=gy("tensors",e,t,n);return o=o.slice(0,a),[r.concat(o,s)]}case"Gather":{const a=gy("x",e,t,n),s=gy("indices",e,t,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{const a=gy("axis",e,t,n),s=gy("batchDims",e,t,n),o=gy("x",e,t,n),i=gy("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),a,s)]}case"Reverse":{const a=gy("dims",e,t,n),s=[];for(let e=0;e<a.length;e++)a[e]&&s.push(e);const o=gy("x",e,t,n);return[r.reverse(o,s)]}case"ReverseV2":{const a=gy("axis",e,t,n),s=gy("x",e,t,n);return[r.reverse(s,a)]}case"Slice":{const a=gy("begin",e,t,n),s=gy("size",e,t,n);return[r.slice(gy("x",e,t,n),a,s)]}case"StridedSlice":{const a=gy("begin",e,t,n),s=gy("end",e,t,n),o=gy("strides",e,t,n),i=gy("beginMask",e,t,n),u=gy("endMask",e,t,n),l=gy("ellipsisMask",e,t,n),p=gy("newAxisMask",e,t,n),c=gy("shrinkAxisMask",e,t,n),d=gy("x",e,t,n);return[r.stridedSlice(d,a,s,o,i,u,l,p,c)]}case"Pack":return zl(()=>{const a=gy("axis",e,t,n),s=gy("tensors",e,t,n),o=s[0].shape,i=r.squeeze(s[0]).shape,u=s.map(e=>{const t=F(e.shape,o);if(!t&&!F(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)});return[r.stack(u,a)]});case"Unpack":{const a=gy("axis",e,t,n),s=gy("tensor",e,t,n);return r.unstack(s,a)}case"Tile":{const a=gy("reps",e,t,n);return[r.tile(gy("x",e,t,n),a)]}case"Split":case"SplitV":{const a=gy("axis",e,t,n),s=gy("numOrSizeSplits",e,t,n),o=gy("x",e,t,n);return r.split(o,s,a)}case"ScatterNd":{const a=gy("indices",e,t,n),s=gy("values",e,t,n),o=gy("shape",e,t,n);return[r.scatterND(a,s,o)]}case"GatherNd":{const a=gy("x",e,t,n),s=gy("indices",e,t,n);return[r.gatherND(a,s)]}case"SparseToDense":{const a=gy("sparseIndices",e,t,n),s=gy("outputShape",e,t,n),o=gy("sparseValues",e,t,n),i=gy("defaultValue",e,t,n);return[r.sparseToDense(a,o,s,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"sparse":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:s,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(gy("indices",e,t,n),gy("values",e,t,n),gy("denseShape",e,t,n),gy("defaultValue",e,t,n));return[a,s,o,i]}case"SparseReshape":{const{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(gy("inputIndices",e,t,n),gy("inputShape",e,t,n),gy("newShape",e,t,n));return[a,s]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(gy("data",e,t,n),gy("indices",e,t,n),gy("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(gy("data",e,t,n),gy("indices",e,t,n),gy("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"spectral":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"FFT":return[r.fft(gy("x",e,t,n))];case"IFFT":return[r.ifft(gy("x",e,t,n))];case"RFFT":return[r.rfft(gy("x",e,t,n))];case"IRFFT":return[r.irfft(gy("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"string":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(gy("data",e,t,n),gy("dataSplits",e,t,n),gy("separator",e,t,n),gy("nGramWidths",e,t,n),gy("leftPad",e,t,n),gy("rightPad",e,t,n),gy("padWidth",e,t,n),gy("preserveShortSequences",e,t,n));return[a,s]}case"StringSplit":{const{indices:a,values:s,shape:o}=r.string.stringSplit(gy("input",e,t,n),gy("delimiter",e,t,n),gy("skipEmpty",e,t,n));return[a,s,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(gy("input",e,t,n),gy("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"transformation":return a(()=>((e,t,n,r=x)=>{switch(e.op){case"Cast":return[r.cast(gy("x",e,t,n),gy("dtype",e,t,n))];case"ExpandDims":{const a=gy("axis",e,t,n);return[r.expandDims(gy("x",e,t,n),a)]}case"Squeeze":{const a=gy("axis",e,t,n);return[r.squeeze(gy("x",e,t,n),a)]}case"Reshape":return[r.reshape(gy("x",e,t,n),gy("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(gy("x",e,t,n),gy("padding",e,t,n),gy("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(gy("x",e,t,n),gy("padding",e,t,n),gy("constantValue",e,t,n))];case"SpaceToBatchND":{const a=gy("blockShape",e,t,n),s=gy("paddings",e,t,n);return[r.spaceToBatchND(gy("x",e,t,n),a,s)]}case"BatchToSpaceND":{const a=gy("blockShape",e,t,n),s=gy("crops",e,t,n);return[r.batchToSpaceND(gy("x",e,t,n),a,s)]}case"DepthToSpace":{const a=gy("blockSize",e,t,n),s=gy("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(gy("x",e,t,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(gy("x",e,t,n),gy("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(gy("s0",e,t,n),gy("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n));case"hash_table":return(async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=gy("keyDType",e,t,n),s=gy("valueDType",e,t,n),o=new db(a,s);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=gy("tableHandle",e,t,n,r),s=gy("keys",e,t,n),o=gy("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=gy("tableHandle",e,t,n,r),s=gy("keys",e,t,n),o=gy("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=gy("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}})(e,t,n,r);case"custom":const s=my(e.op);if(s&&s.customExecutor)return s.customExecutor(new rb(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return X(s)?s.then(e=>[].concat(e)):[].concat(s)}class fb{constructor(e={},t={},n={},r={}){this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map(e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function mb(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map(e=>wy(e)[0]);let p=[];null!=r&&(p=r.map(e=>wy(e.name)[0]));const c=[...t];for(;c.length>0;){const e=c.pop();(kb(e)||wb(e)||Nb(e))&&null==o&&(o=e,i=o.children.map(e=>e.name).filter(e=>a.has(e))),a.add(e.name),null==n[e.name]&&-1===l.indexOf(e.name)&&-1===p.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach(e=>{u.has(e.name)||(u.add(e.name),c.push(e))}):s.push(e.name))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const gb=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],yb=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],bb=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function kb(e){return gb.indexOf(e.op)>=0}function wb(e){return yb.indexOf(e.op)>=0}function Nb(e){return bb.indexOf(e.op)>=0}class xb{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach(t=>{this._functionExecutorMap[t]=new xb(e.functions[t],this)})}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map(t=>e[t].map(e=>e.id));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get outputs(){return this._outputs.map(e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0}))}get inputNodes(){return this._inputs.map(e=>e.signatureKey||e.name)}get outputNodes(){return this._outputs.map(e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t})}get functions(){return Object.keys(this._functions).reduce((e,t)=>(e[t]=this._functions[t].signature,e),{})}getCompilationKey(e,t){const n=e.map(e=>e.name).sort(),r=t.map(e=>e.name).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=mb(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=t.map(e=>e.name),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map(e=>wy(e)[0]).map(t=>e.nodes[t]),i=e.initNodes;o.forEach(e=>{r.has(e.name)&&s.push(e)}),e.weights.forEach(e=>{r.has(e.name)&&s.push(e)}),null!=i&&i.forEach(e=>{r.has(e.name)&&s.push(e)});const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach(e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every(e=>u.has(e.name))&&s.push(e)})}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map(e=>this.graph.nodes[wy(e)[0]]),a=t.map(e=>wy(e)[0]);let s=a.map(e=>this.graph.nodes[e]);this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const u={},l={};return zl(()=>{const n=new fb(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,a]=wy(t),s=[];s[a]=e[t],r[n]=s});const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=hb(t,r,n,this._resourceManager);if(X(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map(e=>yy(e,r,n))})}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map(t=>e[t]).map(e=>e.map(e=>e.id)));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach(e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)}),t.inputs.forEach(e=>{if("control"!==e.category){const s=function(e,t,n){return t[ky(e,n.currentContextId)]}(e.name,n,r);null!=s&&s.forEach(e=>{if(e&&!e.kept&&!a.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=by(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}})}}))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach(e=>this.intermediateTensors[e].forEach(e=>e.dispose())),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach(e=>{this.tensorsMap[e].forEach(e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()})})}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach(e=>e.dispose()),delete this.intermediateTensors[e]}async _executeAsync(e,t,n=!1,r={},a={}){n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=re().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(e){console.warn(e.message)}this.resetIntermediateTensors();const s=new fb(this.weightMap,r,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,s,t,n);const o=t.map(e=>yy(e,this.tensorsMap,s)),i=o.map(e=>e.id),u=Object.keys(e).map(t=>e[t].id);return this.keepIds=new Set([...i,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce((e,t,n)=>(e[this.inputs[n].name]=t,e),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map(e=>this.graph.nodes[wy(e)[0]]),o=n.map(e=>wy(e)[0]);let i=o.map(e=>this.graph.nodes[e]);0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:p,syncInputs:c}=mb(e,i,this.weightMap,this._initNodes),d=[...s,...this.graph.weights,...this._initNodes||[]].map(e=>({node:e,contexts:t.currentContext})),h=Object.assign({},this.weightMap);Object.keys(e).forEach(t=>{const[n,r]=wy(t),a=[];a[r]=e[t],h[n]=a});const f={},m=this.getFrozenTensorIds(h),g={};for(;d.length>0;){const e=this.processStack(s,d,t,h,g,m,o,f,u);await Promise.all(e)}null!=p||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter(e=>!kb(e)&&!yy(e.name,h,t)).map(e=>e.name);if(y.length>0){let e="";throw null!=p&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${c}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,r,a,s,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let p="";if("Enter"===e.node.op&&gy("isConstant",e.node,r,n)&&([p]=by(e.node.name,n)),null==r[e.node.name]){const c=hb(e.node,r,n,this._resourceManager);p||([p]=by(e.node.name,n));const d=n.currentContext;X(c)?l.push(c.then(l=>(r[p]=l,n.currentContext=d,this.checkTensorForDisposal(p,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u),l))):(r[p]=c,this.checkTensorForDisposal(p,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u))}else this.processChildNodes(e.node,t,n,r,a,u)}return l}processChildNodes(e,t,n,r,a,s){e.children.forEach(e=>{const[o]=by(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some(e=>!!yy(e,r,n))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every(e=>!!yy(e,r,n))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))})}dispose(){Object.keys(this.weightMap).forEach(e=>this.weightMap[e].forEach(e=>e.dispose()))}checkInputShapeAndType(e){Object.keys(e).forEach(t=>{const n=e[t],[r]=wy(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value;_(e.length===n.shape.length&&n.shape.every((t,n)=>-1===e[n]||e[n]===t),()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`)}a.attrParams.dtype&&a.attrParams.dtype.value&&_(n.dtype===a.attrParams.dtype.value,()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`)})}mapInputs(e){const t={};for(const n in e)null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]?t[this._signature.inputs[n].name]=e[n]:t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter(e=>{const[t]=wy(e);return null==this.graph.nodes[t]});if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map(e=>null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]?this._signature.outputs[e].name:e,{})}checkOutputs(e){e.forEach(e=>{const[t]=wy(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)})}}class vb{constructor(e={},t={}){this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class Tb{constructor(t,n={},r=e){this.modelUrl=t,this.loadOptions=n,this.version="n/a",this.io=r,null==n&&(this.loadOptions={}),this.resourceManager=new vb}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return X(e)?e.then(e=>this.loadSync(e)):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new xb(Wy.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=Wy.Instance.transformGraph(e.modelInitializer);this.initializer=new xb(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"==typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e={};return(n instanceof Or?[n]:n).forEach((t,n)=>e[this.structuredOutputKeys[n]]=t),e}return n}normalizeInputs(e){if(!(e instanceof Or||Array.isArray(e)))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce((t,n,r)=>(t[n]=e[r],t),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce((t,n)=>(t[n]=[e[n]],t),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function Ib(t,n={},r=e){if(null==t)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==n&&(n={}),n.fromTFHub&&"string"==typeof t&&(t=function(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}(t));const a=new Tb(t,n,r);return await a.load(),a}function Sb(e,t,n,r){return new(n||(n=Promise))(function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,i)}u((r=r.apply(e,t||[])).next())})}function Eb(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!(a=(a=o.trys).length>0&&a[a.length-1])&&(6===s[0]||2===s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}var _b=function(e){for(var t=[],n=0,r=e;n<r.length;n++){var a=r[n];t.push(a)}return t},Mb=function(){this.parent=null,this.children={},this.end=!1,this.word=[[],0,0]},$b=function(){function e(){this.root=new Mb}return e.prototype.insert=function(e,t,n){for(var r=this.root,a=_b(e),s=0;s<a.length;s++)r.children[a[s]]||(r.children[a[s]]=new Mb,r.children[a[s]].parent=r,r.children[a[s]].word[0]=r.word[0].concat(a[s])),r=r.children[a[s]],s===a.length-1&&(r.end=!0,r.word[1]=t,r.word[2]=n)},e.prototype.commonPrefixSearch=function(e){for(var t=[],n=this.root.children[e[0]],r=0;r<e.length&&n;r++)n.end&&t.push(n.word),n=n.children[e[r+1]];return t.length||t.push([[e[0]],0,0]),t},e}(),Ab=function(){function e(e,t){void 0===t&&(t=6),this.vocabulary=e,this.reservedSymbolsCount=t,this.trie=new $b;for(var n=this.reservedSymbolsCount;n<this.vocabulary.length;n++)this.trie.insert(this.vocabulary[n][0],this.vocabulary[n][1],n)}return e.prototype.encode=function(e){var t=[],n=[],r=[];e=function(e){var t=e.normalize("NFKC");return t.length>0?"▁"+t.replace(/ /g,"▁"):t}(e);for(var a=_b(e),s=0;s<=a.length;s++)t.push({}),n.push(0),r.push(0);for(s=0;s<a.length;s++)for(var o=this.trie.commonPrefixSearch(a.slice(s)),i=0;i<o.length;i++){var u=o[i],l={key:u[0],score:u[1],index:u[2]};null==t[s+(p=u[0].length)][s]&&(t[s+p][s]=[]),t[s+p][s].push(l)}for(var p=0;p<=a.length;p++)for(var c in t[p]){var d=t[p][c];for(i=0;i<d.length;i++){var h=d[i],f=h.score+r[p-h.key.length];(0===r[p]||f>=r[p])&&(r[p]=f,n[p]=d[i].index)}}for(var m=[],g=n.length-1;g>0;)m.push(n[g]),g-=this.vocabulary[n[g]][0].length;var y=[],b=!1;for(s=0;s<m.length;s++){var k=m[s];b&&0===k||y.push(k),b=0===k}return y.reverse()},e}();function Db(e){return Sb(this,void 0,void 0,function(){return Eb(this,function(t){switch(t.label){case 0:return[4,(n=e,re().platform.fetch(n,undefined))];case 1:return[2,t.sent().json()]}var n})})}var Fb="https://tfhub.dev/google/tfjs-model/universal-sentence-encoder-qa-ondevice/1",Ob=[0,1,2],Rb=192;!function(){function e(){}e.prototype.loadModel=function(){return Sb(this,void 0,void 0,function(){return Eb(this,function(e){return[2,Ib(Fb,{fromTFHub:!0})]})})},e.prototype.load=function(){return Sb(this,void 0,void 0,function(){var e,t,n;return Eb(this,function(r){switch(r.label){case 0:return[4,Promise.all([this.loadModel(),Db(Fb+"/vocab.json?tfjs-format=file")])];case 1:return e=r.sent(),t=e[0],n=e[1],this.model=t,this.tokenizer=new Ab(n,3),[2]}})})},e.prototype.embed=function(e){var t=this,n=zl(function(){var n=t.tokenizeStrings(e.queries,Rb),r=t.tokenizeStrings(e.responses,Rb);if(null!=e.contexts&&e.contexts.length!==e.responses.length)throw new Error("The length of response strings and context strings need to match.");var a=e.contexts||[];null==e.contexts&&(a.length=e.responses.length,a.fill(""));var s=t.tokenizeStrings(a,Rb),o={};return o.input_inp_text=n,o.input_res_text=r,o.input_res_context=s,t.model.execute(o,["Final/EncodeQuery/mul","Final/EncodeResult/mul"])});return{queryEmbedding:n[0],responseEmbedding:n[1]}},e.prototype.tokenizeStrings=function(e,t){var n=this;return Nl(e.map(function(e){return n.shiftTokens(n.tokenizer.encode(e),Rb)}),[e.length,Rb],"int32")},e.prototype.shiftTokens=function(e,t){e.unshift(1);for(var n=0;n<t;n++)n>=e.length?e[n]=2:Ob.includes(e[n])||(e[n]+=3);return e.slice(0,t)}}();var Cb=function(){function e(){}return e.prototype.loadModel=function(e){return Sb(this,void 0,void 0,function(){return Eb(this,function(t){return[2,e?Ib(e):Ib("https://tfhub.dev/tensorflow/tfjs-model/universal-sentence-encoder-lite/1/default/1",{fromTFHub:!0})]})})},e.prototype.load=function(e){return void 0===e&&(e={}),Sb(this,void 0,void 0,function(){var t,n,r;return Eb(this,function(a){switch(a.label){case 0:return[4,Promise.all([this.loadModel(e.modelUrl),Db(e.vocabUrl||"https://storage.googleapis.com/tfjs-models/savedmodel/universal_sentence_encoder/vocab.json")])];case 1:return t=a.sent(),n=t[0],r=t[1],this.model=n,this.tokenizer=new Ab(r),[2]}})})},e.prototype.embed=function(e){return Sb(this,void 0,void 0,function(){var t,n,r,a,s,o,i,u,l=this;return Eb(this,function(p){switch(p.label){case 0:for("string"==typeof e&&(e=[e]),t=e.map(function(e){return l.tokenizer.encode(e)}),n=t.map(function(e,t){return e.map(function(e,n){return[t,n]})}),r=[],a=0;a<n.length;a++)r=r.concat(n[a]);return s=Nl(r,[r.length,2],"int32"),o=wl(A(t),"int32"),i={indices:s,values:o},[4,this.model.executeAsync(i)];case 1:return u=p.sent(),s.dispose(),o.dispose(),[2,u]}})})},e}(),zb=function(e,t,n,r){return new(n||(n=Promise))(function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(o,i)}u((r=r.apply(e,t||[])).next())})};console.log("🔁 Starting TF.js + USE initialization…");const Lb=zb(void 0,void 0,void 0,function*(){yield Jr.setBackend("cpu"),yield Jr.ready(),console.log("✅ TF.js backend:",Jr.backendName);const e=yield function(){return Sb(this,void 0,void 0,function(){var e;return Eb(this,function(t){switch(t.label){case 0:return[4,(e=new Cb).load(undefined)];case 1:return t.sent(),[2,e]}})})}();return console.log("✅ USE model loaded"),e});function Bb(e,t){return zb(this,void 0,void 0,function*(){console.log(`🔎 rankArticles("${e}", [${t.map(e=>e.title).join(", ")}])`);const n=yield Lb,r=[e,...t.map(e=>`${e.title} ${e.snippet}`)],a=yield n.embed(r),s=yield a.array();a.dispose(),console.log("    embeddings shape:",s.length,"×",s[0].length);const o=s[0],i=s.slice(1),u=Math.hypot(...o),l=i.map((e,n)=>{let r=0;for(let t=0;t<e.length;t++)r+=e[t]*o[t];const a=r/(Math.hypot(...e)*u);return Object.assign(Object.assign({},t[n]),{score:a})});console.group(`⏺ Raw semantic scores for "${e}"`),l.forEach(e=>console.log(`  • ${e.title}: ${e.score.toFixed(3)}`)),console.groupEnd();const p=l.sort((e,t)=>t.score-e.score).slice(0,3);return console.log("🏆 rankArticles top-3:",p.map(e=>e.title).join(", ")),p})}function Pb(e,t){return zb(this,void 0,void 0,function*(){const n=performance.now(),r=yield Bb(e,t),a=(performance.now()-n).toFixed(1);return console.log(`⏱ rankAndFilter("${e}") took ${a} ms`),console.group(`📋 Final top-3 for "${e}"`),console.table(r.map(e=>({Title:e.title,Score:e.score.toFixed(3)}))),console.groupEnd(),r})}chrome.runtime.onInstalled.addListener(()=>{chrome.contextMenus.create({id:"find-sources",title:"Find Sources with VerifyIT",contexts:["selection"]})}),chrome.contextMenus.onClicked.addListener(e=>{if("find-sources"===e.menuItemId&&e.selectionText){const t=chrome.runtime.getURL(`frontend/popup.html?text=${encodeURIComponent(e.selectionText)}`);chrome.windows.create({url:t,type:"popup",width:350,height:410})}}),chrome.runtime.onMessage.addListener((e,t,n)=>"RANK"===e.type&&(Pb(e.query,e.articles).then(e=>n(e)),!0)),chrome.commands.onCommand.addListener(e=>{"reload-extension"===e&&chrome.runtime.reload()}),zb(void 0,void 0,void 0,function*(){console.log("🚨 Running self-tests for rankArticles & rankAndFilter…");const e=[{title:"Apple",snippet:"Fruit",url:"a",publishDate:""},{title:"Quantum",snippet:"Physics",url:"b",publishDate:""},{title:"Banana",snippet:"Fruit",url:"c",publishDate:""},{title:"Electron",snippet:"Physics",url:"d",publishDate:""}],t=yield Bb("physics",e);"Quantum"===t[0].title||"Electron"===t[0].title?console.log("✅ [Test 1] Semantic ranking picks a physics article first:",t[0].title):console.error("❌ [Test 1] Semantic ranking failed, got:",t.map(e=>e.title));const n=Array.from({length:10},(e,t)=>({title:`Item${t}`,snippet:`Snippet${t}`,url:`${t}`,publishDate:""})),r=yield Bb("Item",n);3===r.length?console.log("✅ [Test 2] rankArticles returns exactly 3 items when given 10"):console.error("❌ [Test 2] rankArticles returned",r.length,"items");const a=yield Bb("A",[{title:"One",snippet:"A",url:"1",publishDate:""},{title:"Two",snippet:"B",url:"2",publishDate:""}]);2===a.length?console.log("✅ [Test 3] rankArticles returns 2 items when given 2"):console.error("❌ [Test 3] rankArticles returned",a.length,"items");const s=yield Bb("fruit",e),o=yield Pb("fruit",e);s.map(e=>e.title).join()===o.map(e=>e.title).join()?console.log("✅ [Test 4] rankAndFilter matches rankArticles order"):console.error("❌ [Test 4] rankAndFilter differs:",s.map(e=>e.title),o.map(e=>e.title)),console.log("🚨 Self-tests complete.")})})()})();